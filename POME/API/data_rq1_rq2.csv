sentence,aspect,sentiment
Not sure if commons-configuration can be configured to actually use this syntax for writing.,functional,NEG
"Is now working fine for me, after a long struggle I found that my code is using latest version of commons-configuration.jar but when I added Esapi as a dependency the Esapi used an old version of the same and that was not compatible with my code so I just excluded the this from Esapi dependency using the exclusion in pom and it worked for me.",compatibility,NEG
commons-configuration 1.8 continues to use commons-lang 2.6. Hence you need this version as well.,usability,NEG
"ConfigException occurs because from version 1.3.0, com.typesafe.config library is only compatible with JDK8; see README.",compatibility,NEG
"use commons-digester-1.8.jar with tiles 2.2.2, the version 2.0 of commons-digester is buggy regarding sax.",reliability,NEG
"Problem appears to have been caused by an incompatibility between commons-digester 1.6 and xerces (call in XercesParser says 2.2), moving to a more recent version of xerces (2.7.1) has fixed the problem.",compatibility,NEG
"The standard W3C DOM API that you use was intended to have a common API between Java, C++ and JavaScript IIRC, so it's very complicated to use directly, as you have noticed.",usability,NEG
Original version of Mockito did not have this feature to promote simple mocking.,functional,NEG
"In theory, the stack should always be empty outside of a call to when or verify, but Mockito can't check that automatically.",functional,NEG
The stack changes often enough that Mockito can't police it very carefully.,reliability,NEG
I had the same issue and played around with the timeout argument http://javadoc.io/page/org.mockito/mockito-core/latest/org/mockito/Mockito.html#22 but with argument 0 like in,reliability,NEG
Seems mockito-all is incompatible with JUnit 4.11 for backwards-compatibility reasons.,compatibility,NEG
You should not use mockito-all with junit 4.8.2-v370.,compatibility,NEG
Mockito does not throw anything when injection fails - you will have to satisfy the dependencies manually.,usability,NEG
"Also for powermock, either upgrade to version 1.6.4 (just released) ; there's an issue (#14) on powermock github repository that changes the dependency to mockito-core.",reliability,NEG
However I'm not sure future mockito 2.x beta will be compatible with current (1.6.x) powermock version.,compatibility,NEG
The reason for the clash is that JUnit comes with its own org.hamcrest.Matcher class that is being used instead of the one imported in your code.,compatibility,NEG
JUnit 5 actually has limited support for JUnit 4 rules but because the MockitoRule's type does not extend one of the supported types it is not included.,compatibility,NEG
"org.mockito.runners.MockitoJUnitRunner is now indeed deprecated, you are supposed to use org.mockito.junit.MockitoJUnitRunner instead.",usability,NEG
"And you can find then ... that anyVarArg() is deprecated, and to use any() for that, too!",usability,NEG
In other words: the mocks generated by Mockito do not allow you to do enhanced testing at the point when methods are invoked on mocked objects.,functional,NEG
"The conflict was in the pom.xml, because I had both mockito-all and mockito-core dependencies included.",compatibility,NEG
"But Mockito cannot instantiate inner classes, local classes, abstract classes and interfaces.",functional,NEG
Also read this Mockito : thenAnswer Vs thenReturn - thenReturn is intended for mocking constant result and cannot work in dynamic way.,functional,NEG
Do not use ArgumentCaptor for stubbing - There is warning in Mockito javadoc.,functional,NEG
"For example, mockito-all contains a repackaged version of Hamcrest, which could conflict with any other version of Hamcrest a project wants to use (and likely won't cause the hard-to-fix problems until runtime!).",compatibility,NEG
As already stated above there is a compatibility issue with mockito-all,compatibility,NEG
You're right mocking the annotation processing API (with a mock library like easymock) is painful.,usability,NEG
Sounds kind of funky to me and I'm not sure if the approach would work with mock objects created with easymock.,usability,NEG
"There is no way you can write Map<String, String> map = getMap(""abc""); without a cast The problem has more to do with easymock and the types returned/expected by the expect and andReturn methods, which I'm not familiar with.",usability,NEG
But it works only with easymock or mockito.,compatibility,NEG
Also there can be a problem in constructing mock via powermock and verify them by easymock so try:,reliability,NEG
You will have to use PowerMock along with easymock to mock the static methods.,functional,NEG
As you pointed out there is no way to mock a static method with easymock.,functional,NEG
"Though it is hard to stay away from these CG lib based mocking libraries, my team has opted for just the easymock, which has reduced our productivity to a great extent.",usability,NEG
"Another possibility is to use easymock to mock the appender, but I think this is more difficult, because you can't produce easily the expected LogEvent.",usability,NEG
"You can't do this with easymock, as it doesn't support mocking constructors.",functional,NEG
"powermock-api-support seems to be ""utility classes only"", where you still need the core libraries provided in powermock-module-junit4.",usability,NEG
"BTW, you don't need gwt-servlet.jar in the classpath, as it's a subset of gwt-user.jar and gwt-dev.jar; and you should set compiler compliance level to 1.6, as GWT does not (yet) support Java 7 features (you can use a JDK 7 ‚Äö√Ñ√∂‚àö√ë‚àö¬®except if you use request factory, you'd need to upgrade to GWT 2.5.0-rc1 then‚Äö√Ñ√∂‚àö√ë‚àö¬® but you have to keep compiler compliance to 1.6, or at least make sure you don't use any Java 7 features ‚Äö√Ñ√∂‚àö√ë‚àö¬®diamond operator, switch on strings, etc.‚Äö√Ñ√∂‚àö√ë‚àö¬®).",compatibility,NEG
Hibernate Validator 5x is not compatible with validation-api 1.0.x,compatibility,NEG
"So if you are including validation-api explicitly, you might have dependency conflicts.",compatibility,NEG
And remove javax.validation:validation-api:jar:1.1.0.Final and validation-api:jar:1.1.0.Final because is not compatible with hibernate-validator.,compatibility,NEG
In that case remove your already existing validation-api 1.0.0.GA since it might cause conflict.,compatibility,NEG
"However, your problem seems to be related with some Spring incompatibility with your Hibernate version:",compatibility,NEG
"You're expressing nervousness about very specific library version dependencies (and I can understand that, given how tightly coupled, say, Hibernate is between its different modules -- only certain versions of Hibernate-annotations work with one hibernate-core, which in turn must be used with a specific hibernate-validator).",compatibility,NEG
"There can probably be dependency clash between hibernate-validator and hibernate-core, hibernate-entitymanger.",compatibility,NEG
"hibernate-validator requires the javax.validation package of versions 1.0.0 or greater, but NOT 2.0.0. That means you need to include another bundle within your features xml OR make sure servicemix is setup with JSR303 / javax.validation support.",compatibility,NEG
"I'm not sure of hibernate-validator would work with EclipseLink, but there should be an implementation of javax.validation for EclipseLink as well.",compatibility,NEG
"This exception was generated because wildfly hibernate-validator library was newer than my app hibernate-validator, so i resloved problem by adding following line in jboss-deployment-structure.xml exclusion section in my application:",compatibility,NEG
Your version of hibernate-spatial 5.0.5 may not be compatible with the version of hibernate you are using 4.3.2. Try changing hibernate-spatial to 4.x.x version and may be also hibernate-validator too.,compatibility,NEG
I don't think that you can use hibernate-validator 5.2.2 (for Hibernate 5) with Hibernate 4. Try to use hibernate-validator 4.2.0.Final.,compatibility,NEG
"It is logical to use and the latest version of hibernate-validator, but it turned out that the error appears when you put newer than hibernate-validator 4.3.2.Final.",reliability,NEG
I solved the problem by excluding hibernate-validator dependency in pom.xml.,reliability,NEG
in my case i just deleted the hibernate-validator and it worked .(i also had a combo of both validation api and hibernate-validator and tried everything) or you can go to your maven repository-->org and then delete the hibernate folder and rebuild your project again..,reliability,NEG
"In my case I deleted hibernate folder, since i was getting error related to hibernate-validator.jar",reliability,NEG
I had the same error message and fixed it by deleting hibernate-validator.jar from {JBOSS_HOME}/common/lib/ folder.,reliability,NEG
commons-validator only works on strings (if you want your entire bean to be validated at once) and isn't a fit for your scenario.,functional,NEG
Here you can see structs 1.2.9 needs commons-validator 1.1.4. It seems your new commons-validator version is not compatible with the struts version.,compatibility,NEG
CONCLUSION AND WORKAROUND: the bug lies in Apache's org.apache.xml.serializer.ToStream class (renamed com.sun.org.apache.xml.internal.serializer.ToStream inside the JDK).,reliability,NEG
"Warning: xalan.jar and xsltc.jar both reference serializer.jar in the manifest, so serializer.jar ends up on the classpath if it is in the same directory and either xalan.jar or xsltc.jar is on the classpath ! If only xercesImpl.jar and xml-apis.jar are on the classpath, org.apache.xerces.dom.DOMSerializerImpl is used as the LSSerializer, and unicode characters are properly handled.",compatibility,NEG
Try that if any other issues raises due to removing the particular jar.Then do not remove the jar.Just extract the jar and remove the org.apache.xerces.parsers.AbstractSAXParser class file from xercesImpl-jar which gets conflicts and convert the remaining class file into jar and load it to the classpath.It would help you to solve the Linkage Error.,compatibility,NEG
"I ended up solving the issue by updating to xercesImpl version 2.9.0. This seems to be a sweet spot version for this issue, even though it is less than what OpenSAML requests it fixes the issue while not causing any other issues with Weblogic (as far as I've currently encountered).",reliability,NEG
"Looks like a conflict in your Xerces versions, perhaps WebLogic's taking precedence over jPOS' xercesImpl-2.10.0.jar",compatibility,NEG
"The issue happens only when you have xerces jar in your classpath, the xerces implementation does not recognize the property and throws an exception on org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.setProperty() which results in a warning log (to System.err) from the com.sun.org.apache.xalan.internal.xsltc.compiler.Parser.parse()",reliability,NEG
I was able to resolve this issue by excluding the xerces:xercesImpl jar from all the Open SAML dependencies in the POM.,reliability,NEG
"We had a similar issue: Parsing of soap messages was working in 10.3.x, but failing in 12.x. The issue turned out to be an outdated xercesImpl.jar.",compatibility,NEG
In my case it was caused by old version of xercesImpl.,compatibility,NEG
"It surely has to do with xerces hell..., I see you have the xercesImpl.jar on classpath that has this class, but you got also other libraries including this class as xmlParserAPIs.jar, try to remove one of them I would remove the xercesImpl.jar.",reliability,NEG
Here xercesImpl causes the unmarshaller to use some other sax parser (instead of the regular jaxb parser) causing it to throw different exception which won't be caught in our catch block which is expecting a jaxbexception or one of its subclasses.,reliability,NEG
We had a similar issue recently while upgradig to java 8 with JBOSS 3.2.6. The cause of the issue was an old xercesImpl.jar.,compatibility,NEG
"Turns out ""xml-apis 2.0.2"" was in my classpath, which is actually xml-apis 1.0.b2 and which is too old to be compatible with xercesImpl 2.9.1 which requires xml-apis 1.3.04.",compatibility,NEG
Apache Jena currently depends (at compile and runtime) on Apache Xerces (i.e. xerces:xercesImpl:2.10.0) therefore Apache Xerces cannot be removed without source code changes.,usability,NEG
The XML requires a dom4j.jar which might not be included in older Java versions.,compatibility,NEG
This was exactly the problem in my case: an old version of dom4j bundled an incompatible version of jaxen.,compatibility,NEG
"While XOM seems a decent and quite popular dom4j replacement, I haven't come to fully embrace it.",community,NEG
"Note that dom4j is not really maintained, so you might be also interested in this discussion about dom4j alternatives.",community,NEG
Applying functions in axis steps is an XPath 2.0 feature; Java (and dom4j) only support XPath 1.0. You cannot do this.,compatibility,NEG
"POI uses the dom4j library, which is known for class loading issues.",reliability,NEG
"I am actually not familiar with dom4j DOM but if you are not sure it can properly handle read-only data, I am not sure how good it is.",functional,NEG
"many XML api like jdom, dom and dom4j abet the harmful habits of building tree model in memory, whereas in reality, it is far more efficient to dump the byte out into output buffer asap...",performance,NEG
"Using apacheds-all is a bad idea because it embeds a lot of rather common dependencies, like slf4j and dom4j.",usability,NEG
"There's a section in the Apache POI FAQ on that, basically using a file is quicker and lower memory than buffering the whole thing via a stream!",performance,NEG
It's a shame that relevant classes like Stylesheet and Rule seem to be rather inadequately documented.,documentation,NEG
"If you run JDK7, James will not start due to a bug in JAXB.",reliability,NEG
"I have found the reason , I would have had an com.sun.xml.bind:jaxb-impl 2.0.5 then cxf-rt-frontend-jaxws provided a com.sun.xml.bind:jaxb-impl 2.2.11.And there is a conflict between them.",compatibility,NEG
The root issue was that the jaxb-impl jar brought in by camel-jaxb was conflicting with the JDK 8 provided version.,compatibility,NEG
i got same error and I would have had an com.sun.xml.bind:jaxb-impl 2.0.5 then cxf-rt-frontend-jaxws provided a com.sun.xml.bind:jaxb-impl 2.2.11.And there is a conflict between them.,compatibility,NEG
NOTE: First I explored solutions with DOM and Stax but they all messed up the original formatting (pretty print) of the generator.,functional,NEG
"There might be a problem with the jaxb-impl version, which is also described.",compatibility,NEG
"When I used xstream, parsing from JSON to java object hasn't been noticable (RCP application with embedded browser).",functional,NEG
Handling List through xstream is bit tricky.,usability,NEG
In summary: You cannot deserialize object lacking a no-arg constructor while running XStream in an Android environment.,"compatibility,functional",NEG
"I used the xstream classloading version, because the objenesis one is very buggy.",reliability,NEG
xstream 1.3.1 does not support anymore the deserialization under JDK 1.7 if there is no non-arg constructor.,compatibility,NEG
"At the same time, have understood that the xstream package behaves unexpected in some situations and that it might be replaced in an upcoming version of Cucumber.",reliability,NEG
I believe XStream converters do not store context to the xstream object.,functional,NEG
XStream cannot read mixed-mode XML i.e. XML where text and child elements are mixed at the same level.,functional,NEG
"I got to the bottom of it - turns out xstream should handle that xml (it doesn't need a no-args constructor), the issue arose because I was using jdk 7 with an older version of xstream (1.3.1).",compatibility,NEG
The classes from the Java6 runtime are clashing with the classes in jaxb-api.jar.,compatibility,NEG
Please note that c3p0 is dependent on SLF4J.,usability,NEG
"We found a discussion where somebody suggested to upgrade c3p0 library(from 0.9.1.2 to 0.9.2) because old library had this issue when lot of concurrent connections are checked out of pool, the connection counter value remains bloated after check-ins and hence doesn't allow to check out new connections and results in processes to wait for connections perpetually (we had checkout timeout = 0).",reliability,NEG
"c3p0 tries to notice when Exceptions received by the application mean the Connection should be invalidated, but that depends on the SQLState of the Exception, which is inconsistent across databases/JDBC drivers and not entirely reliable.",reliability,NEG
"c3p0 does not yet have full JDBC4 support (it will, but after 0.9.2 is finalized), but c3p0-0.9.2-pre7 supports these methods to maintain hibernate dependency.",compatibility,NEG
"Sorry to reraise the issue but: I tried C3p0 and it is better than built-in, but as far as my problem is concerned it does absolutely nothing different than vanilla hibernate: If it cant acquire a connection, it throws an exception, Hibernate catches that exception and, again, hides it from me. By using c3p0, I still use the hibernate API, and whatever c3p0 throws, it gets sucked away by hibernate.",functional,NEG
"I had consistent threading issues with c3p0 (pretty common ones if you dig around), so I did my research and it seemed like the best stock library.",reliability,NEG
"It lacks several features found on any decent connection pool - According to Hibernate Community Documentation, for configuration of c3p0 with Hibernate you can refer to this or MKYong tutorial on Hibernate Community.",functional,NEG
"Because at first it seems c3p0 could do it (detect stale connections and retry to acquire connections for all eternity without ever throwing an exception to the application code (unless of course when its an error related to the sql statement and not to the connection), but in the last paragraph - which is written in pretty confusing way - it seems as if c3p0 can't ensure that to 100%.","functional,documentation",NEG
"Update #3: (Sep '14) Please consider BoneCP to be deprecated at this point, recommend switching to HikariCP.",usability,NEG
"By reading from the documentation, I guess tomcat-jdbc is something introduced in tomcat-7.x not in tomcat-6.x so I doubt if it will work as expected.",reliability,NEG
Since c3p0 offloads this work to background threads - these operations appear to back up and the connections are not immediately available to be re-used.,functional,NEG
"c3p0's author is grateful to hibernate for popularizing his (my) library, but c3p0 has no idea what a Session is, just a Connection.",functional,NEG
In particular we run into problems with c3p0 which masks all Exceptions (and in particular InterruptedExceptions).,reliability,NEG
"MySQL times out, but c3p0 can't recognize when it happens, so we have to restart the pooled connections before MySQL times out.",functional,NEG
HikariCP does not automatically execute either commit or rollback if auto commit is turned off.,functional,NEG
"BoneCP is not discontinued, but consider it @Deprecated now that HikariCP is around; there's little point contributing significant resources to it now that something radically better is on the horizon.",community,NEG
Edit: to use c3p0 connection pooling you'll also need the hibernate-c3p0 dependency.,usability,NEG
Note the change to commons-dbcp as c3p0 doesn't have XA capable implementations.,functional,NEG
Update: I admit I didn't check the status when I wrote this answer (I'm using c3p0 for many years and was happy with it) and it appears that c3p0 development is in stand by.,community,NEG
It turns up that connection pool c3p0 0.9.2.1 has memory leak.,reliability,NEG
"Given this thread, the BoneCP author has built a 0.8.1-SNAPSHOT but it did not totally fix the problem.",reliability,NEG
"It changed from version 3 to 4 and has changed again with verson 4.3. As @teresa-carrigan mentions in a comment to this answer, you'll have to compile the latest BoneCPConnectionProvider.java (currently supporting Hibernate 4.3.1) and use that.",compatibility,NEG
There was a bug reported against HikariCP 1.4.0 just two days ago regarding user-defined pool names being ignored (and replaced with the auto-generated name).,reliability,NEG
It turned out to be a connection leak in c3p0 thanks to @djechlin's advice.,performance,NEG
"The ""not recommended"" advice implies not using com.jolbox:bonecp-provider which only contains one class BoneCPConnectionProvider.",functional,NEG
Setting autoDeploy to false prevents this Tomcat behavior which had the unwanted c3p0 connection pool side effect.,reliability,NEG
"Beware about newer version of c3p0, I downloaded the latest version (c3p0-0.9.5-pre9) and I get stuck for hours in other errors like:",reliability,NEG
And Andy Wilkinson is correct as far as I can tell in that you can't use the dataSourceClassName configuration approach for HikariCP with Spring Boot.,functional,NEG
"c3p0 can't help keep your Connections fresh if your application keeps them checked out, and the point of a Connection pool is to eliminate the performance cost of just-in-time Connection checkout.",functional,NEG
Regarding the portability of tomcat-jdbc.jar Unfortunately this depends on the tomcat library and version.,compatibility,NEG
HikariCP will likely never support such functionality (I can say that as one of the authors).,functional,NEG
c3p0 doesn't parse JDBC urls or make any assumptions at all about what's in them.,functional,NEG
"So, directly the issue is that the Connection pool was trying to acquire new Connections, but the tasks attempting to acquire those tasks froze for a long period of time, so long that c3p0 decided the tasks must be deadlocked and then discarded and replaced the Thread pool.",reliability,NEG
"p.s. c3p0 offers no ""loginTimeout"" config parameter.",functional,NEG
"(I'm having trouble figuring out if this is possible, looks like this area of HikariCP has been substantially refactored: github)",usability,NEG
"The JdbcUtils.closeQuietly(rs, pstmt) you use is not working.",reliability,NEG
"Some newer Connection pools, most notably HikariCP, simply omit support, arguing that caching of PreparedStatements is better left to the DBMS.",functional,NEG
c3p0 0.9.2.x is old and does not support JDBC4 methods.,compatibility,NEG
It looks like the used c3p0 connection pool does not support JDBC 4.1 yet.,compatibility,NEG
About using HikariCP as a resource adapter inside JCA container: barely possible.,compatibility,NEG
They had an issue connection restoring in early releases of c3p0 0.9.,reliability,NEG
I reported this issue to HikariCP team.,reliability,NEG
"If the master is down and c3p0 releases Connections to your application, it has no way to know whether those Connections will be used for read-only purposes or not, so it should consider those Connections broken.",functional,NEG
"You're not closing off your resultset (and also BoneCP is deprecated, migrate to HikariCP)",usability,NEG
I was having trouble with DBCP when the connections times out so I trialled c3p0.,reliability,NEG
"Originally, Connection testing in c3p0 was often very expensive (because for dbms/driver independence and certainty of a full validity test, it used an expensive metadata getTables(...)",performance,NEG
HikariCP - 100 connections is also a lot for HikariCP unless you have tons of very very long running queries.,performance,NEG
"Therefore there is no easy way, that I can cast it to C3P0ProxyConnection and use c3p0 raw connection operations.",usability,NEG
The 0.9.1.2 version of c3p0 only works with Java5.,compatibility,NEG
"If neither the Tomcat pooling datasource nor HikariCP are available and if Commons DBCP is available we will use it, but we don’t recommend it in production and its support is deprecated.",usability,NEG
"bonecp is another new connection pool, no lock is its advantage.",functional,NEG
c3p0 marks these Connections to be destroyed rather than reintegrated into the pool when they are checked-in by the client.,discarded,NEU
"c3p0 will pass your call to setReadOnly (whether true or false) to the underlying Connection, and the Connection will route to the master or the slaves accordingly.",discarded,NEU
c3p0 dumps its config at INFO level on pool initialization.,discarded,NEU
c3p0 libraries are intended to be logged at INFO in general.,discarded,NEU
"By default, it should take about 30 seconds before c3p0 signals a failure if it cannot acquire a Connection.",discarded,NEU
"c3p0 internally tests Connections on any kind of Exception, but the Exception from this test is not thrown or visible to client code.",discarded,NEU
"When not running Tomcat, you don't have this ability... you need to use a third-party-library like c3p0 for connection pooling.",discarded,NEU
c3p0 creates physical connections with the credential you told him to use and you can't change the credentials of a connection obtained from a pool after the facts.,discarded,NEU
The crawler4j is using c3p0 pooling to insert into mysql.,discarded,NEU
"If you want to use BoneCP with Hibernate, you will need the bonecp-provider because it is a required configuration property in hibernate.cfg.xml: <property name=""connection.provider_class"">com.jolbox.bonecp.provider.BoneCPConnectionProvider</property> (copied from here, but also shown in this SO question).",discarded,NEU
By default HikariCP runs as a fixed-sized pool.,discarded,NEU
"Finally: To set these c3p0 parameters via hibernate, you can use properties like hibernate.c3p0.",discarded,NEU
"DBCP — The less creatively-named Apache DBCP (for ""Database Connection Pooling"") does pretty much the same things as c3p0.",discarded,NEU
"Actually c3p0 is a jar file which we uses in hibernate, when we run our hibernate application, we can see in console that there is line ""Connection Pool Size 20"", that is the number of connection objects available, if we uses only 5 connection then 15 connection objects will be waste, and in industry ""Connection Objects"" are very costly resources, that's why to define the number of connection objects that may be needed in our application we use c3p0 jar file.",discarded,NEU
c3p0 starts up a bunch of Threads every time a PooledDataSource is initialized (when the first Connection is requested).,discarded,NEU
"The truth is that if autoCommit=false, and you run queries without committing, then HikariCP will automatically rollback on return to the pool.",discarded,NEU
The commons-configuration project from apache supports INI file formats:,compatibility,POS
You can use class org.apache.commons.configuration.PropertiesConfiguration (commons-configuration.jar) It has many nice features and also automatic refreshing ability.,functional,POS
"Using commons-configuration from Apache Commons, you can reference other properties in the same file as follows:",functional,POS
"I've been there before...and I can tell you, the Commons Configuration project from Apache will do the job; it will allow you to write and read Properties files...and for your requirement, have a look at the setComment(String key, String comment) method inside PropertiesConfigurationLayout.",functional,POS
You can achieve something like that using the Typesafe Config Library as in the following example:,functional,POS
"Also, Typesafe Configuration library supports both this the configuration above or writing more ""plainly"" like below:",functional,POS
"Apache commons-digester is used to parse the configuration files, so I suspect this particular use case simply wasn't expected.",functional,POS
Digester is built over sax and hence has all the sax features plus the specificity that is required for selectively parsing specific tags.,functional,POS
"Also, Dom4J is a more Java-friendly way of handling DOM trees: http://dom4j.sourceforge.net/dom4j-1.6.1/guide.html, where you can use e.g. simple iterators for nested elements.",usability,POS
after a lot of fight able to resolve the 2 issues 1. by upgrading the commons-digester from 1.6 to 2.1 2. by downgrading the version of log4j from 1.2.17 to 1.2.8,compatibility,POS
Mockito provide InOrder to verify call in orders,functional,POS
"Have a look at the Mockito documentation, at https://static.javadoc.io/org.mockito/mockito-core/2.8.47/org/mockito/Mockito.html#answer_stubs",documentation,POS
Check the 1.10.19 and 2.7.22 docs for detailed explanation.,documentation,POS
"As the linked document mentions (Point # 12) you can use any of the doThrow(),doAnswer(),doNothing(),doReturn() family of methods from Mockito framework to mock void methods.",functional,POS
"If you're willing to convert your private Reader bar() to protected, then you can use Mockito spying",functional,POS
"Here is relevant documentation (see section ""Important gotcha on spying real objects!""): http://static.javadoc.io/org.mockito/mockito-core/2.8.47/org/mockito/Mockito.html#13",documentation,POS
"Luckily for us, Mockito allows to us to use a mockito-core dependency instead of mockito-all.",functional,POS
Mockito provides regex matcher in standard org.mockito.Matchers class.,functional,POS
This works with Java 8 and above:,compatibility,POS
You should read the Javadoc of Mockito.RETURNS_DEEP_STUBS which explains this in more detail and also has some warnings about its usage.,documentation,POS
You don't need to have two distinct calls to verify to capture the arguments: Mockito will be able to capture all arguments passed to the mock with just one call.,functional,POS
"If you're using Mockito 2 with Java 8, there's a neat way of doing this.",usability,POS
JUnit has similar feature for parameterized tests.,functional,POS
You can use MockingDetails and either printInvocations or getInvocations to inspect the interactions belonging to a mock.,functional,POS
Creating mocks manually with Mockito::mock works regardless of the JUnit version (or test framework for that matter).,compatibility,POS
"Using the @Mock-annotation and the corresponding call to MockitoAnnotations::initMocks to create mocks works regardless of the JUnit version (or test framework for that matter but Java 9 could interfere here, depending on whether the test code ends up in a module or not).",functional,POS
also will suggest you to read Mockito docs to understand mocking principles .,documentation,POS
"In summary, Mockito is designed for easily making replacement instances of classes so you can check your interactions with your class-under-test: Here, you're creating fake (""test double"") implementations of ClassOne, ClassTwo, and ClassThree, for the purpose of testing ClassFive.",usability,POS
In order to wait for another thread to complete you can use this Mockito feature: verify with timeout.,functional,POS
For more information see the Mockito documentation.,documentation,POS
"org.springframework.beans.factory.support offers a method that can generate a bean definition instead of creating an instance of the object, and it can be used to git rid of Comparison Failure.",functional,POS
And note that mockito recently introduced a @Captor annotation that makes things even easier to use.,usability,POS
"For one-off mocks, you can use InvocationOnMock.getArguments to get the value of str:",functional,POS
"Assuming it's just a straight-forward comparison between the RDD's fields, you can use Mockito's built in refEq matcher that uses reflection and just compares each field individually:",functional,POS
"More often than not, however, if you just want to compare the class' data members, the built-in refEq matcher would do the trick:",functional,POS
"What you can do is use Mockito's ArgumentCaptor to capture the Response that is passed to the resume method, and then make your assertions on that Response.",functional,POS
Mockito's documentation has more information on mocking and spying.,documentation,POS
"If that doesn't work for you, PowerMock(ito) or JMockit most likely would do the job.",functional,POS
You can try to use that experimental feature in Mockito 2 that allows mocking final methods.,functional,POS
1) See this doc on how to mock void methods with exception:,documentation,POS
"As per the documentation (Mockito 1 and Mockito 2), you have to use argThat(matcher), a Mockito matcher which allows you to use your custom argument matchers:",functional,POS
You can find more info here: https://static.javadoc.io/org.mockito/mockito-core/2.8.47/org/mockito/Mockito.html#15,documentation,POS
"As a side note, you should use ArgumentMatchers (might be Matchers if you use an old version) to avoid such issue:",reliability,POS
"If you are using Mockito (directly or via Spring testing support @MockBean), it has a verification mode with a timeout exactly for this case: https://static.javadoc.io/org.mockito/mockito-core/2.10.0/org/mockito/Mockito.html#22",functional,POS
"You might use verifyNoMoreInteractions for an RPC object, if you want to avoid unnecessary RPC calls, but not (say) a calculator with no side effects.",functional,POS
According to the Mockito documentation you can set different behavior for consecutive method calls.,functional,POS
"For detailed information, please refer to the official document: Mocking final types, enums and final methods (Since 2.1.0).",documentation,POS
According to Mockito documentation on final types and methods here it is possible to enable mocking of final classes and final methods by use the following dependency mockito-inline instead of mockito-core.,functional,POS
easymock or similar is good for that (same with post and get),functional,POS
"EDIT: in case you want to test the rest client, use dependency injection to inject the request, then use easymock to mock it like this (for example to test, if delete is called properly):",functional,POS
"If you would like a ""nice"" Mock Object that by default allows all method calls and returns appropriate empty values (0, null or false), use createNiceMock() instead.",functional,POS
"To create a nice mock, use the static createNiceMock(Class class) method on the Easymock class...",functional,POS
"With EasyMock you can create a nice mock, which unlike a normal mock object does not throw assertion errors if an unexpected/recorded call occurs.",functional,POS
"Also it is a jboss product and works fine with seam, easy to integrate.","compatibility,usability",POS
"I choose resteasy as the rest frameworks and it works just fine and easy (both to rewrite and to test, same as easymock).",usability,POS
Read the documentation for more help Easymock,documentation,POS
"I am using resteasy as the rest frameworks and it works just fine and easy (both to rewrite and to test, same as easymock).",usability,POS
But I am sure you can easily port that to JMockit.,usability,POS
It is possible to use a custom equals matching method using org.easymock.IArgumentMatcher.,functional,POS
There is another example and more thorough explanations available in the EasyMock documentation.,documentation,POS
Check the 3.2 docs for more info: http://easymock.org/api/easymock/3.2/org/easymock/EasyMock.html#capture%28org.easymock.Capture%29,documentation,POS
"For other interface testing (such as webservice), soapui is a nice starting point.",functional,POS
"Now it becomes fun :) If you run in ""real"" JEE, then it depends if it's prior to JEE6 or not as from JEE6 you have an embedded container (which really ease the testing).",usability,POS
If you need to throw an Exception from a void method you can use easymock's expectLastCall(),functional,POS
See the Easymock documentation for more details,documentation,POS
Then you can use easymock to create a mock Snmp instance and pass it to Board's constructor.,functional,POS
"If you don't want or you can't modify the code in this way, then you can use Powermock to intercept the constructor.",functional,POS
Looking to jira.codehaus.org/browse/EASYMOCK-108 they added Android support to run test with easymock as part of instrumental tests.,compatibility,POS
"After some research, I came to know that PowerMock provides a module called easymock wherein there is method called mockStaticPartial which mocks specific static functions in a class.",functional,POS
"but whenever you want to mock a instance variable, you should be using Whitebox feature of easymock.",functional,POS
Then you can mock all method call within getMessage method using powermock or easymock.,functional,POS
Its a test-support lib that automatically injects mocks when injection is required.,functional,POS
"Maybe you can use easymock to isolate the classes you want to test, and have the mock objects receive the events and check that they're fired.",functional,POS
"It's written for and in java, but I find it works very well with scala.",compatibility,POS
So EasyMock is a perfect fit for Test-Driven Development.',functional,POS
"If you'd rather relax your test requirements and just check if addBall() gets called with any object (I'd advise against that), you can use anyObject() method of EasyMock to match any Ball.",functional,POS
EasyMock Class extension worked to create mock object for class or interface.,functional,POS
There is also PowerMock for testing static/final methods and JMockit for some really hardcore testing.,functional,POS
The javadoc itself has a ton of information about how to utilize the library,documentation,POS
PowerMockito extends Mockito functionality with several new features such as mocking static and private methods and more.,functional,POS
Use PowerMockito methods instead of the Mockito's.,functional,POS
It‚Äö√Ñ√∂‚àö√ë‚àö¬•s a tiny library that depends just on validation-api and spring-expression.,performance,POS
"Hibernate validator is one of the implementations of JSR 303 (reference implementation actually), so it implements all of the API, but adds its own extensions, for instance the @NotBlank annotation you mention.",functional,POS
"In the other hand, some containers, such as WildFly and GlassFish, provide the Hibernate Validator dependency (or any other Bean Validation implementation) to be compliant with the Java EE 7 specification.",compatibility,POS
"A possible troubleshooting path is on the scope (provided) defined for gwt-user, which is the only library bringing in validation-api applying the dependencies management above.",functional,POS
It is currently at version 1.1.0. To make it easier than using that library you should really look at using the hibernate-validator library as it will include that api library along with the proper implemented classes to actually validate beans.,usability,POS
"Problem is because of jboss's provided validation-api 1.0, but hibernate-validator is built on 1.1, so you can exclude validation api and dependent modules in jboss-deployment-structure.",functional,POS
"As far as I remember the @Valid annotation is part of the validation-api JAR which you can find in the lib directory of the Hibernate Validator, as you have already downloaded the Hibernate implementation.",functional,POS
You can use Hibernate Validator 5.x and Validation API 1.1 in Spring validation mechanism. The new version of Hibernate Validator can validate your persistent bean as a method argument and throw javax.validation.ConstraintViolationException on your controller.,functional,POS
"I am using version 6.0.2, which conforms to the new (August 2017) Bean Validation Framework API 2.0.",compatibility,POS
The Hibernate Validator documentation provides some information on how messages are interpolated.,documentation,POS
Since Wicket 6.4.0 there is a support in wicket for java-bean-validation.,compatibility,POS
Here's the documentation of hibernate-validator - it tells you about event listeners.,documentation,POS
Typically people seem to use hibernate validator.,community,POS
"You can find some hints in the eclipse docs (scroll down to JPA section), but it looks like you'll have to slightly edit the standard validators to make it work.",documentation,POS
You can use 4.3.1.Final version of hibernate-validator and that will solve the primary issue .The changes mentioned in the edit's are not required.This is assuming you dont need the features of EL 2.2 as the example that you are trying is a basic one.,reliability,POS
"hibernate-validator 5.1.0.Final include javax validation in transitive dependency, so normally, this problem would never have appeared.",reliability,POS
"Defining a wrapping bean would IMHO be the smartest move, as hibernate-validator is completly centered around the notion of the bean, and is, after all, a reference implementation of the bean validation specification.",functional,POS
With hibernate-validator dependency you can define range check,functional,POS
"hibernate-validator 5.2.x will be supporting the following syntax, which is great:",functional,POS
"Spring Boot automatically registers a MessageSource bean for you, so you should put your messages in the src/main/resources/messages.properties file.",functional,POS
"1) In order to solve this issue, you must be using <hibernate-validator-version>5.1.1.Final</hibernate-validator-version> or latest.",reliability,POS
If you use hibernate-validator then you may create a custom constraint which combine @Min and @Digits from the 3rd option by using @ConstraintComposition(AND).,functional,POS
"In Spring you can trigger validation using annotations (@Valid) but you can also do it programmatically (in your ""reusable method"").",functional,POS
You can use hibernate-validator to validate an object before serializing.,functional,POS
Apache's Bval provides a validator implementation that can serve as an alternative to hibernate-validator.,functional,POS
Here's an example for getting started on using Bval.,documentation,POS
"To verify if your String is valid URL or not, you can use Apache commons-validator URLValidator class as below:",functional,POS
The newer version (1.4.0) of commons-validator has no dependency on oro anymore.,usability,POS
You can get it easier integrating libraries such as commons-validator into your project and use pre-defined validation rules in your forms.,usability,POS
A serializer that handles unicode characters properly is org.apache.xml.serialize.DOMSerializerImpl (renamed com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl inside the JDK).,functional,POS
"com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl is using com.sun.org.apache.xml.internal.serialize.XMLSerializer, which supports unicode.",functional,POS
I guess one could do a transform to another DOM document and use DOMSerializerImpl to serialize.,functional,POS
"If you were using maven ,you can just simply add xercesImpl maven dependency as below:",usability,POS
"For processing large xml files I would suggest switching to a SAX parser which is more work for you, but should process a large XML with the smallest memory footprint.",performance,POS
"Using LexEv from http://andrewjwelch.com/lexev/, putting xercesImpl.jar from Apache Xerces on the class path, I am able to compile and run some short sample using dom4j:",functional,POS
Xerces is used for RDF/XML parsing and for Datatypes.,functional,POS
"For exemple using dom4j you can use Element.createCopy to copy an element, and add it elsewhere.",functional,POS
I'd recommend using a small xml library like dom4j to create the xml document.,functional,POS
A sax parser is a good choice if you only want to read the document.,functional,POS
"Have a look at jdom or dom4j, they are really easy to use.",usability,POS
dom4j allows to plug in Jaxen for XPath support as well.,functional,POS
This can be done using testNG objects or by creating an tesNG.xml using dom4j or something similar.,functional,POS
"There are several Java libraries that could be used for the reading and writing of the XML files, e.g. dom4j.",functional,POS
"Use jdom or dom4j to parse xml file,you can easily have this work done.",usability,POS
Additionally dom4j provides an event based model for processing XML documents.,functional,POS
Moreover dom4j works with any SAX parser via JAXP.,compatibility,POS
Please see How dom4j handle very large XML documents? to understand how it works.,performance,POS
If you want to avoid adding \n all over the place in big HTML string manually then you can use OutputFormat.createPrettyPrint() in dom4j package:,usability,POS
Dom4j also has good support for an XPath like query against large documents.,functional,POS
Info on using dom4j for large documents is here: http://dom4j.sourceforge.net/dom4j-1.6.1/faq.html#large-doc,documentation,POS
"Using dom4j, you can so it pretty simply...",documentation,POS
"Instead of that I suggest that, for example, you use dom4j or jdom to parse the WSDLs (whigh should be correct xml documents) and extract the information you need from them by using XPath queries",functional,POS
"You might consider plugging a more powerful XPath/XQuery engine, like Saxon, BaseX or other native XML databases with Java APIs available.",functional,POS
"on the other hand - GraphML is in XML format so you can easily use jdom or dom4j to create a DOM, add the nodes based on your data an serialize it to an XML file.",usability,POS
The sax parser is good if you are working with large documents.,performance,POS
You must read and write XML with the SAXReader and XMLWriter provided by dom4j.,functional,POS
I could recommend the simple framework or you could do parsing/wrinting xml with pure dom4j as I did in the timefinder project.,functional,POS
All you need to do is use the dom4j xml parser to pull out the values you need and store them in your variables.,functional,POS
What you are trying to do is much more easily accomplished using something like XStream or even DOM parsing (jdom or dom4j).,usability,POS
If u by any chance want to store the content into an object : try to learn JAXB,functional,POS
the library dom4j is probably easiest to use and understand.,usability,POS
"Conversion from xml to DOM is done by a XML Parser, common helper libraries are jdom or dom4j.",functional,POS
Use ByteArrayInputStream and ByteArrayOutputStream to convert between streams and String.,functional,POS
"I realize that this is an old thread, and dom4j may not have had adequate namespace capabilities at the time the answers were written, but it looks like dom4j is now able to accomplish this quite easily with the version I am using (1.6.1).",usability,POS
"SAX is a more lowlevel interface and has support via its LexicalHandler interface to get notified when the parser encounters entity references, but it does not report character references.",functional,POS
Hibernate supports dom4j as API for manipulating XML trees.,functional,POS
"You can even take an XML document, parse it using dom4j, and write it to the database with any of Hibernate's basic operations: persist(), saveOrUpdate(), merge(), delete(), replicate() (merging is not yet supported).",functional,POS
"It's a little bit ugly and not optimal for huge xml data, but you could extract user part from xml using for example dom4j and than use Jackson to parse ""only user xml"" part.","performance,functional",POS
I did a similar thing by grabbing a webpage using the apache HttpClient libraries and then dom4j to look for a particular tag to extract text from.,functional,POS
I have found dom4j to be the tool for working with XML.,functional,POS
"Have a look at the XMLWriter class of dom4j - while it's a little old, it makes it really easy to output XML documents by calling its startElement and endElement methods.",usability,POS
The easiest way is to use a JDOM or dom4j parser instead as they are meant to be used to parse pure XML data structure which is what you need here.,"functional,usability",POS
"You can also use FilterInputStream/FilterOutputStream, PipedInputStream/PipedOutputStream, or ProxyInputStream/ProxyOutputStream for pre- and post-processing.",functional,POS
"You could try dom4j http://dom4j.sourceforge.net/dom4j-1.6.1/ This is a DOM parser (as opposed to SAX) and allows you to easily traverse and manipulate the DOM, removing node attributes like onmouseover for example (or entire elements like <script>), before writing back out or streaming somewhere.","functional,usability",POS
"There are many libraries like dom4j, jdom, xtream etc available for reading and manipulating xml data.",functional,POS
It seems to me that the behavior of dom4j is correct.,reliability,POS
Some XML libraries have pretty print functionality built in. For example dom4j has OutputFormat.createPrettyPrint() - see a guide on how to use it at http://dom4j.sourceforge.net/dom4j-1.6.1/guide.html#Writing_a_document_to_a_file,functional,POS
"Also, dom4j provides org.dom4j.dom.DOMNodeHelper class which is a collection of utility methods to do some conversion from org.w3c.dom objects to org.dom4j objects but I've not found the method you need.",functional,POS
"Dom4j allows you to parse an org.w3c.dom.Document as an org.dom4j.Document, but then you cannot search through the dom4j Document by an org.w3c.dom.Element; you should do that on your own method.",functional,POS
"For instance, you can use xpath to search some nodes.",functional,POS
"If you need to read existing XML into normal Java classes, I personally believe that apache digester is much more elegant and easier to use than dom4j, since you just specify the mapping.",usability,POS
"Yea, to parrot @aaray and @MeBigFatGuy, you want to use some event based parser for this, the dom4j mentioned, or SAX or StAX.",functional,POS
"As a side note, DOMElement and all the other classes in org.dom4j.dom is a DOM4J implementation that also supports the w3c DOM API.",functional,POS
"It's also why things like dom4j, JAXB, XPath, etc. make things much easier.",usability,POS
I decided for this api because it is quite handy if you got to move a number of branches inside one document and it's build in xpath facilitates finding the wanted elements.,usability,POS
XML handling is a bit simpler using dom4j.,usability,POS
I like XOM more than dom4j for its simplicity and correctness.,"usability,reliability",POS
XOM won't let you create invalid XML even if you want to ;-) (e.g. with illegal characters in character data),"functional,reliability",POS
"I guess you're reading an existing file, so if it's ISO-8859-1 encoded and its prolog contains the same encoding declaration, you shouldn't have any problem, dom4j should do everything for you.",functional,POS
"For python, I know that I would recomment ElementTree or BeautifulSoup which are very robust.",reliability,POS
"For the record, with dom4j you could achieve this with similar ease using XMLWriter and OutputFormat.",usability,POS
"Since v2.2.2, the version numbers of compatible instances of jaxb-api and jaxb-impl no longer match: e.g. jaxb-impl v2.2.4 is compatible with jaxb-api v2.2.3",compatibility,POS
"Take the latest version of James (3.0-beta5) from here, it is not affected by this annoying JAXB bug.",reliability,POS
FYI this problem does not happen with jaxb-impl 2.2.4 and newer (though not sure in which version exactly it was changed).So now you can either use latest JDK 7u7 (which should contain jaxb-impl 2.2.4) or add jaxb-impl 2.2.6 to your project.,reliability,POS
It's a good practice to do so. Use XStream.alias() method.,functional,POS
xstream does support using constructors other than default one in the enhanced mode.,functional,POS
I'm not sure if I understand your question.But I guess you could try using xstream api from thoughtworks.It can generate xml on the fly for you given a Java object and from this point on you can treat these xmls the way you do now to generate your webpages.,functional,POS
"Note that XStream has multiple implementations of fromXML(), so you can provide strings, URLs, readers etc.",functional,POS
xstream is pretty easy if you want to map your xml to/from objects http://code.google.com/p/xstream-for-android/,usability,POS
Since TreeNodes can be serialized you can use xstream to do so.,functional,POS
One approach I have used is to use the xstream package from Codehaus (http://x-stream.github.io/) to serialize/deserialize directly.,functional,POS
"It should allow you to create objects in a very simple manner (from their 2-minute tutorial), you could do something like so: Employee emp = (Employee)xstream.fromXML(xml);",usability,POS
"Then you can use XStream to write to the XML.( I assume that you write the XML on the server, if you need to write the XML on the client computer - just import the xstream package iito your JSP header and put the servlet code snippet in your JSP)",functional,POS
Generally xstream uses pull parsing what is really fast in case of XML (pull parsing is the same idea like behind Java StAX - newer standard in Java after SAX and DOM).,performance,POS
You can use XStream.useAttributeFor() to declare a property to be serialized as an attribute:,functional,POS
It is easy to do this using xstream annotations as shown below:,usability,POS
XStream is a simple library to serialize objects to XML and back again.,"usability,functional",POS
"If your xml is generated from an instance of CampaignFrameResponse class, u can use xstream.",functional,POS
"Xstream wont support in your case, it can be used for convert object to xml then get back again.",functional,POS
You can think about JAXB or XStream as libraries that serialize object to XML.,functional,POS
The xstream doc has a good converter tutorial which includes details on how to register a custom converter.,documentation,POS
"Try for example Genson, it will work out of the box.",usability,POS
"See the JavaDoc for xstream.addImplicitCollection(Class, String, Class)",documentation,POS
"I have always used it to load an object into memory in a single line, but if you need to stream it and process as you go you should be able to use a HierarchicalStreamReader to iterate through the document.","usability,functional",POS
I was able to fix a similar error message by updating to xstream 1.4.4 Now it's jdk7 friendlier.,compatibility,POS
"Have a look at xstream, a simple and commonly used Java XML serialization library.","community,usability",POS
Once you deserialize using xstream it will give back the object so you don't have to do manual conversion.,functional,POS
xstream also supports serializing to json as well.,functional,POS
"Basically, I think it makes writing APIs (as opposed to just writing an application) easier, because you can infer a lot more from objects, and thereby less configuration will be necessary...I didn't appreciate the implications of annotations until I saw them being used in things like spring or xstream instead of reams of config.",usability,POS
Use ignoreUnknownElements for tags which are not implemented yet or has been removed and you are dealing with old xml.,functional,POS
XStream 1.4.5 supports dealing with tags which are not implemented.,functional,POS
"If you just want XML manipulation (i.e, adding nodes) you could try some other APIs like jdom or xstream or some such thing.",functional,POS
"According to the XStream API, the XStream object can read from any number of different inputs, including directly from a Reader.",functional,POS
"If you do not mind it, then using xstream and apache fileutils is an excellent solution and less coding.",usability,POS
"Having said that, it is still possible to keep the xstream extension in your own code, even in the future, while the API of the 3.0 version of the is compatible with the one used by your version of the xstream extension.",compatibility,POS
"In all honesty, I just remembered that XStream had the capabilities to initialize objects without calling constructors, without having the time at the moment of answering the question to dig further into it.",functional,POS
I use xstream for Java - it's very simple.,usability,POS
The xstream.fromXML() method will do the reading from the input stream for you.,functional,POS
"There is also a small javafx xstream converter collection called XStreamFX, which might holds interesting converters for you.",functional,POS
For that you'll find a tutorial here or here if you like annotations.,documentation,POS
Please find the xstream api and example here: http://x-stream.github.io/alias-tutorial.html,documentation,POS
"try xstream, it is the most programmer friendly java xml api I know of",usability,POS
"I think you can use xstream, this is a library to convert xml data to java class and other way.",functional,POS
"But as for me, most tasks can be done with XStream, which lightweight and more easy (imho)",usability,POS
"In other words, JAXB allows storing and retrieving data in memory in any XML format, without the need to implement a specific set of XML loading and saving routines for the program's class structure.",functional,POS
"JAXB provides two main features: the ability to marshal Java objects into XML and the inverse, i.e. to unmarshal XML back into Java objects.",functional,POS
"This can be aided by a number of libraries such as xstream, jaxb, castor, xmlbeans, which all provides routines to marshall an object into xml.",functional,POS
Java object serialization (using ObjectOutputStream and ObjectInputStream) and XStream can both write objects to streams that are backed by in-memory buffers; e.g. ByteArrayOutputStream.,functional,POS
See addImplicitCollection() (for example) and the XStream Annotations Tutorial.,documentation,POS
"I'm not sure, but you might wanna look at xstream (http://x-stream.github.io/) if you just try to serialize and deserialize objects to XML and back.",functional,POS
Very easy to use library to convert XML into java objects.,"usability,functional",POS
"It is pretty standard practice to store your document object fields in a normal relational way using hibernate, and use some XML marshaller to convert it to XML and back, e.g. xstream or CXF.",functional,POS
If you want the data ordered by their occurence in XML instance then you could ask xtream to map it to List implementations but I am not sure xstream guarantees this behavior.,functional,POS
You can use SequenceInputStream to concatenate virtual content to the original inputstream:,functional,POS
"JAXB is not only used to serialize to xml, it can deserialize from the xml as well.",functional,POS
"A message body writer for Java class java.util.ArrayList, and Java type java.util.ArrayList, and MIME media type application/xml was not found Problem was solved by adding XmlRootElement at the begining of the class (See jaxb documentation) (Need jaxb-impl.jar and jaxb-api.jar in server classpath)",documentation,POS
JAX-RS supports an automatic mapping from JAXB annotated class to XML and JSON.,functional,POS
"Incurring the cost of opening and closing connections can be alleviated/removed by using a connection pool like c3p0, DBCP, BoneCP (and others).",performance,POS
try c3p0 pooling....which would be easier for u.....,usability,POS
"For connection pool, there are many options available such as c3p0 & apache dbcp.",functional,POS
"Finally, to address the timeout problem and test of connection pooled, use DBCP instead of c3p0, a more robust solution",reliability,POS
c3p0 is another option which has a directly constructable datasource which has pooling built in.,functional,POS
c3p0 can test the connection in several ways:,functional,POS
A lot of monitoring information is accessible via the BoneCP connection pool class (BoneCP).,functional,POS
the simplest solution is to add c3p0.testConnectionOnCheckin to your config.,usability,POS
"As indicated in the URL referenced by Austin's comment above, you can use JMX to inspect and modify running c3p0 PooledDataSources.",functional,POS
I found certain problems in dbcp but c3p0 is working fine.,reliability,POS
"As for c3p0, I believe it provides connection monitoring via JMX, as it's discussed in the related question.",functional,POS
c3p0 ConnectionTesters should handle any Exception during a test by returning ConnectionTester.CONNECTION_IS_INVALID.,functional,POS
c3p0 has lots of means of testing Connections and preventing them from timing out or going stale.,functional,POS
Links to status code explanations are literally in the same block of code you referred to: https://github.com/wwadge/bonecp/blob/master/bonecp/src/main/java/com/jolbox/bonecp/ConnectionHandle.java#L163,documentation,POS
"Incidentally, the c3p0 project is pretty much dead in the water, I recommend you use Apache Commons DBCP instead, it's still being maintained.",community,POS
"But an easy way around this is to make use of the fact that c3p0's ""password"" property is just a configurable c3p0 property, which can be set in a wide-variety of ways.",usability,POS
"Incidentally, the c3p0 project is pretty much dead in the water, I recommend you use Apache Commons DBCP instead, it's still being maintained.",community,POS
"These libraries, of which c3p0, DBCP and BoneCP, are the most famous, allow you to create data sources with ability to pool connections and/or statements.",functional,POS
This would be pretty easy to do in c3p0 for example.,usability,POS
"For validating the group, you then just need to call Validator.validate(T Object, Class<?>... groups).",functional,POS
Hibernate has built-in support for integrating with both c3p0 and proxool as back end connection pools (Hibernate will set up and manage the c3p0/proxool pool for you and use that pool for connection management).,functional,POS
"Enhanced performance is the purpose of Connection and Statement pooling especially if you are acquiring an unpooled Connection for each client access, this is the major goal of the c3p0 library.",performance,POS
You can use the c3p0 connection pooling for hibernate.,functional,POS
"c3p0 provides connection pool for Hibernate, as The built-in Hibernate connection pool is in no way intended for production use.",functional,POS
"If you are using hibernate and you want access to the c3p0 Connection pool it is already using , one easy approach would be to use the C3P0Registry class to find the DataSource, see here and here.",usability,POS
c3p0 support this feature as documented in Configuring Connection Testing and you're actually already using one of the various options.,functional,POS
c3p0 will log a great deal at DEBUG levels.,functional,POS
"c3p0 pools Statements transparently, meaning you should use exactly the same API you would have used with no pooling.",usability,POS
"if you've enabled Statement pooling in c3p0 (as you have), then internally c3p0 will check to see whether the Statement has already been prepared, and if so it will quietly use the cached version rather than forwarding the request to the dbms.",functional,POS
Here is a simple example using c3p0 api,documentation,POS
"If some query did not return result within specified time period (as you specified for c3p0.unreturnedConnectionTimeout property in c3p0.properties file), then current session will be destroyed and new session will be pulled out from session pool, but your code is working on previous session that is already destroyed.",reliability,POS
"If you are not in a J2EE container context, use a standalone connection pool implementation, something like c3p0 (prefer c3p0 over DBCP which is considered as out of date and less robust under load) and forget JNDI (which is just the standard way to get a handle on a connection pool when you are running inside a J2EE container).",reliability,POS
"If it's about database connections handling, maybe use a connection pool like c3p0 but forget JNDI.",functional,POS
So you no need to specify the hibernate connection pool size property when you are using c3p0 connection pooling,usability,POS
(You should be able to see this if you dump stack traces or use JMX to monitor c3p0.,functional,POS
"c3p0 will recover from a database outage of arbitrary duration, as long as breakOnAcquireFailure is not set to true.",functional,POS
This means the first step would be to read the documentation for C3P0ConnectionProvider to find out how it talks to c3p0.,documentation,POS
c3p0 works fine in general with java 1.6+.,compatibility,POS
you might want to upgrade to c3p0 0.9.2.1 or the latest 0.9.5 prerelease if you haven't already (although earlier releases do work in 1.6+).,compatibility,POS
"unwrap() is a JDBC4 method, supported by c3p0 as of c3p0-0.9.5. Since you want an OracleCallableStatement, you will probably want to call the unwrap() method of a CallableStatement, rather than the unwrap() method of a Connection, as you try above.",compatibility,POS
c3p0 pools spawn their own maintenance Threads.,functional,POS
"c3p0 will maintain a pool of Connections, so all of this will be fast.",performance,POS
"2) the latest (still pre-release) version of c3p0 has some settings designed to reduce the likelihood of contamination between c3p0 Threads and objects derived from expired web-app ClassLoaders, especially if c3p0 is loaded by a non web-app specific ClassLoader (e.g. if c3p0 libs live in $CATALINA_HOME/lib rather than in a webapp lib directory).",functional,POS
"Also in my own experience c3p0 does have some nice features, like prepared statement pooling and is more configurable than DBCP, but DBCP is plainly faster in any environment I have used it in.","usability,performance",POS
"i would suggest to use something like c3p0 or BoneCP to set-up a connection pool, can be done for MySQL without too much hassle.",usability,POS
c3p0 internally maintains a separate pool for each user.,functional,POS
"I got this problem on c3p0 0.9.5-pre6 with mchange-commons-java 0.2.6.3. After downgrading to c3p0 0.9.5-pre5 and mchange-commons-java 0.2.6.2, the problem disappears.",compatibility,POS
c3p0 has two configuration parameters unreturnedConnectionTimeout and debugUnreturnedConnectionStackTraces to help you work around and (please!),functional,POS
"The dependencies that you list above look okay, hibernate-c3p0-4.3.0.Final depends on the same version of c3p0 that you have added explicitly.",compatibility,POS
"You can also check dbcp but c3p0 shows better performance, supports auto-reconnection and some other features.","performance,functional",POS
Connection pooling libraries like c3p0 have lots of configurations that allow you to tweak the behavior according to your requirements.,functional,POS
"If you choose to go with c3p0, you'll find that all configurations possible are well documented here.",documentation,POS
"c3p0 requires no special setup for long-running queries, although there are some settings (in particular unreturnedConnectionTimeout) that could interfere with long-running queries if set.",usability,POS
"if their thing happens to bring the pool to something lower than minPoolSize, then c3p0 will automatically bring the pool back to minPoolSize.",functional,POS
"I have some anecdotal evidence that c3p0 works well with Tomcat, but your mileage my vary.",compatibility,POS
"Maybe investigate a lightweight approach which a generic pooling library (maybe you find something interesting in commons-pool, or c3p0) may be easier.",usability,POS
"c3p0 implements its own PreparedStatement caching, if you enable that by setting a nonzero maxStatements or maxStatementsPerConnection.",functional,POS
c3p0 just works with Connection objects via standard JDBC.,compatibility,POS
"It could be HikariCP, we fixed some issues with connection cleanup at shutdown in 1.3.9 (released this week).",reliability,POS
You could easily handle the situation with connection pool (e.g. c3p0).,usability,POS
"I haven't tried, but if you are using one of the other Spring-Boot supported connection pools (currently HikariCP or Commons DBCP) you should be able to set the properties the same way, but you'll need to look at the project documentation to know what is available.",documentation,POS
"If you can use BoneCP, you could configure your data source to enable logging statements, and set a log4j logger for com.jolbox.bonecp to debug, and you are set.",functional,POS
"If you're using a database pool, like c3p0 or dbcp, look in its documentation, there should be settings to configure idle timeouts or periodic checking of the connection (which will keep the connection open, and not time it out on the server side)",functional,POS
"By the way, Hibernate 4.3.6 now includes it own HikariCP ConnectionProvider, so if you use that it should be in preference to the one provided by HikariCP.",functional,POS
"The connection provider expects that HikariCP properties have been set in hibernate.properties, as documented here.",usability,POS
slf4j support is a c3p0 0.9.5 feature.,functional,POS
It is very easy to dynamically create and configure c3p0 DataSources.,usability,POS
Other popular choice is tomcat pool or c3p0 which is slower but very mature and robust.,"reliability,performance",POS
Use c3p0 config params unreturnedConnectionTimeout and debugUnreturnedConnectionStackTraces to debug a Connection leak.,functional,POS
"While you are at it, you might want to try the HikariCP database connection pool instead of c3p0 (I suspect HikariCP is better at recovering from broken database connections).","functional,reliability",POS
"However, for maximum performance and responsiveness to spike demands, we recommend not setting this value and instead allowing HikariCP to act as a fixed size connection pool.",performance,POS
"c3p0 will recover in the sense that if the DBMS goes down and then comes back up again, when it comes back up, new Connections will become available for new Sessions and the app will work again.",reliability,POS
"This is a relatively slow process in Oracle, you may want to consider using a connection pool (e.g. Apache Commons DBCP, or c3p0) to improve performance.",performance,POS
c3p0 and libraries under com.mchange in general are intended to log at INFO level for normal use.,functional,POS
try to open session in View layer and and try to use HikariCP will speedup connection speed,performance,POS
"If you really want a fast system, something like c3p0 is great.",performance,POS
I was using c3p0 along with DataNucleus/JPA and it was easy to switch to BoneCP.,usability,POS
"While HikariCP is a database connection pool, you can use ConcurrentBag as is, use the HouseKeeper basically as is, slightly modify PoolBagEntry, and lift the basic gist from getConnection() and releaseConnection(), to create a generic pool.",functional,POS
"In Tomcat 7 (starting with 7.0.19 in July 2011) an additional connection pool was included in default Tomcat package (as part of tomcat-jdbc.jar) as alternative to stale apache commons implementation, called ""The Tomcat JDBC Connection Pool"":",functional,POS
"This discussion seems to discourage its use, arguing that c3p0 is more actively maintained.",community,POS
"Spring makes things look easy, but it hides the details of how/when things are constructed, destroyed, etc. I think the key question you may have to answer is why/whether Spring is creating multiple EntityManagerFactory instances (or recreating the c3p0 DataSource multiple times within a single EntityManagerFactory).",usability,POS
"c3p0 maintains a pool of Connections, which are reused for multiple clients.",functional,POS
Removed the bonecp and used hibernate 4.3.* default supported hikaricp,compatibility,POS
c3p0 includes a workaround for these fragile drivers.,functional,POS
There are initSql extension provided in c3p0 by default.,functional,POS
HikariCP will only be used to create the Datasource if there is no other provider in classpath.,functional,POS
c3p0 can detect and observe when Connections have been closed out from underneath it by the DBMS via Connection testing.,functional,POS
The whole point of a Connection pool like c3p0 is to keep Connections open so that they can be reused.,functional,POS
Note that enabling any of c3p0 properties automatically enables the corresponding connection provider by hibernate heuristics.,functional,POS
"Docs: See c3p0 docs on this issue, here and here",documentation,POS
"This will ensure that c3p0 Threads try to load classes using the same ClassLoader that loaded the library, ie the same logical CLASSPATH as the one containing c3p0.",functional,POS
"c3p0 can be configured to test the Connections that it pools in a variety of ways, to minimize the likelihood that your application will see broken or ""stale"" Connections.",functional,POS
"c3p0 provides users a great deal of flexibility in testing Connections, via the following configuration parameters:",functional,POS
The simplest way to speed up Connection testing under a JDBC 3 driver (or a pre-0.9.5 version of c3p0) is to define a test query with the preferredTestQuery parameter.,usability,POS
IMHO HikariCP is also far more predictable and simpler to use than c3p0.,usability,POS
"I'm using c3p0 , which does everything 'under the hood'.",usability,POS
"(1)if you use c3p0 ,you can specify the idle_test_period to solve this problem.",functional,POS
You should then configure a connection pooling DataSource and have a minSize equal to maxSize and equal to 8. Try HikariCP or ViburDBCP for connection pooling.,functional,POS
A better choice is to verify connections periodically using c3p0.idleConnectionTestPeriod.,functional,POS
c3p0 checks Connection isolation levels one time per Connection acquired.,functional,POS
"If your pool implements JDBC transparent Statement caching (as c3p0 does), you just use the ordinary JDBC PreparedStatement API and reuse of cached statements is handled for you.",functional,POS
"If using c3p0 then check how you can best use setting like idle_test_period, preferredTestQuery and testConnectionOnCheckout; If using dbcp then validationQuery can do the job.",functional,POS
You need to use a DataSource with connection pooling to create your connections (eg C3P0 or HikariCP).,functional,POS
"if you are using hibernate with c3p0, you can use c3p0 config connectionCustomizerClassName whitch you can set to a class doing work with connections c3p0 got.",functional,POS
"Rather than putting up with a hang, you could set the config parameter c3p0.checkoutTimeout, so that if c3p0 doesn't have a good Connection to hand you relatively quickly, it sets you free with an Exception.",reliability,POS
"You can ask c3p0 whether Connections are likely to be immediately available, via methods on c3p0's PooledDataSource interface.",functional,POS
"If you can modify the entity, you can try working with groups, but if not you can either use Validator.validateProperty to just validate the property.",functional,POS
"If it is about testing, you can use Validator.validateValue to just validate a given field.",functional,POS
See also official doc for c3p0 here.,documentation,POS
"in my experience for my specific task, running c3p0 performs faster than dbcp2 v:2.1.1 under the same environment.",performance,POS
"This page on the Hibernate wiki details how to configure the c3p0 connection pool, including the timeout settings.",documentation,POS
"Taking into account that c3p0 and similars are almost abandoned, I would use HirakiCP which is really fast and reliable.","performance,reliability",POS
"c3p0 is a Java library for JDBC drivers with JNDI-bindable DataSources, including DataSources that implement Connection and Statement Pooling, as described by the jdbc3 spec and jdbc2 std extension.",functional,POS
"From the understanding that i get , based on the HikariCP configuration you have , the PersistenceUnit will automatically be injected into your code so that the right DS provider is picked up and used during execution.",functional,POS
"Better use HikariCP since it's the fastest one, and it's also available in Hibernate 4.3.",performance,POS
"There is a ""c3p0.minPoolSize"" parameter for c3p0, but no mandatory max size, so it will grow as you need.",functional,POS
"If you are using Spring Boot 1.4, there's no need for explicit definition of data source when using HikariCP.",functional,POS
"A ""fail-over pattern"" for HikariCP is described here (only available with option allowPoolSuspension described on the configuration page):",documentation,POS
"But not all database connection pools are equal and I now prefer HikariCP because, in my experience, it handles the ""database down"" scenario more predictably.",reliability,POS
"If you want connection pooling, use a third party connection pool library like HikariCP, DBCP or c3p0.",functional,POS
DBCP2 has a DelegatingStatement.getInnermostDelegate method to get the PreparedStatement object created by the Microsoft driver.,functional,POS
"c3p0 always releases Connections with autoCommit set to true, per the JDBC spec.",functional,POS
Instead of using @Hardy mentioned solution with @GroupSequence you can validate fields manually using reflection before your Validator.validate call.,functional,POS
And c3p0 uses SHOW TRANSACTION ISOLATION LEVEL to keep the connection open (normal and expected behavior).,functional,POS
"c3p0 internally checked the Connection then, decided the Connection was broken, and emitted an event (specified by the JDBC spec, but of interest only to internal listeners) indicating a Connection error.",functional,POS
"In any case, you can always use your own explicit connection pool (I'm partial to HikariCP), so you don't need to guess and you'll know exactly what you're doing with your pool.",functional,POS
See also the initialization example on the HikariCP page.,documentation,POS
"Also, as you are using HikariCP it wouldn't be a bad idea to take a look at the HikariCP docs, in particular the idleTimeout and the minimumIdle config variables should help you.",documentation,POS
"Many high-performance libraries use this approach, for example, here is code of FastList class from HikariCP (fastest java DB connection pool):",performance,POS
This was twice as fast as c3p0 and fixed other issues I was having with DBCP.,performance,POS
"No. As @MarkRotteveel suggested in a comment to the question, we can use a c3p0 connection customizer to tweak each connection as it is acquired for the pool.",functional,POS
... then whenever c3p0 acquires a new SQLite connection for the pool it will automatically perform the ATTACH DATABASE for us.,functional,POS
If you are using maven or gradle (you should be) you can use a pool like HikariCP and create a jdbc connection pool like this.,functional,POS
"The BoneCP documentation isn't super specific about its defaults, but you can easily reverse engineer this from com.jolbox.bonecp.BoneCPConfig.","documentation,usability",POS
"Hibernates uses c3p0 to handle datasource creation and connections, you can configure using properties all the parameters, and this will handle reconnections for you keeping a conection pool ready for use.",functional,POS
I prefer using dbcp or c3p0 because they are vendor neutral.,community,POS
c3p0 was designed to be butt-simple to use.,usability,POS
Using c3p0 is a good idea in general and should also allow you to detect #1 faster.,performance,POS
c3p0 is good when we are using mutithreading projects.,performance,POS
"Some people get better performance out of c3p0, some get better out of DBCP.",performance,POS
Also I find c3p0 debug hanging connections feature extremely useful for tracking connection leaks which can be otherwise extremely hard to find.,functional,POS
Per specifications and my experience it out-performs c3p0.,performance,POS
Per specs it is also alot cleaner than dbcp or c3p0.,usability,POS
In c3p0 you can specify a number of helper threads.,functional,POS
"I think my tasks are all so short-lived that DBCP couldn't follow with closing/releasing connections, since c3p0 works more asynchronous and you can specify the number of helperthreads, it is able to release my connections in time.",functional,POS
"Why not just extend the PropertyPlaceholderConfigurer class so that i can get properties from your XML file (use commons-configuration or some other package like that), and put an instance of that in your spring config?",discarded,
Your commons-configuration jar file missed in your classpath.,discarded,
You might also take a look at apache commons-configuration project.,discarded,
In commons-configurations jar there is this class:,discarded,
The hadoop jar should upgrade there commons-configuration which is five years old right now.,discarded,
The Maven dependencies for commons-configuration v1.9 show that it depends upon commons-lang 2.6.,discarded,
"Commons-configuration 1.9 uses commons-lang 2.6, but commons-configuration 2.0-SNAPSHOT uses commons-lang3.",discarded,
"For my own use, I updated my maven dependency to use commons-configuration version 2.0-SNAPSHOT, and this seems to be fixed.",discarded,
Then I ran mvn dependency:tree and finally found out that mye commons-configuration actually was using commons-logging,discarded,
"For the configuration stored in database, I would go for another approach like commons-configuration as you pointed.",discarded,
I used 1.10 version of commons-configuration and works fine:,discarded,
"That's because, version 1.x of the artifact commons-configuration was really under the commons-configuration group.",discarded,
If we analize commons-configuration.pom we will see that commons-collection dependency is optional,discarded,
library like e.g. apache commons-configuration ( https://commons.apache.org/proper/commons-configuration/ ) within your Character-constructor.,discarded,
Example pom.xml excerpt assuming commons-configuration uses the vulnerable commons-collections,discarded,
I have used apache commons-configuration and it's worked fine:,discarded,
"That will allow you to work around expired issues, provided that the build knows it's supposed to pull your version of the artifact instead of the original commons-configuration.",discarded,
org.apache.commons.configuration.Configuration is not found in Apache commons-lang.,discarded,
"commons-configuration is the best way to go, I think.",discarded,
"There are multiple ways to read it, one being apache commons-configuration.",discarded,
"Concerning the problem at hand: you will need to add the artifact ""com.typesafe""/""config"" to your classpath (the exact version depends on which Akka version you are using, I suggest using a dependency management tool like Maven or SBT).",discarded,
It's supposed to come from here in that trace: https://github.com/typesafehub/config/blob/v1.0.2/config/src/main/java/com/typesafe/config/impl/ConfigImpl.java#L365 Which in turn comes from: https://github.com/typesafehub/config/blob/v1.0.2/config/src/main/java/com/typesafe/config/ConfigFactory.java#L380,discarded,
Line 509 on master doesn't look like it could be quite the right line: https://github.com/typesafehub/config/blob/master/config/src/main/java/com/typesafe/config/impl/Parseable.java#L509,discarded,
Version 1.0.2 line 509 looks maybe more likely: https://github.com/typesafehub/config/blob/v1.0.2/config/src/main/java/com/typesafe/config/impl/Parseable.java#L509,discarded,
Please look at the project's readme file to find more about this great configuration library https://github.com/typesafehub/config,discarded,
"Take a look at the Typesafe Config library, which is what Play Framework uses.",discarded,
"This is the exact approach I take in developing my library: Typesafe Config Guice, which binds config values from a Typesafe Config file to annotated parameters and fields.",discarded,
On com.typesafe.config.ConfigException; so you have a too new library.,discarded,
For 2nd option take a look at TypeSafe Config Lib.,discarded,
It seems that the library used by WebDriverManager for configuration (com.typesafe.config) is not able to find the properties file for some reason.,discarded,
"If you want something more enhanced, take a look at Typesafe's Config Library.",discarded,
"Configuration is a playframework Configuration, which internally uses Typesafe's Config library.",discarded,
"You can use libraries/framework like: Spring/Spring Boot, Typesafe Config etc. But... there is no problem in writing it by yourself, it's just a call to System.getProperty(), Properties.load() etc.",discarded,
Look at this piece of code from org.apache.commons.digester.parser.XercesParser,discarded,
Thus you can guess the missing library is commons-digester.,discarded,
add commons-digester.jar to your classpath and you should be through,discarded,
The commons-digester.jar needed to be in WEB-INF/lib so that it was able to find the MenuItem class since the EAR classpath doesn't have visibility to the web classpath.,discarded,
Also make sure there are no other commons-digester jars in your application lib or server commons lib folder.,discarded,
Looks like the file commons-digester.jar is missing in your classpath.,discarded,
In my pom.xml I have changed version of commons-digester to 1.8 from 2.0 and excluded log4j from the dependencies which have log4j.jar present in them.,discarded,
This use case is what e.g. commons-digester is made for: https://commons.apache.org/proper/commons-digester/guide/core.html,discarded,
seems like you did not add the apache commons-digester.jar into the classpath.,discarded,
"Back in struts 1.x when this was written, commons-digester was part of the struts package so why mention commons-digester in the struts-menu documentation?",discarded,
In MenuRepository.java there was an import of commons-digester.,discarded,
"That is now no longer the case, so one has to separately download commons-digester.",discarded,
"(In my case it is org.apache.commons.digester.Digester from commons-digester.jar, in masch's case it is org.springframework.core.io.support.PropertiesLoaderUtils from spring.jar)",discarded,
You should use 1.7 version of commons-digester library.,discarded,
"Another solution was to casll digester.setClassLoader(MyTemplate.class.getClassLoader()), but that feels like quite an ugly solution in this context.",discarded,
"I ran this in JBoss, and it turned out that commons-digester.jar was not in JBoss's lib directory, but rather in a webapp's lib directory.",discarded,
The problem is with digester1.8. Use commons-digester1.8.1.jar instead of commons-digester1.8.jar.,discarded,
"The documentation of this feature is there ¬¨¬®‚àö√º4 ""Verifying exact number of invocations / at least x / never"", and the never javadoc is here.",discarded,
This is described at https://static.javadoc.io/org.mockito/mockito-core/2.8.47/org/mockito/Mockito.html#ignore_stubs_verification although I believe that the code example there currently contains a misprint.,discarded,
Looking at the Mockito documentation here I think option 2 is the recommended way (using the mockito-core artifact).,discarded,
Note from mockito Issue 397: This problem does not appear with mockito-core.,discarded,
"Also, if JUnit 4.1.1 + Hamcrest 1.3 + Mockito 1.9.5 are being used, make sure mockito-all is not used.",discarded,
Take a look at the Mockito API docs.,discarded,
"Mockito matchers are invoked through static methods such as eq, any, gt, and startsWith on org.mockito.Matchers and org.mockito.AdditionalMatchers.",discarded,
"The Hamcrest version 1.1 Matcher has been packaged within the dependency, so we can not exclude it....",discarded,
I believe that verifyZeroInteractions might be what you're looking for.,discarded,
I solved the problem by replacing mockito-core.jar with mockito-all.jar,discarded,
"As a workaround, you should consider using mockito-core (1.8.5 if want to use the same version) and at least 4.9 version of junit (where they started to bundle hamcrest properly: as a dependency).",discarded,
You can use a Mockito Spy for this.,discarded,
"dependencies { // other dependencies will be here, just add the following line: testCompile(""org.mockito:mockito-core:1.10.19"") }",discarded,
"If you are using Maven, then it should automatically resolve the dependency when using mockito-core.",discarded,
Make sure you get the mockito-all artifact which includes all dependencies in one Jar.,discarded,
"You could still use mock(), but I prefer using annotations.",discarded,
"NOTE: The above has switched to ArgumentMatchers in newer versions of Mockito, to avoid a name collision with org.hamcrest.Matchers.",discarded,
Older versions of Mockito will need to keep using org.mockito.Matchers as above.,discarded,
"You can do it using verifyNoMoreInteractions, which verifies that the object had no more interactions.",discarded,
"Otherwise please exclude mockito-all when declaring powermock dependency, mockito-all is a dependency for non-maven users (that still use the central repository).",discarded,
Use mockito-core in your imports instead of mockito-all to exclude the matcher.,discarded,
I had fix it after exclude mockito-core artifact:,discarded,
"Based on what you've posted, I recommend using the 'Mockito.when()' method for the first method, then setting obj = null; as @Seelenvirtuose suggests.",discarded,
"Also, the docs explain this use-case (emphasis mine):",discarded,
"@InjectMocks documentation describes the behavior, which may be less documented or deterministic than you'd prefer:",discarded,
Then you can verify that some method was invoked on mock with specific parameters with mockito library: http://static.javadoc.io/org.mockito/mockito-core/2.3.0/org/mockito/Mockito.html#1,discarded,
Review the Mockito API for your use case.,discarded,
This you will achieve e.g. by using Mockito framework and its @Spy functionality.,discarded,
"You can do this using a spy, like explained here: https://static.javadoc.io/org.mockito/mockito-core/2.7.17/org/mockito/Mockito.html#13",discarded,
Here is an example from the AdditionalMatchers javadoc:,discarded,
"You need MockitoAnnotations.initMocks(this) inside your @Before method, since you are not running the test case with MockitoJUnitRunner (refer to https://static.javadoc.io/org.mockito/mockito-core/2.7.20/org/mockito/Mockito.html#mock_annotation).",discarded,
I've used on-demand injection in a few unit test cases where I wanted to inject mock dependencies in the component under test and field injection was used (that's why I try to avoid field injections :-) ) AND I preferred not to use InjectMocks for certain reasons.,discarded,
Mockito docs suggest to use the doX() family of methods.,discarded,
I just ran into the same issue with Mockito (org.mockito:mockito-core:1.10.19).,discarded,
You could use thenReturn with multiple arguments like this:,discarded,
And the home page of mockito answer http://static.javadoc.io/org.mockito/mockito-core/2.8.9/org/mockito/stubbing/Answer.html,discarded,
here is examples from mockito documentation Verifying exact number of invocations / at least x / never,discarded,
I have tried various version of mockito-core and mockito-all.,discarded,
Have a look to the documentation: Mockito,discarded,
By checking the documentation of InvocationOnMock you can check how to get the Method and the Object that is called.,discarded,
You need to import https://static.javadoc.io/org.mockito/mockito-core/2.8.47/org/mockito/ArgumentMatchers.html#anyString() for that.,discarded,
The documentation for this is here: http://static.javadoc.io/org.mockito/mockito-core/2.9.0/org/mockito/Mockito.html#4,discarded,
"The most-idiomatic way of doing this is with verifyNoMoreInteractions, as in Mockito docs #8:",discarded,
The resource https://static.javadoc.io/org.mockito/mockito-core/2.8.9/org/mockito/Mockito.html#stubbing_with_exceptions might be useful - it describes how to stub void methods call.,discarded,
"For example, if you wanted to only include mockito-core in environments with a framework ID of test, your dependencies.yml file would look like the following:",discarded,
The following code sample from this Mockito documentation illustrates how to mock a void method:,discarded,
"After adding the required jar file (mockito-all jar), create a test like this.",discarded,
You have the mockito-all.jar not the mockobjects all ver 1.9.5,discarded,
The latest non-beta version for mockito is here: http://mvnrepository.com/artifact/org.mockito/mockito-all/1.10.19,discarded,
"I have included the following two jars with maven, but you don't need to use maven: https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4/1.4.6 and https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito/1.4.9 and https://mvnrepository.com/artifact/org.mockito/mockito-all/1.10.19",discarded,
And include mockito-all 1.9.5 as a dependency:,discarded,
"I don't know powermock that well, but with easymock the way to do that is .andAnswer() instead of .andReturn on your mock.",discarded,
mupClient will return enqueueRequestCall only after you call replay method from easymock.,discarded,
(I haven't used easymock for a while so the methods might not be quite right.),discarded,
"Appending .andReturn() Tells the mock object to return whatever you put in there, in my example a long value of 1. The point of easymock is that you do not need to implement the mocked interface to test the classses that use it. By mocking you can isolate a class from the classes it depends on and only test the contained code of the class your are currently testing.",discarded,
"I believe you misunderstand how easymock is used, Calling expect tells the mock object that when you are replaying it, this call should be called.",discarded,
"If I misunderstood your question and it was really, does easymock only mock interfaces?",discarded,
"If it is absolutely crucial that the return type is long, and you want to make sure that future changes don't inadvertently change this, then you don't need easymock.",discarded,
"I don't know about easymock, but the book 'Unit Testing in Java: How Tests Drive the Code' by Johannes Link contained explanations of how to test Servlets using a library he'd build of dummy objects.",discarded,
"The problem has more to do with easymock and the types returned/expected by the expect and andReturn methods, which I'm not familiar with.",discarded,
The error indicates that the easymock has come across a method call getMethod() in a mocked object . Debug the program line by line and add a expect call for the mocked object.,discarded,
Try not to import static powermock and static easymock (I've found that I often confuse myself and forget which one I need to call replay on).,discarded,
"meant ""you are mixing easymock and mockito in the same unit test, so accidentally calling easymock's notNull() method for a mockito argument.",discarded,
"<tstamp> and <replaceregexp> are used to update the version in the manifest, you can remove them. Jar tag will create the .jar file, we specified what files to add in the jar that will be avaible to my classes inside.",discarded,
Here you must specify your external dependencies (something like easymock or powermock if you want to create a test target.,discarded,
"Unit test: For mock, I would prefer Mockito to jmock or easymock.",discarded,
"To expect on void methods in easymock, you don't need to use the expect method.",discarded,
You can just do it using easymock.,discarded,
Here is a blog illustrating a possible mechanism: http://blog.nutpan.com/2012/03/mock-testing-for-java-mail.html?m=1 You can also consider using a mocking framework like easymock or mockito to test it.,discarded,
"Typically you would only do this if you are using a lot of static methods from a particular class, like I use it all the time for junit asserts, and easymock.",discarded,
Note I'm not using easymock (I use mockito instead),discarded,
You can use a mocking framework like easymock or mokito.,discarded,
Would suggest using framework like easymock see see How do I Unit Test HTTPServlet?,discarded,
I yesterday found I could solve this with Mockito (I didn't try powermock or easymock).,discarded,
"Note : I am using easymock version 3.1 Regards, MB",discarded,
"If you dont use guice, have a look at needle4j.",discarded,
Now while passing to easymock use method eqCriterion at line,discarded,
"As Rog‚Äö√†√∂¬¨¬©rio commented, you can use EasyMock#createNiceMock:",discarded,
Mockito is still for me the best mock-utility (see http://site.mockito.org/).,discarded,
Approach 2: Use PowerMock on top of easymock.,discarded,
import org.easymock.Mock should be replaced by import org.mockito.Mock;,discarded,
"Use Mockito instead of easymock, Mockito is comparatively new.",discarded,
I used import static org.easymock.classextension.EasyMock.*; instead of import static org.easymock.EasyMock.*;,discarded,
"However, I'd suggest you look at some of the mocking frameworks such as easymock and mockito.",discarded,
I would advice you to try partial mocking with easymock (you just replace single method or methods in an object).,discarded,
"The latest easymock I can see in the ibiblio mirrors is rev 2.0. That would mean, that 2.5 is not found and an older Version is used.",discarded,
I‚Äö√Ñ√∂‚àö√ë‚àö¬•ve never worked with mockito or easymock but I don‚Äö√Ñ√∂‚àö√ë‚àö¬•t think the call does what you think it does.,discarded,
"In the case of EasyMock, it uses Proxy (for interfaces, anyway), as you can see in the source code: look at org.easymock.internal.JavaProxyFactory.",discarded,
I prefer mockito which uses a different paradigm for mocking out classes.,discarded,
You don't have to subclass everything like you do with easymock.,discarded,
have you tried easymock or mockito ?,discarded,
"Easymock extension 3.1 depends upon easymock 3.1, the dependencies are:",discarded,
"The problem here is that FacesContext and ExternalContext both are abstract classes instead of interfaces, which causes easymock to fail to mock these.",discarded,
My problem was that I included powermock-module-junit4 but included my test annotation from TestNG instead of Junit.,discarded,
See the PowerMockito when docs as an example.,discarded,
You will need to add powermock-api-mockito and powermock-module-junit4 to your dependcies.,discarded,
"If you're using Mockito 1.10.8 - 1.10.x, the you should use module powermock-api-mockito 1.6.2. If you want use Mockito 2 (looks like you use it), then you should use module powermock-api-mockito2.",discarded,
"I'm not certain, but my best guess is that validation-api is not actually an implementation of validation, so you still need to include one such as Hibernate Validator.",discarded,
Make sure you have the validation-api.jar referenced in your project.,discarded,
"After extracting the zip, you can find the validation-api.jar in the /lib/required folder.",discarded,
It contains the Bean Validation API including the bootstrapping classes (javax.validation.Validation).,discarded,
The jar containing this class must be added to the build path of your project: http://mvnrepository.com/artifact/javax.validation/validation-api/1.0.0.GA,discarded,
Hibernate searches for the javax.validation.Validation class in the classpath.,discarded,
You need to have the validation-api (there's a download JAR link you can use as you don't use maven) in your classpath.,discarded,
"Turns out I had to declare the validation-api test dependency before the javaee-api, otherwise Maven would try to use it for tests, wich is not possible.",discarded,
The class javax.validation.executable.ExecutableValidator can be found in the following artifact: javax.validation:validation-api:1.1.0.Final,discarded,
You need to add the validation-api jar to your classpath.,discarded,
Then I managed to get more verbose errors than this [ERROR] Unexpected error while processing XML when I added validation-api package (ivy.xml):,discarded,
"You can use validation-api jar , after including the jar just import :",discarded,
You also need to add javax.validation:validation-api to your classpath.,discarded,
"does not contain validation-api in it's dependencies, it was added in 1.3.0-RC2 but neither 1.3.0-RC2 nor 1.3.0-RC3 were deployed to Maven central.",discarded,
"You can use validation-api and hibernate-validator and hangs required annotations to your class fields such as @Size, @NotNull and others.",discarded,
You have the necessary jar file you need in hibernate-validator.,discarded,
Removing this jar javax.validation:validation-api:1.1.0.Final solved my problem.,discarded,
"In this situation, if you want to use something specific from the Hibernate Validator (that is, something from the org.hibernate.validator package or sub-packages), you need to add the hibernate-validator dependency with the provided scope.",discarded,
"If gwt-user must be in provided scope, I would suggest to adopt a finer governance and exclude validation-api directly from gwt-user.",discarded,
"Moreover, the dependency management for validation-api has been defined for default (compile) scope, impacting how Maven is bringing it in via gwt-user (listed above, as compile, even though gwt-user is provided and all of its transitive dependencies would also be on provided, unless defined differently by dependencies management, like in this case).",discarded,
Error creating bean with name 'org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean#0': Invocation of init method failed; nested exception is java.lang.AbstractMethodError: org.hibernate.validator.engine.ConfigurationImpl.getDefaultParameterNameProvider()Ljavax/validation/ParameterNameProvider;,discarded,
"This transitively pulls in the dependency to the Bean Validation API (javax.validation:validation-api:{bv_api}).""",discarded,
"The solution was to remove validation-api-1.0.0.GA.jar from the target EAR file by adding the following dependency, which sets validation-api to ""provided"":",discarded,
They have made the validation annotations their own library called validation-api.,discarded,
"Note that javaee.api provides this dependency by default, so you may need to include required dependencies manually in <dependency> block.",discarded,
"Because, the javax.validation.spi.ConfigurationState interface of 1.1.0.Final has getParameterNameProvider method, which was absent in 1.0.0.GA.",discarded,
"For me, the 1.1.0.Final version javax.validation.validation-api had worked.",discarded,
"Of course they do, because default value for min is 0 in interface javax.validation.constraints.Size",discarded,
Make sure that the validation-api version you use matches what is required by the hibernate-validator.,discarded,
You should see a dependency named something like hibernate-validator.jar,discarded,
"To make @Valid work you should include two packages javax validation-api and hibernate-validator, but I only included validation-api.",discarded,
"You seems to be missing a dependency ""javax.validation:validation-api"".",discarded,
I got that weblogic has a weblogic.server.merged.jar which is inside weblogic/12c/wlserver/modules/features and It has javax.validation and hibernate.validator packages and causing the mess.,discarded,
I just updated these packages here manually by latest validation-api.jar and hibernate-validator-5.2.2.jar.,discarded,
Of course in build phase you need to add either some corresponding validation-api or use the WebSphere implementation as dependency and with <scope>provided</scope> if deployed to container having impl already.,discarded,
"For validation to actually work, you need an implementation as well, such as Hibernate Validator.",discarded,
sorry I don't see that you don't use validation-api.,discarded,
"one is to remove hibernate-validator jar in your runtime deployment, this may force the validator to use the one provided by IBM,",discarded,
"BTW, Hibernate (since 4.0.0) and hibernate-validator (since 4.3.) use jboss-logging instead of log4j.",discarded,
I have no idea why hibernate-validator would not work here.,discarded,
i solved this issue in maven config by specifying another dependency to hibernate-validator one with sources and one without.,discarded,
"To get validation working, make sure you have a recent version of hibernate-validator in your classpath.",discarded,
It seems to be coming out of hibernate-validator.,discarded,
Most of the work for object's validation performed by JSR-303 provider (hibernate-validator in most cases).,discarded,
"hibernate-validator is just an implementation of java-bean-validation (javax.validation, JSR-303).",discarded,
The rest do wicket and hibernate-validator for you ...,discarded,
Can you try newer version of hibernate-validator?,discarded,
Hibernate is seeing this first and not using the hibernate-validator library for validation.,discarded,
You need to add the hibernate-validator to your project.,discarded,
It helped to use hibernate-validator 4.3.1.Final instead of 5.0.1.Final.,discarded,
But then it doesn't find the hibernate-validator jar anymore:,discarded,
This is strange since in the logs I can see that hibernate-validator is being loaded.,discarded,
If you don't have a JSR-303 provider (hibernate-validator for instance) on your classpath create a Validator and use this to validate your object.,discarded,
"Since you have the hibernate-validator dependency set, you will have to run",discarded,
(e.g. indeed by adding hibernate-validator to your pom.xml),discarded,
"You can still use the latest hibernate-validator jar,but as pointed out you need to upgrade to tomcat 7 or have the latest EL 2.2 jars in tomcat lib.",discarded,
Add hibernate-validator dependency which has implementation of JSR 303 (bean validation).,discarded,
"If you elect to use it, place the hibernate-validator JAR on your classpath.",discarded,
"hibernate MAY check this before persisting your entity into the database, if hibernate-validator integration is enabled in your setup, but may also completely ignore it.",discarded,
"This is diffucult to answer but when you have this question often times a migration guide gives you the best answer, here is the hibernate-validator migration guide.",discarded,
Try adding hibernate-validator as a dependency in your pom.xml:,discarded,
I got the same problem with hibernate-validator 5.1.3.Final on jboss-eap-6.0.0.,discarded,
"The reason was that the application needed the hibernate-validator.jar in WEB-INF/lib folder, so that it could use it for validation.",discarded,
"What I had done was created a library via the ""buildpath"" menu and added the hibernate-validator.jar to my library.",discarded,
"First make sure that you have the validation provider such as hibernate-validator on your classpath, second make sure that you have",discarded,
To avoid it use the hibernate-validator dependency version 4.2.1.FINAL with javax.validation version 1.1.0.FINAL.,discarded,
This is actually a question regarding the ordering of Bean Validation constraints since JAX-RS relies on the Bean Validation spec and Jersey relies on the implementation provided by hibernate-validator.,discarded,
It's not yet in the bean-validation standard (surely in next version) but already available in hibernate-validator 5.2.1. Blog entry here for further information.,discarded,
It was throwing the exception because I did not have the hibernate-validator (or any Validator interface for that matter) on my classpath.,discarded,
If you're using maven and want to use hibernate-validator you would simply add a dependency in your pom.xml file like this:,discarded,
"Check the Maven Repository, for example, and you'll realize the hibernate-validator artifact does include the validation-api artifact as a dependency.",discarded,
"Otherwise, if you won't use anything specific from the Hibernate Validator, the javaee-api dependency should be just fine.",discarded,
"You don't need to remove logback-classic.jar, Instead the root cause seems to be the missing definition for org.hibernate.validator.internal.engine.ConfigurationImpl As per Google, you need to include http://mvnrepository.com/artifact/org.hibernate/hibernate-validator If its a maven project then the below config in your pom dependencies shall make things work smooth for you",discarded,
Try to use Maven or Gradle build to get valid dependences.,discarded,
"I can not explain it, but it helped me. Maybe you should try with lower hibernate-validator version.",discarded,
What worked for me was to upgrade to hibernate-validator 5.0.0 and validator-api-1.1.0.Final.,discarded,
"Hibernate owns an implementation of JSR-303, called the hibernate-validator.",discarded,
"When you add hibernate-validatorto pom.xml, maven might automatically add its dependent jar validation-api 1.1.0.Final.",discarded,
Updated hibernate-validator library to the latest version,discarded,
"In your question, the hibernate-validator jar will depend on other jars such as hibernate-jpa, validation-api, joda-time...",discarded,
It means you can not run your project with only hibernate-validator jar file.,discarded,
"If you have enabled the auto-configuration and also have hibernate-validator dependency on the classpath, everything should work out of the box.",discarded,
<dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-validator</artifactId> <version>4.1.0.Final</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> </exclusion> </exclusions> </dependency>,discarded,
<dependency> <groupId>org.apache.cxf</groupId> <artifactId>cxf-rt-transports-http</artifactId> <version>${cxf.version}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> </exclusion> </exclusions> </dependency>,discarded,
<dependency> <groupId>org.quartz-scheduler</groupId> <artifactId>quartz</artifactId> <version>${quartz.version}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> </exclusion> </exclusions> </dependency>,discarded,
I added hibernate-validator as a dependency in pom.xml and it worked,discarded,
For using @Email annotation please include hibernate-validator dependency in your pom.xml file.,discarded,
When you are using only @Email the IDE will not be able to think that whether this is hibernate-validator or your class name.,discarded,
"Disable java2ParentDelegation (your second jboss-web.xml), bundle your Hibernate JARs into your app and override the hibernate-validator JARs in common/lib.",discarded,
I'm not able to explain why the hibernate-validator from commons/lib still gets picked.,discarded,
"When using hibernate-validator in conjunction with hibernate-core, you get bean validation automatically for free because Hibernate will plug into the validator framework and perform validate operations for the following events",discarded,
"The artifact org.hibernate:hibernate-validator:5.2.4.Final exists in Maven Central, as evidenced by the fact that Maven tries to download it.",discarded,
But I have not yet figured out why only including the hibernate-validator in the POM would not work.,discarded,
"Oh I forgot to mention, make sure to leave the hibernate-validator artificact in your POM.",discarded,
"The @NotEmpty annotation comes from a separate jar (validation-api.jar), so it's possible that, while your code compiles, validation is not being enforced at runtime.",discarded,
"I'd suggest Bean Validation, of which hibernate-validator is the reference implementation.",discarded,
After I embedded the hibernate-validator my tests also failed too.,discarded,
"IF you have seen my tests on github, you maybe found that I used a @Length which is a nullable constraint, then the hibernate-validator doesn't change the original column definition at all, for example:",discarded,
Why did the nullable column is changed to non-nullable column by hibernate-validator?,discarded,
"the hibernate-validator will makes the column to non-nullable column, if you declared any non-nullable constraints on the column, for example:",discarded,
If you use hibernate-validator you have to remove the javax.validation dependency.,discarded,
"Deleteing .idea , clearing cache and new configuration did the job for me. It seems that somehow it didn't saw hibernate-validator.jar.",discarded,
"I wrongly supposed the hibernate-validator was mandatory only if I was usig validation annotations on the beans properties (like @NotNull, @Pattern, etc..)",discarded,
"Only remove, following set of jar files from common/lib 1. hibernate-annotations.jar 2. hibernate-commons-annotations.jar 3. hibernate-entitymanager.jar 4. hibernate-validator.jar",documentation,
"However, on my classpath there are a few more implementations of ParameterizedType - from hibernate-validator, from aspectj, hibernate-annotations, jaxb.",discarded,
The @UniqueConstraint is not related to hibernate-validator.,discarded,
You would need hibernate-validator (or another JSR-303 provider) for the above to work.,discarded,
Just make sure that your application is shipped with correct version of hibernate-validator.jar file.,discarded,
Try the apache commons LuhnCheckDigit() utility method of the Apache commons-validator library.,discarded,
"Other validators are available in the commons-validator package, or you could use Struts2 validators that is out of this question.",discarded,
"Btw, some of commons-validator dependencies are already bundle, so don't make sense to embed then in your bundle.",discarded,
"The only thing I could not understand, was that the 2.3.20 release, downgrades some jar files, like commons-validator to 1.3.1 (from 1.4.0) and common-collections to 1.3.1 (from 3.2.1).",discarded,
"For example, if the Grab looks like this: @Grab('commons-validator:commons-validator:1.4.1')",discarded,
"1 Fully qualified class name is org.apache.commons.validator.routines.UrlValidator, not to be confused with the deprecated implementation org.apache.commons.validator.UrlValidator",discarded,
Either you should try updating structs version or you should rollback to earlier commons-validator version.,discarded,
"The commons-validator dependency contains two versions of ArrayStack, because of a transitive dependency it has on commons-collections.",discarded,
"You have to add commons-validator-1.5.0.jar, jena-core-2.11.2.jar, jena-iri-1.0.2.jar at least.",discarded,
"You can use commons-validator , Specifically EmailValidator.isValid()",discarded,
For example you can use UrlValidator from commons-validator.,discarded,
Look at this link : http://www.findjar.com/jar/org/apache/geronimo/specs/geronimo-validation_1.0_spec/1.0-CR5/geronimo-validation_1.0_spec-1.0-CR5.jar.html Here is maven part to add it : http://mvnrepository.com/artifact/org.apache.geronimo.specs/geronimo-validation_1.0_spec/1.0-CR5,discarded,
"Try the library ""Apache Geronimo JSR-303 Bean Validation Spec API"", the jar is ""geronimo-validation_1.0_spec-1.0-CR5.jar"".",discarded,
Option 2: Find some other JSR 303 implementation - org.apache.bval:bval-jsr303 or anything else.,discarded,
Remove xercesImpl.jar jaxb-api.jar and other from your classpath.,discarded,
Most likely you do not have xercesImpl.jar in the client project's classpath,discarded,
Your client's project would appear to contain a copy of the standalone apache distribution (probably xercesImpl.jar).,discarded,
"Frankly, pretty much everything that we've encountered works just fine w/ the JAXP version, so we always exclude xml-apis and xercesImpl.",discarded,
To exclude the xalan and xercesImpl dependencies in Maven:,discarded,
It is because you don't have xercesImpl.jar in the class path.,discarded,
Added xercesImpl 2.9.1 to my classpath instead of using the internal Java 6 bundled version of Xerces.,discarded,
This is because org.apache.xerces.dom.CoreDOMImplementationImpl.createLSSerializer is using org.apache.xml.serializer.dom3.LSSerializerImpl when it is available instead of org.apache.xerces.dom.DOMSerializerImpl.,discarded,
"It turns out that I had the apache-tomcat-5.5.23-compat files installed, as I was migrating from Java 1.4.2. The solution was to remove everything under the $CATALINA_HOME/common/endorsed directory (in particular xercesImpl.jar and xml-apis.jar) and the bin/jmx.jar files.",discarded,
remove any xercesImpl or xml-apis jars from your app.,discarded,
"I could get rid of this by removing the xercesImpl.jar and xml-api.jar from the Ant installation that I used, not sure if you are facing the exact same problem or if there are multiple things that cause the exception to appear.",discarded,
Find out which one of your dependencies has a dependency on xercesImpl.jar and add an exclusion to the given dependency in your POM like so:,discarded,
"If you are using m2eclipse, you can find which dependency imports xercesImpl.jar on the Dependency Hierarchy tab of the POM editor.",discarded,
Check if you have xercesImpl.jar in your classpath,discarded,
Adding xercesImpl.jar (can be found in Xerces2 Java archive on http://xerces.apache.org/mirrors.cgi#binary) to my libs has solved it.,discarded,
"The jar file xercesImpl.jar also must exist in a folder lib next to odfxsltrunner.jar file, or it must be in the classpath.",discarded,
"Also for these examples, we have copied the xml-apis.jar and xercesImpl.jar files into the AXIS_LIB directory.",discarded,
This guide adds xml-apis.jar and xercesImpl.jar to the AXISCLASSPATH so that Axis can find the parser (see below).,discarded,
copying xml-apis.jar and xercesImpl.jar to <jdk-home>/jre/lib/endorsed and creating a jaxp.properties file in <jdk-home>/jre containing the line,discarded,
"xerces.jar is a Jar file that contains all the parser class files (i.e., it contains the intersection of the contents of xercesImpl.jar and xml-apis.jar).",discarded,
An alternate Stax parser is an option as well,discarded,
Switching from com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl to org.apache.xerces.jaxp.SAXParserImpl with JRE 1.7+ should only require adding a new xercesImpl.jar + xml-apis.jar from the latest xerces-j to the class path.,discarded,
If you take a look at xercesImpl it contains a dependency to xml-apis:xml-apis:jar:1.4.01:compile with the scope compile so the display of dependency plugin is correct.,discarded,
That suggests the Xerces jars (xercesImpl -- also needs xml-apis) are not on the runtime class path.,discarded,
In my case I resolved this issue by adding to bootstrap entities (Classpath tab in run configuration) two entries /xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar and /xerces/xercesImpl/2.11.0/xercesImpl-2.11.0.jar from my local maven repository,discarded,
"My solution: call saxon directly as: "" XPathFactory _xFactory = new net.sf.saxon.xpath.XPathFactoryImpl();"" and add jaxen-xxx.jar and xercesImpl.jar before saxon9e.jar on the classpath.",discarded,
"as you can see classpath refers to xercesImpl.jar, unfortunately your build is creating xercesImpl-2.11.0.jar, so it just cannot be resolved.",discarded,
However this is only a warning and application should run fine if the xercesImpl classes are available in the classpath.,discarded,
"I currently can't reproduce the issue with a simple project, did you make sure that you don't have any other dependencies which are importing another version of xercesImpl?",discarded,
"I had faced similar issue, this issue occurs when there is big difference in versions of xerces jar and xercesImpl jar.",discarded,
"If I'm not mistaken, Spring's dependencies contain xercesImpl dependency, but neither dependency with artifactId xmlParserAPIs nor xerces.",discarded,
xercesImpl.jar (version 2.11) - I can see latest in SP5 now,discarded,
"Just out of curiosity, I added xercesImpl to the applet archive on the webserver that was screwing up, and things work peachy king.",discarded,
Adding xercesImpl to my pom fixed the problem.,discarded,
org.apache.batik.transcoder.TranscoderException: null Enclosed Exception: SAX2 driver class org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser not found.,discarded,
What I needed to do was to remove these files from the xercesImpl.jar file:,discarded,
"NOte that the outdated xercesImpl.jar was included in one of our war files deployed as a library, NOT anything shipped by Oracle as part of WebLogic 12",discarded,
"To use XSLTC, put xalan.jar(2.5), serializer.jar, xml-apis.jar, and xercesImpl.jar on your classpath .",discarded,
This is due to multiple xercesImpl.jar in class path.,discarded,
(You'll need the xercesImpl.jar on your library path.),discarded,
"See http://code.google.com/p/googleappengine/issues/detail?id=1367 Many people copy more than xercesImpl or libraries that contain xerces (e.g. some distributions of xalan), however xercesImpl is all you need.",discarded,
The org.w3c.dom.ElementTraversal is part of xml-apis which is a dependency of xerces:xercesImpl.,discarded,
The xerces:xercesImpl is in turn a dependency of htmlunit.,discarded,
I discovered the library excel-streaming-reader had a dependency on xercesImpl 2.4.0 (from 2006).,discarded,
"The depenencies pulling in xercesImpl will be sown in the ""Dependency Hierarchy"" pane to the left",discarded,
"Apparently xerces:xml-apis:1.4.01 is no longer in maven central, which is however what xerces:xercesImpl:2.11.0 references.",discarded,
Try using xercesImpl jar wothversion 2.11.0. you can find maven details as below :,discarded,
Dont forget including xercesImpl.jar and xml-apis.jar in your classpath.,discarded,
"So, UnsupportedOperationException is mostly related to xerces.jar and xercesImpl.jar",discarded,
"Because I had a downstream dependency that was including xercesImpl.jar in my war file, my solution was to just yank it using the code below in my build.gradle and let the JRE implementation of xerces take over in the class path.",discarded,
"I have created valid empty JAR files with no classes in them and called them the names of the entries in the Class-Path, e.g xercesImpl.jar . I'm going to put them into src/main/webapp so they will be included in the right spot.",discarded,
The solution is to search for all dependencies on Xalan and xercesImpl in the classpath . These dependencies should be excluded.,discarded,
"An example of such a link in there is http://mvnrepository.com/artifact/xerces/xercesImpl/2.9.1, which shows you a list of some of the other artifacts that depend on xerces.",discarded,
But the version of embedded xerces classes does not match the one requiered by NeokHTML.,discarded,
"This jar packages a lot of external librairies, like the xercesImpl.",discarded,
"Also make sure you don't have multiples as the xercesImpl.jar, xml-apis.jar and xalan.jar need to be in sync.",discarded,
"Check for jars like xercesImpl, xml/xml-api and sax.",discarded,
"As stated here http://xerces.apache.org/xerces2-j/install.html the old xerces.jar contained all classes in one jar, but new distribution of xerces divides it in xercesImpl.jar and xml-apis.jar",discarded,
"Having xercesImpl.jar already, the xml-apis.jar is needed",discarded,
To use another XML parser just remove xercesImpl.jar and add another implementation library.,discarded,
You can download it from maven repository xercesImpl.jar,discarded,
May I ask you why you need or want to remove xercesImpl.jar from your classpath?,discarded,
"use dom4j, here is quick start for dom4j",discarded,
"Then you have your image data as a string in imgBase64, you just have to append a node to your xml using the DOM implementation you want, for example dom4j.",discarded,
I suggest you dump dom4j and use JAXB or StAX.,discarded,
Just jaxen1.1.3 is sufficient and dom4j not required,discarded,
I've had to do very similar things (albeit many years ago) and dom4j was my tool of choice.,discarded,
seems some jar missing..dom4j-1.5.2.jar as u get Caused by: java.lang.ClassNotFoundException: org.dom4j.DocumentException,discarded,
"If not, you might be better off with another xml parser, for example dom4j.",discarded,
"I can recommend dom4j, I've used it in the past and it works fine.",discarded,
"It means exactly what it says, it couldn't find the class org.dom4j.DocumentException.",discarded,
But if you use that method it renders your doc unreadable when written back to disk.,discarded,
you may choose the possibility of using dom4j.,discarded,
Use this code with dom4j xml parser to parse xml return.,discarded,
Generally u can probably use any DOM or SAX parser.,discarded,
"There actually already a DOM API in the Standard Library (the org.w3c.dom packages), but it's only the API, so you need a separate implementation - might as well use something a little more advanced like dom4j.",discarded,
"If you want to use .xml file for this, you should take a look at dom4j or any other library to parse your XML.",discarded,
The exception stack trace shows org.dom4j.DocumentException: Error on line 2 of document,discarded,
It brings in the old dom4j jar: Reference this ticket: org.dom4j.DocumentFactory cannot be cast to org.dom4j.DocumentFactory.,discarded,
Other quick options are JDOM (using Format.getCompactFormat()) and dom4j (using OutputFormat.createCompactFormat()) when outputting the XML document.,discarded,
If you know you are interested in child elements you can as well access node.elements() (http://dom4j.sourceforge.net/dom4j-1.6.1/apidocs/org/dom4j/Element.html#elements()) if you cast to an Element node first..,discarded,
"Use a relative path * and call the selectNodes method on the node variable e.g. node.selectNodes(""*"") (http://dom4j.sourceforge.net/dom4j-1.6.1/apidocs/org/dom4j/Node.html#selectNodes(java.lang.String)).",discarded,
"If not then you could use one of the many XML libraries around, such as dom4j.",discarded,
"To use DOMElement, you need to specify org.dom4j.dom.DOMDocumentFactory for creating SAXReader.",discarded,
The actual problem is you're getting two different org.dom4j.DocumentFactory on your class path.,discarded,
The error message is quite clear: Caused by: java.lang.ClassNotFoundException: org.dom4j.DocumentException,discarded,
I suggest you use class org.dom4j.xpath.DefaultXPath instead of calling valueOf.,discarded,
"EDIT #2: Using dom4j, this is how you would do it: (from their cookbook)",discarded,
using dom4j to parse the xml document,discarded,
Otherwise there is an ambiguity as Document could refer to either org.dom4j.Document or com.itextpdf.text.Document and Element could refer to org.dom4j.Element or com.itextpdf.text.Element.,discarded,
Your problem not with Sessionfactory . It is java.lang.NoClassDefFoundError: org/dom4j/DocumentException make sure you have dom4j.jar in your classpath.,discarded,
The problem indeed in dom4j source code.,discarded,
To fix it you need correct following method in \dom4j-1.6.1\src\java\org\dom4j\tree\NamespaceStack.java:,discarded,
"Make sure your Element is of type org.dom4j.Element and not org.w3c.dom, javax.bind.xml, etc.",discarded,
To create an org.dom4j.Document from the org.w3c.dom.Document,discarded,
"In addition, dom4j provides the org.dom4j.io.DOMWriter class to do the opposite of org.dom4j.io.DOMReader.",discarded,
"Well, I think the Element object contains all the informations that you need to search manually through the dom4j tree.",discarded,
What you need isn't provided by dom4j out of the box.,discarded,
Why are you using both org.dom4j.Document and org.w3c.dom.Document?,discarded,
I found a way to do this using dom4j.,discarded,
try to use dom4j library and it's saxReader.,discarded,
"Assume that document is and instance of org.dom4j.Document, then",discarded,
I do however not know how robust dom4j and jdom are.,discarded,
org.w3c.dom.Document is standard API on Java SE while org.dom4j.Document is for Dom4J.,discarded,
"As it turned out, one of my dependencies (com.sun.jersey:jersey-json) pulled in com.sun.xml.bind:jaxb-impl, which was responsible for the System Classloader -> Application Classloader reference.",discarded,
This was fixed by going to http://jaxb.java.net/ and getting a new jaxb-impl.jar & jaxb-xjc.jar.,discarded,
Just add jaxb 2.2 implementation (e.g. jaxb-impl.2.2.5) to the compiler's classpath,discarded,
"By adding an explicit jaxb-impl dependency w/ version, it worked, such as:",discarded,
"It's fixed for versions 2.2.4u2, 2.2.5, 2.3",discarded,
Also note that you can get into trouble if you attempt to use a newer version of jaxb without also including a compatible version of jaxws.,discarded,
Even the latest release of Java still ships with old version 1 jaxb and jaxws apis).,discarded,
"It is a mistake to copy the implementation jars (e.g. jaxb-impl.jar) into endorsed lib, these should simply be on your classpath.",discarded,
That class does not seem to be present in jaxb-impl.jar:,discarded,
"For example, I think that jaxb is already part of jaxws-rt.jar which would mean you don't need jaxb-core.jar and jaxb-impl.jar.",discarded,
"The jaxb-impl manifest declares (in addition to its own version) the specification-version, which is the version of jaxb-api jar that it requires.",discarded,
What has likely happened is that the jaxb-api jar you put in the endorsed directory is a different version of jaxb from the jaxb-impl jar within JBoss.,discarded,
"Needs import jaxb-impl for compilation / and may be required for excution, e.g.",discarded,
"As temporary workaround, you can download the latest 2.1 version of JAXB from http://jaxb.java.net/2.1.13/JAXB2_20100510.jar and copy the extracted jaxb-impl.jar into conf/lib.",discarded,
"Try to include a reference implementation for the jaxb-impl, at least it solved the problem for this guy with the same error",discarded,
I would advice you to set up FINE logging to jaxb-impl and trying to set up the,discarded,
Make sure to include the jaxb-impl.jar library in your project.,discarded,
You can download one for example from here: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.2.4/jaxb-impl-2.2.4.jar,discarded,
"jaxb-impl.jar, jaxws-api.jar, jaxws-rt.jar, gmbal-api-only.jar, management-api.jar, stax-ex.jar, streambuffer.jar, policy.jar.",discarded,
You miss the jaxb-impl.jar in your classpath.,discarded,
"This should automatically add jaxb-api.jar, activation.jar, jsr173_1.0_api.jar, and jaxb1-impl.jar in addition to jaxb-impl.jar.",discarded,
You need to add jaxb-impl.jar to your Java Build Path.,discarded,
I'm using Java 6.0 as build and runtime environment and my project setup having jaxb-api.jar and jaxb-impl.jar.,discarded,
Looks like the jaxb-impl.jar is missing in your classpath.,discarded,
Even copying jaxb-impl.jar of version 2.1 to apache-james-3.0-beta4/conf/lib did not help as it was never picked up in classpath.,discarded,
I have resolved this issue by fixing the jaxb-impl version from 2.1.9 to 2.2.6 and it works fine now,discarded,
"Exclude slf4j and jaxb-impl, in all your Camel dependencies.",discarded,
So you need to include the jaxb-core or jaxb-impl jar file in your project's pom.xml,discarded,
"jaxb-api.jar, jaxb-core.jar, jaxb-impl.jar are required at runtime.",discarded,
"jaxb-api.jar, jaxb-core.jar, jaxb-impl.jar, jaxb-xjc.jar are required at compile time.",discarded,
Because Java 7 comes with own JAXB implementation (JAXB RI by the fact) we don't need com.sun.xml.bind:jaxb-impl package.,discarded,
Supplied solution say that com.sun.jersey:jersey-json package request JAXB API implementation from com.sun.xml.bind:jaxb-impl package::,discarded,
Look which Version of jaxb-xjc.jar and jaxb-impl you have in your classpath,discarded,
"In my case, I simply excluded the jaxb-impl that came with camel-jaxb and the application started working correctly.",discarded,
You are using older jaxb-impl dependecy in pom.xml.,discarded,
"A (custom) NamespacePrefixMapper on the other hand, would purge all of these annotation based limitations/problems and enable much better handling of (runtime/spring) properties.",discarded,
I removed the dependency on separate jaxb-impl jar from the build.sbt.,discarded,
"1) There was an issue like java.lang.SecurityException: sealing violation: can't seal package com.sun.xml.bind: already loaded , but related jar jaxb-impl.jar was not found.",discarded,
2) We took this jaxb-impl.jar and added in classpath and the flow as successful.,discarded,
"There are two jaxb related dependencies that looked correct, jaxb-api and jaxb-impl.",discarded,
you need to add jaxb-impl and jaxb-core into your pom.xml.,discarded,
For using the jaxb-api would suggest you follow this answer to make sure that your module uses the javax.xml.bind:jaxb-api:2.3.0 instead of com/sun/xml/bind/jaxb-impl/2.0/jaxb-impl-2.0.jar as seen in your logs.,discarded,
"This example uses JAXB, so you'd need jaxb-api and jaxb-impl on the classpath.",discarded,
ConfigurationException: Could not locate cfg.xml resource [hibernate.cfg.xml] in project root folder,discarded,
Most recent version taken from here: https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl,discarded,
"I am not sure if this is the only reason why this could happen, but this is one problem I faced and solved like this, check your Java endorsed dir and removed any duplicate jaxb-impl.jar.",discarded,
"You didn't specified what JAXB-IMPL version are you using, but once I had the same problem (with jaxb-impl 2.0.5) and solved it using the annotation at the getter level instead of using it at the member level.",discarded,
Please search for all the places where you have the jaxb jars in the system (at least jaxb-api and jaxb-impl) and make sure that they are in either the WEB-INF/lib directory of your web application or in the lib directory of the tomcat.,discarded,
I just played around a bit and it seems that the problem is jaxb-impl (group com.sun.xml.bind).,discarded,
"I excluded the jaxb-impl library, rebuilt and redeployed and got past the problem.",discarded,
"I had the similar stack trace, but after doing some Investigation I realized the Injector was being included in my project in a jaxb-impl library via a Maven transitive dependency of jersey-json project.",discarded,
Same thing for 1.6.0_30-b12 (32 bit) with Camel 2.8 and 2.9 I've downgraded my jaxb-impl version from 2.2.4 to 2.2.3.,discarded,
It's helps to reduce the size of generated document.,discarded,
"At the other end, read the file and did an xstream.fromXML() casting it to myRootBean.",discarded,
Did an xstream.toXML(myRootBean) and write it to a xml file.,discarded,
"In most of my projects which use JAX-RS, I configure Jersey to use xstream and let xstream figure out how to marshal/unmarshal for me.",discarded,
If you've created the classes you need and the xstream aliases for the classes then,discarded,
This can be achieved by using xstream.,discarded,
You can try to use xstream with json serializer.,discarded,
"I'm not a experimented user of xstream, but I would do this:",discarded,
"This is used so you can access all variables/methods of the parent, but means that even a no-args (in code) constructor has (when using reflection, like xstream does) one argument.",discarded,
"It appears that you start your while loop, retrieve the object, use xstream.toXML(o), and then do your writes, and close your write file.",discarded,
Again you'll need to call xstream.processAnnotations(AutoCompleteList.class) to tell XStream to read the annotations before you can call fromXML.,discarded,
and call xstream.processAnnotations(Title.class) before you call fromXML.,discarded,
Both support a large set of annotations.,discarded,
Serialization can be customized using a writeObject() method or with a third party library like xstream.,discarded,
"Also, your reading function has an error too: the xstream.fromXML(String) accepts a String, but it does not interpret it as a file name, but as the XML content itself...",discarded,
because of XPATH_RELATIVE_REFERENCES used in the xstream link:xstream.codehaus.org/graphs.html in the xstream declaration we have to add,discarded,
Another good approach is java bean and something like xstream to save/load stuff.,discarded,
"By declaring your own dependency on xstream, and setting the scope to test, you are overriding the dependencies declared by mylibrary.",discarded,
"If you actually want xstream to be packaged within your project, you should not be declaring the scope as test.",discarded,
"In fact if you remove your listed dependency on xstream, things will work out as you like, since mylibrary has a compile dependency on it..",discarded,
"Regarding best practices on this issue, I haven't heard of any, but the safest way to proceed ought to be to entirely remove xstream from your pom, relying on the transitive dependency.",discarded,
"If your project does use the xstream jar directly, you can still rely on the transitive dependency, as you will need a compatible version for your project and 'mylibrary' to both run against the xstream jar.",discarded,
"You should have unit tests that exercise the functionality, and if mylibrary changes version of xstream to an incompatible version, your builds should fail, and you can address the issue at that point.",discarded,
Why are you using xstream for json support?,discarded,
"With xstream you would partially get this as well, but you would have to change the xml yourself.",discarded,
But it requires copying more code from the underlying implementation then I particularly care for.,discarded,
What I am in the process of doing is extending the com.thoughtworks.xstream.converters.reflection.ReflectionConverter class to accomplish this.,discarded,
"I have never had a reason to create more than one xstream object within a project, so I usually handle it this way.",discarded,
I recommend you creat an init() method that initializes your xstream object.,discarded,
Let your xstream object have class scope.,discarded,
"Got this exception, then I download kxml2-min-2.3.0.jar and add it as a library and now it works (using xstream 1.4.4.jar)",discarded,
"I know you said you've looked at xstream, but some xstream configuration can be done through code (not configuration, but through configuring the xstream object, for example, omitting fields).",discarded,
If you do not want then do this xstream.setMode(XStream.NO_REFERENCES);,discarded,
"If you do not want to use xstream itself, because you can't depend on the jar, or your xml form is particular to your project, at least look at what xstream does.",discarded,
"Not sure that I understand your second requirement, but xstream might be the answer",discarded,
For e.g. xstream API uses this feature to initialize some attributes that were not in the XML to be deserialized.,discarded,
In a nutshell it looks like this (example nicked from the xstream website):,discarded,
"Rather than saving it as JSON you could use xstream and serialize your class to xml, which can then be saved as 'clob' to the database.",discarded,
"Additional changes You also need to remove the call to xstream.addImplicitCollection(Model.class, ""users"", User.class); since that is doing something similar to the @XStreamImplicit.",discarded,
The other way is have one xstream instance for unmarshalling with both alias and another xstream instance for marshalling only with the alias you want.,discarded,
Deserialization requires xstream to construct an object and set all of its member fields to the values specified in the xml.,discarded,
"If the object you are trying to deserialize does not have a no-arg constructor, then xstream needs help from the VM to build the object outside of the normal process of object instantiation and initialization.",discarded,
The solution is to create a converter class for the enum and register it to the xstream instance as explained in this SO post: Serialization problem with Enums at Android,discarded,
It's impossible for me to change xstream version and jettison version because they imported by other components (like smooks).,discarded,
"So, i find another solution: use spring-batch 2.2.0.RELEASE, and use org.springframework.batch.core.repository.dao.DefaultExecutionContextSerializer as serializer instead of XStream.",discarded,
Creating the xstream object like that will ignore the namespace prefixes while parsing.,discarded,
I suggest to take a look at some other tools like xstream.,discarded,
A reasonably easy thing would be to convert your result set first into a Competitions object then looks at converting the object into xml (using xstream or some such framework).,discarded,
And a example that shows how to configure xstream for this converter:,discarded,
XML: You could use something like xstream to achieve this.,discarded,
"If you don't want to use annotations then you can configure the converter with a method call on the XStream instance instead, you just have to extract the various helpers from xstream and pass them to the constructor explicitly (the annotation processor passes these things to the converter automatically if it requires them)",discarded,
"The latter contains <dependencies>, such as xstream.",discarded,
$ javac -cp <path to your xstream jar> app.java,discarded,
If you downloaded the xstream jar file by hand:,discarded,
where <path to your xstream jar is the full path to where you put your xstream jar file during downloading.,discarded,
"periodically, you suspend processing updates and take a snapshot of the entire in-memory data structure using xstream, java serialization or whatever.",discarded,
"Have you tried xstream customization, writing convertors.",discarded,
What about a singleton implementation of xstream?,discarded,
If you want to declare the converter using xstream.registerConverter instead of using XStream annotations then you use,discarded,
"XStream processAnnotations method has been introduced in XStream version 1.3, for older versions Annotations.configureAliases(XStream xstream, Class<?>... topLevelClasses) method can be used instead.",discarded,
Are you sure this is what xstream is returning for the Book object listed above?,discarded,
and xstream is trying to read xml in this plugins.,discarded,
What you need to do is provide xstream instance with the information of Player class before hand so that it does un-marshaling correctly.,discarded,
"But the best ReflectionProvider for xstream might not be the best for you, because it normally selects the Sun14ReflectionProvider.",discarded,
If you do not specify a ReflectionProvider xstream tries to find the best reflection provider.,discarded,
Then when you are processing the XML you can set XStream to ignore unknown elements with xstream.ignoreUnknownElements();,discarded,
"If it seems feasible, consider reverting the list before serialization - this would xstream to render XML similar to what you expect.",discarded,
"Before serializing your object, call the #processAnnotations(Class) method on your xstream instance to trigger metadata processing:",discarded,
Make sure you are using the latest version of xstream.,discarded,
I was able to fix the issue by commenting out the xstream.alias methods in the save method.,discarded,
"File->Import->Maven->Existing Maven Project, Browse to where you have downloaded xstream, Finish.",discarded,
The current version of xstream uses at least generics and annotations.,discarded,
FYI: Simple Google search for xstream reference attribute found me that link.,discarded,
"then you require xstream-[version].jar, xpp3-[version].jar and xmlpull-[version].jar in the classpath."" but XStream xstream = new XStream(new StaxDriver()); does not require XPP3 library starting with Java 6",discarded,
"However, this probably looks similar to what I would have done without xstream, so I'm not sure what xstream bought me in this specific situation.",discarded,
"I gave xstream a shot, and it worked.",discarded,
"you can use xstream to do this , and write your own Converter:",discarded,
I think the problem is that you are casting the return value from xstream.fromXML(fin) into a String when it should be cast to the type of object you originally serialized (RandomTree I assume).,discarded,
"With that goal in mind, I recommend taking a look at the IOUtils library mentioned in this thread",discarded,
The xstream variable is being initialized as an anonymous class.,discarded,
Of course one option could be to declare a constructor argument and pass the xstream object to it.,discarded,
Is there a addImplicitCollection called on the xstream object during configuration somewhere which causes the someTypes tag to be skipped ?,discarded,
Alternatively to your approach you could take a look at the library xstream xstream.,discarded,
In the next step you need to set up the parser of xstream to fill your objects with the content from the xml file.,discarded,
You need to add xstream jar to your program.,discarded,
Tell xstream that it is a String:,discarded,
The error message says that xstream tries to convert your ds as ArrayList.,discarded,
1.- When I create xstream I override its wrapmapper method,discarded,
``` caused by: org.xmlpull.v1.XmlPullParserException: resource not found: /META-INF/services/org.xmlpull.v1.XmlPullParserFactory make sure that parser implementing XmlPull API is available; nested exception is: org.xmlpull.v1.XmlPullParserException: resource not found: /META-INF/services/org.xmlpull.v1.XmlPullParserFactory make sure that parser implementing XmlPull API is available at org.xmlpull.v1.XmlPullParserFactory.newInstance(XmlPullParserFactory.java:278) at org.xmlpull.v1.XmlPullParserFactory.newInstance(XmlPullParserFactory.java:259) at com.thoughtworks.xstream.io.xml.XppDriver.createParser(XppDriver.java:57) at com.thoughtworks.xstream.io.xml.AbstractXppDriver.createReader(AbstractXppDriver.java:54) at com.thoughtworks.xstream.XStream.fromXML(XStream.java:1061) at com.thoughtworks.xstream.XStream.fromXML(XStream.java:1052) at tudelft.mmi.pn.duo.core.DUOModel.loadFromXml(DUOModel.java:289) at tudelft.mmi.pn.duo.core.DUOModel.getNewDUOModel(DUOModel.java:182) at domaineditor.extduomodel.ExtDuoModel.(ExtDuoModel.java:56) at domaineditor.actions.OpenFile.actionPerformed(OpenFile.java:34) at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022) at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348) at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402) at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259) at javax.swing.AbstractButton.doClick(AbstractButton.java:376) at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:833) at com.apple.laf.AquaMenuItemUI.doClick(AquaMenuItemUI.java:157) at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:877) at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289) at java.awt.Component.processMouseEvent(Component.java:6533) at javax.swing.JComponent.processMouseEvent(JComponent.java:3324) at java.awt.Component.processEvent(Component.java:6298) at java.awt.Container.processEvent(Container.java:2236) at java.awt.Component.dispatchEventImpl(Component.java:4889) at java.awt.Container.dispatchEventImpl(Container.java:2294) at java.awt.Component.dispatchEvent(Component.java:4711) at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4888) at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4525) at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4466) at java.awt.Container.dispatchEventImpl(Container.java:2280) at java.awt.Window.dispatchEventImpl(Window.java:2746) at java.awt.Component.dispatchEvent(Component.java:4711) at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758) at java.awt.EventQueue.access$500(EventQueue.java:97) at java.awt.EventQueue$3.run(EventQueue.java:709) at java.awt.EventQueue$3.run(EventQueue.java:703) at java.security.AccessController.doPrivileged(Native Method) at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80) at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:90) at java.awt.EventQueue$4.run(EventQueue.java:731) at java.awt.EventQueue$4.run(EventQueue.java:729) at java.security.AccessController.doPrivileged(Native Method) at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80) at java.awt.EventQueue.dispatchEvent(EventQueue.java:728) at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201) at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116) at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101) at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93) at java.awt.EventDispatchThread.run(EventDispatchThread.java:82),discarded,
The underlying issue that is not reported in the stacktrace is that there is a missing resource in xstream 1.4.8,discarded,
"It's not finding the xstream lib in your CLASSPATH, you'll need to double check that Fitnesse is picking that up.",discarded,
The xstream FAQ http://x-stream.github.io/faq.html has a section about how tp deal with different versions.,discarded,
The version in the dependency in your POM for xstream is 1.4.10-java7.,discarded,
The good place to start is from xstream website itself.,discarded,
There is an example which you can use as a starting point on xstream security page.,discarded,
"I ended up writing a custom converter which scans the list of people for a given id. To do that, I extended the Converter class and then registered it using xstream.registerConverter(new MyAwesomeCustomConverter).",discarded,
"I use xstream to grab an xml snapshot of the pojo, then apply the user's edit and then grab another.",discarded,
Maybe off topic: I've abandonded digester in favor of xstream.,discarded,
It got resolved after upgrading to xstream version 1.4.10.,discarded,
You could try excluding woodstox dependency in your dependency declaration for xstream.,discarded,
Make sure you indeed have xstream.jar in D:\poc\lib folder.,discarded,
Here you go an example using xstream library:,discarded,
"You just make the objects and populate them with whatever data you want, and finally you just xstream.toXML(object); to get the string of the xml.",discarded,
"I have also noted that in the latest rev of cxf that I'm using there is a difference in the media types, so the example above on the xstream message body reader/writer needs a quick modification where isWritable/isReadable change to:",discarded,
Edit2: An example of a message body writer that is based on xstream to avoid jaxb.,discarded,
you might use xstream http://x-stream.github.io/ you put your xml in an object structure and get it from there.,discarded,
have a look at xstream - http://x-stream.github.io/.,discarded,
Here is a small example of such converter: http://x-stream.github.io/converter-tutorial.html,discarded,
"You have to implement (or find) a custom converter for xstream, which will handle JodaTime object in a way you find appropriate.",discarded,
or you can check xstream lib: for json example : http://x-stream.github.io/json-tutorial.html for xml example : http://x-stream.github.io/tutorial.html,discarded,
xstream should already take care of this and create the object of correct type.,discarded,
According to J‚Äö√†√∂‚Äö√†√árg on the xstream mailing list:,discarded,
This kind of XML does simply not fit into the hierarchical stream model of XStream.,discarded,
"You have many errors, but the one corresponding to your message is you have to cast the result of xstream.fromXML to an apiresponse' object :",discarded,
"I have just done the same kind of of solution what i did was use a mix of hibernate and XStream with xstream i used the annotation XStreamAlias("""") on my class and fields and mapped them to the actual xml document and run them via xstream.fromXML() and its creates the beans then the beans are inserted into the database",discarded,
&amp; means ampersant; it's correct for xstream to do this.,discarded,
"xstream is converting ""&amp;"" to ""&"" when converting from xml to Java Objects.",discarded,
Use the marschal method on xstream with a compact writer,discarded,
But not sure how xstream unmarshalls it though.,discarded,
XStream.createObjectInputStream seems to be what you need.,discarded,
"But, remember: This is not consistent with the philosophy of xstream library, which operates on beans, which usually contain more than one field.",discarded,
"This is funny but I made some exclusions (jaxb-api, jaxb-impl, jetty, geronimo-stax-api_1.0_spec, stax-api) in the pom.xml and it worked.",discarded,
"EDIT I had the same problem on JBoss 5.1 EAP, and to solve it, the steps are a little different: in $JBOSS_HOME/lib/endorsed I removed the old jaxb-api.jar, then copied",discarded,
"Adding a dependency on jaxb-impl should be sufficient, as this transitively depends on jaxb-api, which is the JAR containing the class it's complaining about.",discarded,
I downloaded the jaxb-impl.jar since the the jaxb-api.jar is already included in Java 6 API.,discarded,
Issue was solved adding this lines before jaxb-api dependency,discarded,
Edit: So your problem is jdk 1.6 XmlElement isn't same as jaxb.2.2. you can check source at http://grepcode.com/file/repo1.maven.org/maven2/javax.xml.bind/jaxb-api/2.2.4/javax/xml/bind/annotation/XmlElement.java?av=f,discarded,
"To fix this, create a ""%JAVA_HOME%\lib\endorsed"" directory (C:\Program Files\Java\jdk1.6.0_03\jre\lib\endorsed for me), download a new jaxb-api.jar (http://www.java2s.com/Code/JarDownload/jaxb-api/jaxb-api-2.2.3.jar.zip worked for me), and unzip it into lib\endorsed.",discarded,
"If you take a look at spring-ws-core maven dependencies, you will observe that it has a dependency to spring-oxm (an abstraction over xml<-> object mappings), which has a dependency on jaxb-api project.",discarded,
"Try to put jaxb-api.jar and jaxws-api in the classpath above your jre library if you are using Eclipse, endorsing does not work for me.",discarded,
Check your classpath on AIX and make sure you are using compatible versions of jaxb-api and jaxb-impl libraries.,discarded,
"However, JBoss already has tons of jars already built in. When the same classes are present in several jars, a classloader usually finds your packed classes first (typically implementation, e.g. jaxb-impl and also loading your jaxb-api), then loads the builtin classes (typically api classes, e.g. builtin jaxb-api) and tries to use your implementation objects with the builtin api.",discarded,
You may have to copy to $JDK_HOME\jre\lib\endorsed directory jaxb-api.jar and jaxws-api.jar files.,discarded,
"But JavaSE6 1.6.0_65 ships with JAVA-WS RI 2.1.6. One way to fix this is to use the Java endorsed override mechanism, to copy jaxws-api.jar and jaxb-api.jar into JRE/JDK endorsed directory.",discarded,
No my friend you have to also add jaxb-api jar to your build path it doesn't comes with JDK,discarded,
"I would guess that you're running XJC under Java6, and have the jaxb-api.jar on your classpath.",discarded,
"and by adding requierd jars into war (jaxb-api.jar, jaxb-impl.jar, jaxws-api.jar, jaxws-rt.jar)",discarded,
"The answer is that if you use java 1.6 with jaxws 2.2.x, you need to copy the jaxws-api.jar and jaxb-api.jar in the java endorsed or tomcat endorsed directorties.",discarded,
After taking a look at the javax.xml.bind.DatatypeConverter.parseBase64Binary(String) source code (JAXB api) which is a static method using an immutable class as an argument.,discarded,
My best guess for the correct artifact is javax.xml.bind:jaxb-api:2.2,discarded,
PS: don't forget to use JAVA endorsed mechanism for jaxb-api.jar if you are using standalone JAXB.,discarded,
rt.jar version uses com.sun.xml.bind.internal.v2.ContextFactory where jaxb-api version uses com.sun.xml.bind.v2.ContextFactory.,discarded,
I am able to solve the issue using overlaoded method of JAXB which will take another parameter as ClassLoader.,discarded,
It loaded the class from jaxb-api.jar instead of relying on rt.jar but they implemented the classes slightly different.,discarded,
Adding a jar file to resolve the javax.xml.bind classes (like jaxb-api.jar) will clear up most of these errors.,discarded,
Class Path entry jaxb-api.jar in /C:/Desktop/jbdevstudio/runtimes /jboss-eap/standalone/deployments/MyWebService.war/WEB-INF/lib/jaxb-impl-2.1.13.jar does not point to a valid jar for a Class-Path reference.,discarded,
You also need to copy the jaxws-api.jar and jaxb-api.jar into the endorsed directory (as per your original description),discarded,
JBWS022052: Starting JBossWS 5.1.3.Final (Apache CXF 3.1.4) WFLYSRV0059: Class Path entry jaxb-api.jar in /C:/...war/WEB-INF/lib/jaxb-core-2.2.7.jar does not point to a valid jar for a Class-Path reference.,discarded,
WFLYSRV0059: Class Path entry jaxb-api.jar in /C:/...war/WEB-INF/lib/jaxb-impl-2.2.7.jar does not point to a valid jar for a Class-Path reference.,discarded,
adding javax.xml.bind:jaxb-api:2.2.11 to your gradle should work.,discarded,
"EDIT: Correction, it looks like this might not be just related to updating GWT, but specific to Java 9 - no longer are these classes included in JDK 9, so you must actually have a dependency on the jaxb-api in your project.",discarded,
"So, create a folder, put jaxb-api.jar v2.1 there and define the environmental variable to point at that folder.",discarded,
You have to copy the fitting versions of jaxws-api.jar and jaxb-api.jar into the directory /Library/Java/Home/lib/endorsed (Mac).,discarded,
Validator.validate() method is not throwing the ConstraintValidationException.,discarded,
"Given that SQLTransactionRollbackException is a database level lock failure, the independently configured c3p0 pools alone are not the cause of this problem.",discarded,
I used c3p0 exactly as suggested by @NayanWadekar.,discarded,
"So after including the c3p0 jars in your classpath, you also have to add SLF4J jars in your classpath.",discarded,
c3p0.properties is loaded as a ClassLoader resource.,discarded,
"Note that c3p0.properties needs to be at the top level of the CLASSPATH of your app, which may not be where other config files are located.",discarded,
You can add following appenders in your log4j.xml and all c3p0 logs will be directed to ${catalina.home}/logs/c3poLog.log file -,discarded,
I'd expect that c3p0 would eliminate timed out Exceptions before your app saw them.,discarded,
"If that hasn't happened, it'd be interesting to see two things: 1) c3p0's config, which gets logged at INFO when the pool is initialized -- is c3p0, through the hibernate layer, seeing the configuration you intend?",discarded,
You use the c3p0 to manage the jdbc connection and should not use the jdni.,discarded,
This Connection is a PooledConnection managed by c3p0.,discarded,
My advice for you is to use c3p0 connection pool and subclass the connection provider.,discarded,
After a day of logs we realized that our code which was leaking DB connections managed by c3p0.,discarded,
"Ok, so after analyzing thread dump we realized that somehow many threads were waiting on awaitAvailable() method of c3p0 library which manages DB connections in our application.",discarded,
SEVERE: The web application [/project] appears to have started a thread named [Resource Destroyer in BasicResourcePool.close()] but has failed to stop it.,discarded,
"If you wish for a c3p0 Connection pool to nevermore attempt to Connect to the database after a round of acquisition failures (with a ""round"" being defined by acquireRetryAttempts), set the config parameter breakAfterAcquireFailure to true.",discarded,
"usually connection pools like c3p0 or BoneCP recommed to use a validation query to determine if a connection is valid (something like ""select 1"" for mysql).",discarded,
As a result c3p0 is trying to get more connections to handle the extra requests.,discarded,
maybe you can switch to c3p0 according to this blog http://psponcoding.blogspot.com/2012/02/database-connection-timed-out-but-how.html,discarded,
"c3p0 dumps pool configurations at INFO on pool initiation; check your logs to make sure that, however you are trying to set parameters, you have the configuarion you expect.",discarded,
The hibernate.cfg file must have the hibernate.connection.provider_class property defined in order for the c3p0 settings to take effect.,discarded,
"You just turn Statement caching on, in c3p0, by setting maxStatements and or maxStatementsPerConnection to a positive value.",discarded,
Try setting the logging level for c3p0 to debug in your log4j-configuration:,discarded,
Is the combination c3p0 + database driver a good approach for this?,discarded,
"I almost always use c3p0 with Standalone applications, such as Java SE desktop or server applications.",discarded,
When using a container such as Servlet (Tomcat/Jetty) or Application Server (such as Glashfish or JBoss AS) these already provide a DataSource connection pooler implementation that is usually not c3p0 but provides equivalent function.,discarded,
Any previously existing Connection object is automatically closed when the associated PooledConnection.getConnection method is called.,discarded,
"For example, you might like to use c3p0.",discarded,
c3p0 dumps its config to your logs at INFO level on pool init: check your logs to verify that your settings are what you think they are.,discarded,
hibernate.c3p0.idle_test_period -- or c3p0.idleConnectionTestPeriod will test every 60 secs only if a Connection is idle for 60 secs.,discarded,
"If this turns out to be slowing down your application, then benchmark it and work on a solution, possibly using connection pooling like c3p0, etc.",discarded,
"An ""excluded"" Connection is a Connection currently in use by a client, but which c3p0 has noticed is faulty.",discarded,
An implementation backed by a connection pool (such as Apache DBCP or c3p0) returns existing connections from the pool.,discarded,
"alternatively, you can inspect running c3p0 pools via JMX, to see whether/why more than 25 Connections have been opened.)",discarded,
"(c3p0 dumps config information at INFO level on pool init, so if multiple pools are getting opened, you should see multiple messages.",discarded,
I found the cause why c3p0 behaved in this way.The issue was quite trivial...,discarded,
There is a project called c3p0 which was made specifically to handle one of the cases you are having.,discarded,
"The c3p0 messages you are seeing indicate that attempts to acquire Connections from the database are hanging (that is, neither succeeding nor failing with an Exception).",discarded,
"(You might find these variables are set in Tomcat config files, or they could be set in c3p0 config files, e.g. c3p0.properties or c3p0-config.xml.)",discarded,
I'd also recommend updating to the latest version of c3p0 [c3p0-0.9.2-pre5].,discarded,
"If you examine stack dumps, under your config you'll see c3p0 tasks like CullExpired running quite frequently.",discarded,
"One client Connection per minute is an exceeding small load for c3p0, yet you have a minPoolSize of 10 Connections.",discarded,
you've set that pool's size to 10 threads (c3p0.numHelperThreads).,discarded,
Perhaps this is useful for someone else: I found that in my case it performs poorly and could not be used with c3p0.,discarded,
This got fixed when we fixed our code which was leaking DB connections managed by c3p0.,discarded,
"But under very high concurrent load, with any Connection pool, you'll either need to make lots of resources available (high maxPoolSize + numHelperThreads in c3p0), kick out excess clients (checkoutTimeout), or let clients just endure long (but finite!)",discarded,
"With c3p0, the config param for that would be checkoutTimeout.",discarded,
"for some clues, check out your logs for c3p0 DataSource initialization messages at INFO level.",discarded,
"if you are seeing a multiplication of c3p0 helper and timer threads, you are somehow creating a multitude of c3p0 DataSources when you want there to be just one.",discarded,
"Search for the string ""Initializing c3p0 pool"", for example.",discarded,
sometimes this happens if you are hot-reloading your app but forgetting to close() your old c3p0 DataSource when you recycle.,discarded,
"but although i am biased, i think c3p0 is a pretty good choice!",discarded,
"Only way I though is to programmatically instantiate c3p0 datasource, and if exception is not thrown (this I can catch), then pass it to hibernate.",discarded,
"So my last hope is to implement custom Connection Provider, use c3p0 inside and catch c3p0's exception's in there.",discarded,
"When you do a DataSource.getConnection, the datasource will check out a PooledConnection from the pool, and return the logical connection obtained using PooledConnection.getConnection() to you as the end-user, and returning the physical connection to the pool when that logical Connection is closed.",discarded,
Even if your connections are left open (I doubt it while using c3p0) you have set a maximum of 50.,discarded,
"There can be configured an advanced connection pool with Hibernate, called c3p0.",discarded,
please try setting c3p0 params unreturnedConnectionTimeout and debugUnreturnedConnectionStackTraces to see if there is a leak.,discarded,
"to debug c3p0 issues, it's helpful to capture the version and config information that c3p0 dumps to logs at INFO level on pool initialization.",discarded,
"c3p0 DataSources should be close()ed promptly when they will no longer be used, to release all pooled Connections and helper Threads.",discarded,
"c3p0 should be installed in the container, e.g Tomcat.",discarded,
"I believe you need to set the connection pool parameters in your Hibernate configuration, as those particular parameters in c3p0.properties will be overwritten by Hibernate.",discarded,
"By adding a line like this to log4j.properties, you are telling the logger not to bother you with c3p0 messages - unless it's something important:",discarded,
It appears that c3p0 logging defaults to DEBUG.,discarded,
c3p0 datasources can be accessed via a JMX administration.,discarded,
More info on Configuring and Managing c3p0 via JMX.,discarded,
please upgrade to c3p0 0.9.2-pre8 (or wait a few days for 0.9.2 final).,discarded,
Change the following in your c3p0 pool settings,discarded,
Also accordingly JDBC3 Connection and Statement Pooling you can try to set statementCacheNumDeferredCloseThreads to 1 in c3p0 configuration.,discarded,
"Alternatively, you could make sure that a System property c3p0.password is set when you run the JVM.",discarded,
c3p0 config (both c3p0.properties and c3p0-config.xml) files can be stuck at the top-level of a jar file in your application's effective CLASSPATH.,discarded,
"So, you could create a c3p0.properties file and/or a c3p0-config.xml file, and set the password there.",discarded,
"I used c3p0 Connection provider , that also given me some problems and i solved that too.",discarded,
The reference link for c3p0 is here..,discarded,
You want to see if the c3p0 property 'maxIdleTime' is actually 300 as expected.,discarded,
"if that's not an option, you can use your mode-altering code in a c3p0 ConnectionCustomizer.",discarded,
Make value and getNext() static and call it with UnSafeSequence.getNext(),discarded,
"You wouldn't know whether a database is down until you connect to it, so unless c3p0 prevalidates all its connections, you wouldn't know that a particular database is down until you try to use it.",discarded,
I had this same problem with the proprieties that I put in persistence.xml didn't affect c3p0.,discarded,
"c3p0 is a good choice, but for choosing proper connection pool please check this discussion: Connection pooling options with JDBC: DBCP vs C3P0",discarded,
"JSF is not validating a full bean via Validator#validate, but rather calls Validator#validateValue for each form field.",discarded,
So you could use c3p0 or proxool or dbcp or even your own connection pool.,discarded,
"if you don't like how your Connections default (probably by default they are not read only), you can set the read-only property in the onAcquire method of a c3p0 ConnectionCustomizer, and the value use set (true or false) will become th default that c3p0 resets Connections to.",discarded,
The users either ended up switching to c3p0 or adding the testWhileIdle property to the spring configuration:,discarded,
From the exception stack trace I see that you are using c3p0 connection pool.,discarded,
"It's not a c3p0 thing, but other than that, I'm not sure where you ought to look.",discarded,
"Have you tried skipping the Resource XML (which isn't quite right for a c3p0 DataSource anyway), and just configuring hibernate for c3p0?",discarded,
"I used spring-jdbc, and I use com.jolbox.bonecp for connections . I would like to recommend you to use same.",discarded,
"The reason is that there is no c3p0.jar in your project library, click to download and put the c3p0-0.9.x.jar in the zip file into your project lib directory.",discarded,
"I am not familiar with c3p0, but the benefits of pooling connections and statements include:",discarded,
"the first one is being caused by c3p0 attempting to close() Connections, and those close() operations are neither succeeding nor failing with an Exception in a timely manner.",discarded,
"A possible solution, when using c3p0 would be to use proxool.",discarded,
"Beside your solution in Edit 3, it works perfect when you don't use connection-pooling like dbcp or c3p0.",discarded,
"If you want to, you can also set the config param c3p0.dataSourceName (hibernate.c3p0.dataSourceName in hibernate config), and use C3P0Registry.pooledDataSourcesByName( dataSourceName ).",discarded,
I changed SQL driver to com.jolbox.bonecp.BoneCPDataSource now my datasourse config looks like this:,discarded,
using c3p0 debug model to find out which part of code use a session and not release.,discarded,
"All the message is telling you is that c3p0 observed an Exception that, in order to conform with JDBC APIs, was going to need to be rethrown as an SQLException.",discarded,
"However, it was already an SQLException, so c3p0 left it alone.",discarded,
"If you set c3p0.acquireRetryAttempts to one, c3p0 won't retry and connection attempts will fail retry immediately.",discarded,
You can control the length of time by modifying either the number of attempts c3p0 makes at the database or the interval between attempts.,discarded,
I implemented this by constructing my own DataSource (a c3p0 pooled one) in the MultiTenantConnectionProvider and handing out connection from there.,discarded,
First make sure that you configured the c3p0 jars properly which are essential.,discarded,
c3p0 stuff should be logged at INFO for normal use.,discarded,
You are only seeing it because you are logging c3p0 output at DEBUG levels.,discarded,
As a conclusion the cost of raising an exception just to check if columns exists (besides of being bad practice) is high in both cases and especially if using c3p0.,discarded,
"Validator.validate() returns void, so your approach is not feasible.",discarded,
"While using c3p0, there are some properties that you need to initialize in c3p0.properties file.",discarded,
"No, there isn't, the reason being that there is no bean instance when invoking Validator#validateValue().",discarded,
You have to use third party connection pool like c3p0.,discarded,
"If you still get the same problem, post your c3p0 configuration, maybe something wrong there.",discarded,
now you should have produced a jmxquery.jar file that you can use to query the c3p0 connection pool like so: (the check_jmx file can be obtained from just downloading the jmxquery code from the google code site like normal.,discarded,
It sounds like you're using an older or newer version of a c3p0 jar (commonly used with Hibernate) than expected...,discarded,
"Also, you haven't seem to initialize the checkoutTime parameter for c3p0, which specifies the amount of time a client should wait for acquiring a connection from the connection pool.",discarded,
"Even I faced this error, I got it solved only after enabling autoReconnect=true in c3p0 config",discarded,
"if you want c3p0 to continue trying to acquire Connections for longer before throwing Exceptions to clients, either set acquireRetryAttempts higher or acquireRetryDelay longer.",discarded,
"if you want clients to wait indefinitely for recovery upon a database outage, set acquireRetryAttempts to 0. with this setting, when c3p0 cannot acquire a Connection, it will keep trying indefinitely every acquireRetryDelay milliseconds, and let clients hang until it succeeds or the sun burns out.",discarded,
The c3p0 documentation page discourage to use this parameter.,discarded,
The problem was that my connection pool was configured in a way that any database connection that took longer than 10 seconds would be dropped by the connection pool (c3p0).,discarded,
The driver has to be accessible from the same classloader as tomcat-jdbc.jar,discarded,
2) You will want to use something like c3p0.,discarded,
"If you set those settings, it will turn on c3p0.",discarded,
"if Threads are hanging waiting for Connections from c3p0 (i.e. in the awaitAvailable() method), you probably have a Connection leak and will want to debug it as in the previous hang thread you reference.",discarded,
"c3p0 is not, in general, used just with Tomcat.",discarded,
"there are some library-wide (rather than DataSource-specific) properties that can only be set in a c3p0.properties or typesafe/HOCON config file, but those are rarely used.",discarded,
"If you then request the group sequence to be validated (as part of Validator#validate), constraints are validated in the defined order and validation also stops on the first error.",discarded,
Try upgrading your ebean version (or bonecp if that's added as a separate component)...,discarded,
all c3p0 would do to notice outages would be to call DriverManager.getConnection( ...,discarded,
"it sounds like (looking here and at your previous question) you are doing something that works at cross-purposes to c3p0, that is you are holding long-lived Sessions rather than creating Sessions on an as-needed basis and then destroying them promptly.",discarded,
"the only way that c3p0 could help you a little bit, in theory, would be that it could report to you an event when it notices that a database is down (which might be quite promptly or quite slowly depending on your configuration).",discarded,
"Note that in your logs you are initializing three different c3p0 pools in three seconds, once each time you try to acquire a Connection.",discarded,
"Whenever you are done with a c3p0 ComboPooledDataSource, you must call close() [or more rarely the static method DataSources.destroy( ...",discarded,
"1) if you have set up your hibernate app's lifecycle to map to your web-app's lifecycle (definitely true if hibernate and c3p0 libs live in your web-app's lib directory, potentially true even if not), you absolutely do need to make sure that c3p0 pools are destroyed prior to application recycle, often meaning a contextDestroyed method.",discarded,
"Please see the documentation, ""Locating Configuration Information"" and ""Overriding c3p0 defaults via c3p0-config.xml"".",discarded,
"As BryanD mentioned in a comment, buildSessionFactory() is not really hanging, the time is very likely spent in c3p0 which is trying to reconnect.",discarded,
"But, unless you used a value less than or equal to zero in which case c3p0 will keep trying to fetch a Connection indefinitely, it will.",discarded,
"When a c3p0 DataSource attempts and fails to acquire a Connection, it will retry up to acquireRetryAttempts times, with a delay of acquireRetryDelay between each attempt.",discarded,
how do I turn off logging in java c3p0 connection pooling lib? has some related information.,discarded,
"agreeing with M Deinum, in my log4j tests of c3p0, i've used logger, not category.",discarded,
"also, you can force c3p0 to log to log4j if for some reason it is logging to some other logging library it has found.",discarded,
"in a c3p0.properties file or as a System property to your VM, add",discarded,
"As it seems from your comments, you are still not clear about the size of c3p0 for PreparedStatement.",discarded,
breakAfterAcquireFailure means precisely that c3p0 will not try to recover from a dbms outage.,discarded,
Changed c3p0 version to 0.9.5-pre6 and the problem was fixed.,discarded,
"c3p0 has some hacks to help you with that, but the best advice is not to write leaky code.",discarded,
the properties you are setting on your datasource are not properties of c3p0 ComboPooledDataSource.,discarded,
I am one of the authors of HikariCP.,discarded,
"We are willing to add automatic ""rollback"" behavior to HikariCP (but not automatic ""commit"") if a connection is returned to the pool with auto commit set to false.",discarded,
"if you use c3p0 as connection pool in Spring, add the following entries to your datasource definition",discarded,
I'm one of the authors of HikariCP.,discarded,
"UPDATE: See uwolfer's answer below, it is now the official way to use HikariCP with Hibernate.",discarded,
"However, due to their magnitude and despite being under the old Commons DBCP banner, I would characterize the pool as less mature than HikariCP at this point.",discarded,
I'm one of the authors of HikariCP.,discarded,
"We are starting the process of abuse testing various pools, including HikariCP, with tests such as bouncing the DB underneath the pool and measuring the resulting recovery.",discarded,
"In this case, the c3p0 config property numHelperThreads might help.",discarded,
"So, you had some clients trying to checkout Connections from a c3p0 DataSource, but wait()ing because no Connections were available.",discarded,
"Was your Connection pool too small for the load it experiences, in which case the best response is to increase the c3p0 parameter maxPoolSize?",discarded,
"This works, but it's ugly, hacky, uses a deprecated method, etc. The better solution would be to just use a ""real"" connection pool, like c3p0, which can be enabled just by adding the following properties to your hibernate.cfg.xml:",discarded,
But you might want to try not adding c3p0 explicitly as a dependency and just let hibernate-c3p0 bring in its version.,discarded,
"It's very likely that you have an old version of c3p0 buried somewhere in your application's CLASSPATH, in a way that, combined with ClassLoader delegation, has led to mixed versions of c3p0 in your effective codebase.",discarded,
Note that the version of c3p0 you want was made a hibernate dependency as of 4.2.3; if somehow you are bringing in dependencies from versions older than that you may have problems.,discarded,
Configuring the built-in c3p0 pooling in Hibernate using Spring,discarded,
So one of the possible options is to configure c3p0 to never close some small number of connections and do manual warm up on application start.,discarded,
This action should open connection and then close it: this will create one (or more depending on c3p0 acquireIncrement parameter) connection and put it back to pool.,discarded,
You may need to set maxIdleTimeExcessConnections option so c3p0 close extra idle connections and set minPoolSize to some small value (default is 3).,discarded,
"The driver has to be accessible from the same classloader as tomcat-jdbc.jar"".",discarded,
I added c3p0 connection pooling and I have been garbage collecting like a bum in january ever since.,discarded,
And hibernate 4.3.1-Final uses that version of c3p0.,discarded,
Switching to hibernate 4.1.12 and c3p0 0.9.1 solve my problem.,discarded,
I tried changing a few more c3p0 settings mentioned above but nothing changed.,discarded,
The DataSource pooled will now be a c3p0 PooledDataSource that wraps an SQLite unpooled DataSource which has been configured as you wish.,discarded,
"License license = LicenseValidator.validate( key, publickey, productID, productEdition, productVersion, null, null, ""YOURSERVERNAME:PORT/algas/validateobk"", new DefaultOnlineLicenseKeyCheckTimerHandlerImpl(""Online License Key can not be obtained."", false));",discarded,
"newer versions are drop-in replacements, you just need to update your dependencies, or if you including jar files manually, include the more recent c3p0 jar as well as the mchange-commons-java jar file that you'll find included with the binary distribution.",discarded,
c3p0 dumps its config to log at INFO on pool initialization.,discarded,
"if it is 0, there is nothing at the c3p0 level that should interfere with your long-duration query.",discarded,
(there are lots of places c3p0 configuration might be set outside of your hibernate.properties file.),discarded,
"com.mchange.v2.c3p0.management.RegistryName represents the name of a JMX nean that tracks the C3P0Registry class, a static utility class that keeps track of c3p0 DataSources currently live and permits looking them up by name or iterating through them.",discarded,
I have also updated my c3p0 and eh-cache libraries to the latest hibernate versions.,discarded,
c3p0 pools...shrink if Connections fail a Connection test or are expired away via the parameters described above.,discarded,
c3p0 uses a checkoutTimeout to determine how long to wait for a connection to become available when the pool is exhausted.,discarded,
c3p0 however will need to be additionally configured with com.mchange.v2.log.MLog = com.mchange.v2.log.log4j.Log4jMLog to send its log entries into log4j which will then be caught by the 'log4j => slf4j' bridge.,discarded,
In one application however we still need to use the log4j bridge until a new version of hibernate's hibernate-c3p0 is released that updates the c3p0 version.,discarded,
"Since the accepted answer was written (nearly three years ago), direct support for slf4j logging into any backend was added in version 0.2.5 of the mchange-commons-java artifact, which is what the c3p0 documentation uses.",discarded,
The latest stable release in Maven Central (0.9.2.1) of c3p0 does not use that version.,discarded,
You should just package the jar of your database in your application with a standalone connection pool like c3p0 or DBCP.,discarded,
So either drop your jt400.jar in the tomcat\lib directory OR include the tomcat-jdbc.jar in your WEB-INF\lib folder.,discarded,
"Ensure that the HikariCP jar is not located in the global library directory for JBoss, but is instead located in the container library directory of the application.",discarded,
"First, I suggest upgrading HikariCP to the latest version, 1.3.5.",discarded,
"If there are multiple application containers, the HikariCP jar should be located in each of them individually.",discarded,
This should only be possible if there are two classloaders referencing the same HikariCP jar.,discarded,
"However, if your application is a long running application (perhaps a webapp) and requires other database connections happening from other users, then I would suggest setting the ThreadPool max a lot lower (perhaps 10), and ensuring the c3p0 limit isn't breached in another way (by having too many users connected at once, or too many of these jobs running).",discarded,
Upping the c3p0 limit will help as well.,discarded,
"The problem hasn't occurred in several weeks and was never related to c3p0, I don't think.",discarded,
"First of all, set a connection time-out (HikariCP connectionTimeout) and a leak detection time-out (HikariCP leakDetectionThreshold, I could not find the counterpart in BoneCP).",discarded,
Take advantage of the configuration options for the connection pool (see BoneCPConfig / HikariCPConfig).,discarded,
The other problem with the code which you posted is that the PooledConnection#getConnection() will return the underlying connection which is thus not a pooled connection.,discarded,
"With that said, I will definitely give HikariCP a try in my next project",discarded,
java.sql.SQLException: com.microsoft.sqlserver.jdbc.SQLServerDriver at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:254) at org.apache.tomcat.jdbc.pool.PooledConnection.connect(PooledConnection.java:182) at org.apache.tomcat.jdbc.pool.ConnectionPool.createConnection(ConnectionPool.java:701) at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:635) ...,discarded,
"If you want to use c3p0 with eclipselink, perhaps you just need to use the code mentioned in this page (http://www.mchange.com/projects/c3p0/#using_combopooleddatasource) in the buildDataSource method.",discarded,
"I'm having the same issue, and I just figured out that I could use bonecp datasource (c3p0 should be similar) with eclipselink by creating a custom SessionCustomizer.",discarded,
This is the c3p0 connection pooling library attempting to do connection maintenance before the server has completed it's startup process.,discarded,
Without this property c3p0 is not used at all.,discarded,
"If your DBMS supports such a feature, it might make sense to keep c3p0 Statement caching disabled (the default, maxStatements == maxStatementsPerConnection == 0), and just use the JDBC driver or server's cache.",discarded,
"(If your JDBC driver makes use of nonstandard config to enable this feature, point me to some docs and I'll probably be able to explain how to pass that through c3p0 to the driver.)",discarded,
"quietly return cached objects, that's what c3p0 will return as well.",discarded,
"If you were not calling close() or shutdown(), that would be the problem, but we of course always recommend running on the latest version of HikariCP.",discarded,
"Just in case, my c3p0.properties file looks like:",discarded,
But you might also want to give a try to two new settings in c3p0 intended specifically to address memory leak issues in Tomcat and other ClassLoader-based hot-redeploy environments.,discarded,
"HikariCP failed to load because the class org.hibernate.engine.jdbc.connections.spi.ConnectionProvider could not be found, at least according to the stacktrace.",discarded,
So c3p0 calls java.net.InetAddress.getLocalHost() to find that.,discarded,
"So, in a fit of overengineering intended to prevent collisions in the unlikely event many c3p0 DataSources are serialized into a distributed store, c3p0 tries to give each DataSource a globally unique ""identityToken"", which is accomplished in part by prefixing a ""VMID"", intended (perhaps unsurprisingly) to be a unique identifier for the current JVM.",discarded,
For instance if you would want to replace it with HikariCP something like this would work.,discarded,
You may also want to read Hibernate : closing the session factory does not close the c3p0 connection pool,discarded,
You need to define the <dependencies> for your custom c3p0 module.,discarded,
"You could fork BoneCP and adjust the StatementHandle class to set a default statement timeout on internalStatement in the constructor (maybe abuse the QueryExecuteTimeLimit configuration option for it, it is already used in the constructor for this.queryExecuteTimeLimit).",discarded,
Also recommended is the latest HikariCP 2.0.1.,discarded,
"It says: ""Peter Salhofer added a comment - 30/Jul/2012 05:49 AM Had exactly the same problem with Spring 3.1, Webflow 3.1 and Hibernate 4.1.4. Tried commons dbcp and c3p0.",discarded,
"My Solution: I changed to tomcat-jdbc (org.apache.tomcat.jdbc.pool.DataSource) and now everything works just fine!""",discarded,
If you like to configure Hibernate with c3p0 you should read this How-To configure the C3P0 connection pool.,discarded,
In the log isn't seen that you are using c3p0.,discarded,
"In your configuration properties you have used c3p0 property maxIdleTime, but c3p0 properties are configured using c3p0. prefix or hibernate.c3p0..",discarded,
"To set the maximum pool size for tomcat-jdbc, set this property in your .properties or .yml file:",discarded,
"As you might have already discovered JSF is not using Validator#validte, but rather Validator#validatePropery to validate constraints on single properties.",discarded,
Cascaded validation is not executed by Validator#validateProperty.,discarded,
I had to move the c3p0 configuration from my persistence.xml file to Tomcat's context.xml.,discarded,
"What I found was that the connection object is fine and dandy after the InterruptedException being caught, even though the stacktrace shows me c3p0 meltdown at awaitAvailable(..).",discarded,
is coming from the jpaProperties initializing HikariCP itself (ignoring the DataSource that you set explicitly).,discarded,
The hibernate-c3p0 brings also com.mchange:c3p0:jar:0.9.2.1 and com.mchange:mchange-commons-java:jar:0.2.3.4:,discarded,
My c3p0 connection pool settings are in Tomcat's context.xml and any modification to this file at runtime would result in the application being redeployed and an additional connection pool created.,discarded,
"I searched on Google and found out that I should used connection pool so I tried c3p0 API for implementation, but I still have the same problem and nothing change",discarded,
So it turns out that almost all the default settings for HikariCP work for me except the number of DB connections.,discarded,
"(If you're already using c3p0, I can't help further) I haven't used HSQLDB myself but I think that could be worth trying.",discarded,
Allow HikariCP to follow its default behavior of using the Connection.isValid() method.,discarded,
"My solution for this problem, was to replace c3p0 data source with Tomcat pool data source.",discarded,
"are you sure c3p0 is actually initialized, and that it has the config you expect it to have?",discarded,
"in your logs, at INFO level, you should see a dump of your c3p0 DataSource's config upon pool initialization.",discarded,
"But in my opinion it's good to put this parameter by yourself, and it's needed if you are using c3p0 config file, not hibernate.c3p0.* properties.",discarded,
"If you capture your dynamic config as a map of c3p0 property names to values, there's also an alternative, more concise way to get a DataSource with that configuration.",discarded,
You'll need a different c3p0 DataSource for each JDBC url.,discarded,
1) There's a typo in your c3p0 config.,discarded,
3) These two properties are not valid c3p0 configuration:,discarded,
4) Verify that the config you want is the config c3p0 is actually seeing.,discarded,
c3p0 dumps its config at INFO on pool initialization.,discarded,
c3p0 DataSources dump config at INFO on pool init.,discarded,
"I think if you use jdbc directly(initializing connection pool in the webapp using c3p0 or tomcat pools), it could be no problem to include derby jars in WEB-INF/lib.",discarded,
So dont´t include in your web-inf/lib tomcat-jdbc.jar.,discarded,
Note: your c3p0 properties can be defined in the same XML file.,discarded,
"The very fact that you can do something like this in C3P0, but not in HikariCP, Vibur, or Apache DBCP should be a red-flag.",discarded,
"Link to MVN Repository, useful if you are using Maven: http://mvnrepository.com/artifact/com.mchange/c3p0/0.9.2.1",discarded,
"Try a clean build, and as a last resort go into your .m2/repositories directory and find and delete all HikariCP artifacts and let them re-download.",discarded,
I can't speak for HikariCP but this is what modern connections pools do.,discarded,
"A robot in an old television show (Buck Rogers) always said ""bdbd"", and c3p0 was a robot too.",discarded,
"c3p0 DataSource's dump its config on pool init, at INFO level.",discarded,
"If you search your logs, you can verify whether the config you intend is actually the config of your c3p0 DataSource.",discarded,
"There's nothing in the config above that should cause you to churn through Connections, but you say that the config you've quoted ""doesn't work"", so maybe the real c3p0 config is different.",discarded,
"First, What version of HikariCP, Java, and the MySQL driver?",discarded,
"As you can see, the yearDao has a connectToDB()-method that returns a connection (the connection is actually gotten from a c3p0 connection pool) which is then used to get a ResulSet of years from the database.",discarded,
It looks like you're using HikariCP and your datasource cannot establish a successful initial connection:,discarded,
"Tested on c3p0 pool + tomcat 8, but you will be probably able to modify it to you needs.",discarded,
"As addition, I have had same issue with c3p0, so i swithced to org.apache.tomcat.jdbc.pool.DataSource like:",discarded,
If you use an external DataSource (external connection pool like HikariCP) then you want to set the following property in the JDBC connection URL:,discarded,
Hikari will auto-default 'minimumIdle' config (minimum number of idle connections that HikariCP tries to maintain in the pool) to the same as that of 'maximumPoolSize' so on start-up the pool will be initialized with all max 100 connections.,discarded,
But there were some modification need to be done to what c3p0 registed.,discarded,
c3p0 register datasource with a name like this:,discarded,
I would like to avoid adding identityToken so as said here I create a c3p0.properties file and put this line into it:,discarded,
"The problem, as @SteveWaldman said, was I tried to register my datasources into MBean server which c3p0 registered them before.",discarded,
"You can also use it in Java SE applications, by using a pool as a library (HikariCP, Tomcat connection pool, etc.)",discarded,
c3p0 dumps its configuration to your application's logs at INFO level on pool initiation.,discarded,
"Look for that, and verify that the URL your c3p0 DataSource is using is the URL you intended to configure.",discarded,
The issue is definitely not that c3p0 is ignoring the nondefault port.,discarded,
Either put H2 driver jar in Tomcat's classpath or add the maven dependencies tomcat-jdbc (and probably tomcat-juli) to the pom.xml.,discarded,
"If you don't have the tomcat-jdbc in the local webapp, then the task of connection pool creation is delegated to the system/server classloader which clearly cannot access the local webapp classloader.",discarded,
"After turning on logging from bonecp, I was able to identify which SQL statement was causing the connection to close.",discarded,
The FileNotFoundExceptions are how c3p0 sees there is nothing there.,discarded,
"I am assuming that you are using a pooled data source as provided by the tomcat-jdbc project, otherwise performance will be terrible.",discarded,
"Instead of using the dataSourceClassName com.microsoft.sqlserver.jdbc.SQLServerDataSource, use net.sourceforge.jtds.jdbcx.JtdsDataSource (also mentioned on this page which also indicates HikariCP was tested with the jTDS driver).",discarded,
So you need to update the C3p0 library to 0.9.5:,discarded,
c3p0 dumps its config at INFO on pool initialization.,discarded,
"you have c3p0 config that you aren't aware of, that is not quoted above.",discarded,
Put a connection pooler underneath (bonecp / c3p0 / dbcp).,discarded,
So I was able to figure this out by manually configuring HikariCP in a java configuration file.,discarded,
Put the c3p0 libraries in the /WEB-INF/lib and create it as per its documentation:,discarded,
I've switch to bonecp and it's solved with the default bonecp config :),discarded,
"Right click on project ---> select ""properties"" --> Deployement assembly --> ""ADD"" option --> select ""java build path entries"" --> select path of c3p0 jar",discarded,
It is a transitive dependency of c3p0.,discarded,
Try changing the c3p0 config param contextClassLoaderSource to library to avoid some ClassLoader confusions.,discarded,
Take a look at the HikariCP code.,discarded,
"If c3p0 attempts to acquire Connections from a database, and those acquisition attempts ""hang"" — they neither succeed nor fail with an Exception — that's bad.",discarded,
"If you want to work around these hangs, the c3p0 configuration property to look at would be maxAdministrativeTaskTime.",discarded,
I guess c3p0 only releases the connection once the thread is completed.,discarded,
"Anyway, we ran gradle dependencies to find out what was pulling in tomcat-jdbc and ended up replacing our spring-boot-jdbc dependency with plain spring-jdbc.",discarded,
"If you don't have tomcat-jdbc in your dependencies, it may help to set a breakpoint in DataSourceAutoConfiguration.NonEmbeddedDataSourceCondition.getDataSourceClassLoader() to find out what driver it finds.",discarded,
I would prefer if you use some kind of connection pool dpcp or bonecp.,discarded,
Defines how many times c3p0 will try to acquire a new Connection from the database before giving up.,discarded,
"I can't really remember why I chose c3p0 over DBCP for my last project (probably familiarity), but if you want to give DBCP a look, go ahead.",discarded,
"They appear to have an appendix specifically about configuring c3p0 for use by Tomcat, so you may wish to check that out.",discarded,
"HikariCP was holding the reference to the NULL preparedstatement obtained from the driver and threw a NPE whenever the preparedstatement was being acted on, such as, setString().",discarded,
"I am not even sure if it is legal for the driver to return NULL, I would lean to it being a bug in the driver so I am not sure if it should be addressed in HikariCP or not.",discarded,
"My question now is, is this really the best and only way to deal with connections that are created by c3p0 + EntityManager?",discarded,
Why doesn't c3p0 destroy the connections or remove them on its own?,discarded,
c3p0 dumps a large pool config message at INFO on DataSource initialization.,discarded,
"If I am right and you are opening then abandoning multiple c3p0 DataSources, the next question becomes why.",discarded,
"So, from everything that you've described, it sounds like your application is creating and then abandoning multiple c3p0 pools.",discarded,
"To use this feature in jTDS you need to add ConnectionPoolImplementation (recommended: DBCP or c3p0, see: http://jtds.sourceforge.net/features.html).",discarded,
"You would set unreturnedConnectionTimeout in production mostly if for some reason you can't debug and fix the application whose Connections are leaking, in which case it's a reasonable workaround to just set unreturnedConnectionTimeout and let c3p0 clean up what your application forgets to.",discarded,
"If you have a look at the code for init() method, with the above defaults and your configuration with",discarded,
The best way to solve this problem in my case was change configuration pool parameters in tomcat (/etc/tomcat7/context.xml) no changes in my.cnf and without configuration c3p0 in app.,discarded,
If HikariCP is available we will use it.,discarded,
"Then, in a c3p0.properties file, put these properties to retry to reconnect indefinitely every 3 seconds when database is down:",discarded,
"Disclaimer: I don't support HikariCP by any means, I'm just a happy user of the technology.",discarded,
IMO I would recommend using HikariCP rather than C3P0 or Tomcat.,discarded,
"If you want spring to get datasource from c3p0 pool, just make the LocalContainerEntityManagerFactoryBean refer the c3p0 datasource bean.Here is an example.",discarded,
You need to add c3p0 dependency into your project:,discarded,
"One suggestion is upgrading to the latest HikariCP version, 2.3.8.",discarded,
But turning off statement caching within c3p0 by setting maxStatements to 0 would help in precisely the same way.,discarded,
"Set the c3p0 config parameter statementCacheNumDeferredCloseThreads to 1, and c3p0 will neurotically track whether the parent of an expiring Statement is in use, and defer the close() call until it is not.",discarded,
Tested under HikariCP 2.3.8 and Hibernate 4.3.8.Final:,discarded,
HikariCP depends (mainly) on minimumIdle and maximumPoolSize [settings] (https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby).,discarded,
Configure a datasource bean using HikariCP in servlet-context as:,discarded,
If you want to use Best among all Java Connection Pool providers try HikariCP.,discarded,
Now restart the server and note your c3p0 is initialized and now you can deal with c3p0 details.,discarded,
Problem till now with you is that c3p0 is never initialized and is out of picture.,discarded,
Till now you must have noticed during your server startup that c3p0 is not initialized at all.,discarded,
"you can verify this by looking at the source code of LocalSessionFactoryBean, where it simply ignore the value of property set above and sets it to LocalDataSourceConnectionProvider and your c3p0 is never initialized.",discarded,
c3p0 connection pool are used in legacy plugins.,discarded,
"In contextDestroyed(...) call close() the c3p0 ComboPooledDataSource, and remove it from the application scope.",discarded,
Why not just construct the c3p0 DataSource instead of defining a new kind of object with a getConnection() method.,discarded,
Note: Please check if there is any tomcat-jdbc.jar or commons-dbcp.jar in your classpath added most of the times by transitive dependency.,discarded,
there is a fallback sequence from tomcat -> to HikariCP -> to Commons DBCP.,discarded,
To make it right your application.properties should look something like this for HikariCP datasource:,discarded,
The file jetty-env.xml looks like (only as example; used bonecp datasource):,discarded,
E.g. it is not possible if you use c3p0 connection pool.,discarded,
"my bad, I modified it when I configured the connection pool HikariCP (play.db.prototype.driver, etc ...), so the database connection was working but not with Ebean.",discarded,
JHipster generates a cool database configuration using HikariCP.,discarded,
HikariCP is going to log those cleanup stats every 30 seconds as long as it is running.,discarded,
The presence of those logs is no indication that HikariCP is hung.,discarded,
"Thanks to @brettw, to solve this problem, you have to set a default catalog in HikariCP properties:",discarded,
"If you really want your MySQL to kill your Connections after 100 secs, and you want c3p0 to notice that, you can set c3p0's idleConnectionTestPeriod to something like 30, and c3p0 will quickly detect and dispose of dead Connections.",discarded,
look into c3p0 (http://sourceforge.net/projects/c3p0/) and commons-dbcp (http://commons.apache.org/dbcp/),discarded,
(p.s. Be sure you are using a recent version of c3p0.,discarded,
the c3p0 to create DataSources with pooled connection support: http://www.mchange.com/projects/c3p0/#using_c3p0,discarded,
But you can also set dataSourceName like any other c3p0 config property.,discarded,
"This can go in a c3p0.properties file, as a System property, or as a HOCON/typesafe config path, depending how you are configuring c3p0.",discarded,
In the log isn't seen that you are using c3p0.,discarded,
"In your configuration properties you might have used c3p0 property maxIdleTime, but c3p0 properties are configured using c3p0.",discarded,
"In either case, you'll want to upgrade to c3p0-0.9.5 or higher (the current production version is 0.9.5.1), then set the following c3p0 config parameters to take the randomness out of what ClassLoader c3p0-internal Threads come to reference:",discarded,
Make sure that any web-app that creates a c3p0 pool internally closes it on web-app undeploy.,discarded,
"TL; DR: Upgrade to c3p0 0.9.5.1, then set privilegeSpawnedThreads to true and contextClassLoaderSource to library.",discarded,
"But rather than a problem provoked by mysterious interrupts, you'll see c3p0 TimeoutExceptions instead.",discarded,
I recommend you have a look at HibHik: I created this project to show a minimal stand-alone Java application using Hibernate with a database pool (HikariCP) that uses the recommended patterns and practices (mostly shown in TestDbCrud.java).,discarded,
2) Add the following property to your c3p0 config:,discarded,
Application is reading and writing to text files and also has calls to a database(hibernate c3p0).,discarded,
Or you can use a connection pool library like c3p0.,discarded,
HikariCP auto-commit behavior is the same as without a pool.,discarded,
"You'll get a lot more information about what is going on internally within HikariCP, without being too noisy.",discarded,
"So basically you have two options, turn-off jdbc statement caching in c3p0 and wait for a fix (or fix it independently and create Pull Request) or try some alternative. Nevertheless, good luck :)",discarded,
Parameter called 'idleConnectionTestPeriod' in c3p0 should be set.,discarded,
"I has the same problem before, and the autoReconnect not work for me. Now I am using HikariCP.",discarded,
"testConnectionOnCheckout Must be set in c3p0.properties, C3P0 default: false If set to true, an operation will be performed at every connection checkout to verify that the connection is valid.",discarded,
"Brett Wooldridge, the author of HikariCP pointed me to MySQL driver settings that might help.",discarded,
"It will interesting to see the how connections are managed, As per logs I see you are using c3p0.",discarded,
That is because dataSource is a configuration specific to HikariCP.,discarded,
"This assumes that you let HikariCP generate unique pool names, i.e. do not set poolName in your properties, and that registerMbeans=true.",discarded,
Why exactly are you trying to cause HikariCP to reload?,discarded,
I had a similar problem with c3p0.,discarded,
When you then call Validator#validate you also pass the group you want to validate.,discarded,
"But if, due to some configuration problem or bug, your application has c3p0 continually acquiring Connections, one per client or much worse if you are reconstructing the pool for each client, then the transaction isolation checks might become the visible symptom of a worse underlying problem.",discarded,
"If you are still using c3p0, the following steps are likely to resolve this issue:",discarded,
"Much better, if you use c3p0, to set only the (nonstandard) maxStatementsPerConnection property.",discarded,
"c3p0 should be com.mchange:c3p0:0.9.5.2, be carefull with com.mchange - with other groupId this code does not work.",discarded,
I can now see c3p0 being initialised in the logs and the number of connections being controlled by the pool as expected.,discarded,
So I switched to a ComboPooledDataSource and set the c3p0 properties using the setter methods available here and NOT on theLocalSessionFactoryBean so you effectively end up with the following:,discarded,
The problem was c3p0 was never being initialised when using a DriverManagerDataSource and having hibernate manage the pool by setting the c3p0 properties on the LocalSessionFactoryBean,discarded,
"HikariCP seems rather interesting finally, i'll have to check this further.",discarded,
If you want to use c3p0 with Hibernate and Spring check this link,discarded,
"In addition, set the appropriate options for c3p0 (set privilegeSpawnedThreads to true and set contextClassLoaderSource to library).",discarded,
"But I suspect that 100 concurrent connections will be enough - remember that they are ""borrowed"" from the c3p0 connection pool.",discarded,
that already exists in the logging library and c3p0 calls it.,discarded,
HikariCP is not particularly paternalistic philosophically; favoring documentation over code.,discarded,
"Regarding the connection pool implementation to use, personally I used C3P0 and HikariCP (https://brettwooldridge.github.io/HikariCP/).",discarded,
"Simply limit the max number of connections in your pool to match your mentioned database limits and make sure you return your connections the pool (with c3p0 I believe you just close the Connection, which is wrapped by their PooledConnection).",discarded,
"For some reason, the c3p0 when creating the pool, wraps the given DataSource class within own WrapperConnectionPoolDataSourceBase class.",discarded,
First you need to exclude tomcat-jdbc from the classpath as it will be picked in favor of hikaricp.,discarded,
UPDATE: For c3p0 can you add the following properties and test:,discarded,
So if your project has Commons DBCP in classpath and it doesn't contain Tomcat and HikariCP implemenations then BasicDataSource will be used.,discarded,
You need to use another connection pool or get c3p0 compiled on 1.7+ JDK.,discarded,
This example uses c3p0 as a data-source for connection pooling.,discarded,
"However, most people end up using c3p0 (many without even knowing it), proxool, Hikari, or some other implementation.",discarded,
The inner connection providers can be c3p0 or whatever other implementation you want to use.,discarded,
"BTW, there is also Validator.validateValue which does not require an actual bean instance.",discarded,
The Validator interface defines also a [Validator.validateProperty][1] method where you explicitly specify the property to validate.,discarded,
It seems that you want to replace IronJacamar with HikariCP.,discarded,
"It seems the c3p0 jar file using old, Downloaded newer version 0.0.95.2 version, it worked",discarded,
"The method Validator.validate(bean, groups...) returns a java.util.Set of ConstraintViolation objects, specific to your bean, which specify the path to each error, a message, and any other custom data provided by the validators.",discarded,
"Back that up with a checkoutTimeout for the period when the DBMS has just crashed, but c3p0 hasn't yet detected it, and you'll be pretty close to where you want to be.",discarded,
"But even if there are idle Connections, you won't know if they are good until you test them, and if the DBMS is down, you'll hang as c3p0 tries all of its idle Connections, rejects them, and then waits in vain to try to acquire Connections.",discarded,
"It sounds like you have already asked c3p0 to test Connections for you on checkout, either via hibernate.c3p0.validate or c3p0.testConnectionOnCheckout.",discarded,
There are a few thing c3p0 can do for you though:,discarded,
"What you'd like is for c3p0 to have pre-tested the Connections, so that if none are good, none appear idle.",discarded,
"(You can't have a guarantee, because c3p0 and hibernate are very asynchronous, so between your check and your checkout attempt, things may change.",discarded,
maxIdleTimeExcessConnections is about minimizing the number of Connections held by c3p0 pools when the pool is not under load.,discarded,
We are using c3p0 connection pool for this.,discarded,
Also you could remove commons-dbcp as the spring boot web dependency includes tomcat-jdbc as a pool (which is at least better compared to commons-dbcp however I would recommend the HikariCP instead of either).,discarded,
c3p0 docs used to advise use of asynchronous Connection testing for performance reasons.,discarded,
"c3p0 (I think unusually) does notice Exceptions experienced by clients, and triggers a silent Connection test so that the pool can reason about Connection validity.",discarded,
Validator.validate will return a set of ConstraintViolation instances.,discarded,
You almost certainly have an old version of c3p0 somewhere in your applcation's effective CLASSPATH.,discarded,
Only the types Basic and Manual Scaling allow background threads and are therefore the only candidates for use with HikariCP.,discarded,
"Yes i've implemented HikariCP on Google App Engine, but there are some considerations;",discarded,
And please pay your attention to version of c3p0 that you're using.,discarded,
"As for me, you're incorrectly configured c3p0.",discarded,
Below is my example of c3p0.properties file that work nice for Oracle:,discarded,
Properties like c3p0.preferredTestQuery must be located at c3p0.properties file from your classpath (e.g. WEB-INF/classes).,discarded,
The issue was not related to c3p0 nor HikariCP.,discarded,
Take a look at HikariCP which replaces BoneCP https://brettwooldridge.github.io/HikariCP/ This is the one I'm using now in my project.,discarded,
The default connection pool in play i think is managed by HikariCP.,discarded,
"In your application.conf you can add additional bonecp configurations,",discarded,
"Note that these type of details really don't have much to do with JPA or Hibernate, but are settings that you set on the DataSource / database connection (c3p0 in this case) itself.",discarded,
You need to exclude tomcat-jdbc as mentioned by ydemartino,discarded,
tomcat-jdbc has nothing to do with the Tomcat server.,discarded,
"Try creating a Java 7 project, declaring HikariCP as a dependency, and running the following code:",discarded,
Use a different DB connection pooling package like c3p0.,discarded,
"By the way, I'm also using HikariCP in a web app launched by Gretty, but in my case I'm instantiating the pool programatically, and the Hikari library is in the webapp classpath, not in the container's.",discarded,
"Here is the sample code for jdbcTemplate using HikariCP, Spring Boot 1.4.0 and hsqldb.",discarded,
Add this to pom.xml dependencies or download the jar and place it in the classpath,discarded,
"c3p0 will track overrides of setReadOnly(...), and ensure that clients see the value you have set, even after check-in/check-out cycles.",discarded,
You might want to use a pooling API like c3p0 or hikariCP (I heard that DBCP was quite old).,discarded,
"I faced your problem too, and hibernate didn't want to apply my parameters of c3p0, so I changed my datasource and it completly solved my problem of inactive sessions.",discarded,
So for 8th tomcat you going to include org.apache.tomcat.jdbc.pool.DataSource class that placed in org.apache.tomcat:tomcat-jdbc:jar:8.0.36,discarded,
"If you want to be more proactive than that, just call hardReset() on the c3p0 data source (after casting it to PooldedDataSource.",discarded,
"The best thing to do is just configure Connection testing, in which case c3p0 will silently (but lazily) close the old Connections and acquire new ones.",discarded,
HikariCP reports connection as leak because time taken from borrowing to close is longer than specified LeakDetectionThreshold.,discarded,
"If you are using spring, define the c3p0 connection pool as a bean and inject it into both the Hibernate session factory and the Quartz scheduler beans.",discarded,
Few suggestions: Use app server pools if possible Use c3p0 than DBCP,discarded,
"If JMX libraries and a JMX MBeanServer are available in your environment (they are include in JDK 1.5 and above), you can inspect and configure your c3p0 datasources via a JMX administration tool (such as jconsole, bundled with jdk 1.5).",discarded,
"You will find that c3p0 registers MBeans under com.mchange.v2.c3p0, one with statistics about the library as a whole (called C3P0Registry), and an MBean for each PooledDataSource you deploy.",discarded,
You can of course also just iterate over the list and call Validator.validate on each element.,discarded,
c3p0 takes care of that for you.,discarded,
"If you are having trouble monitoring c3p0 pools and its registry, you may need to debug general JMX stuff.",discarded,
"p.s. c3p0 includes no getdbPoolStatistics() method, that may be part of your own libraries.",discarded,
You can also give your c3p0 MBeans customized and/or stable names.,discarded,
"You only have to do anything special if you want to turn JMX registration OFF in c3p0, that is, if you want to disable JMX MBean registration.",discarded,
I have faced similar issues in past and the only difference is I was using the c3p0 connection pool.,discarded,
"If a task hangs for a long period of time, that setting causes c3p0 to interrupt() the Thread on which it is running and abandon it.",discarded,
"Ultimately, this is what you have to debug: Why is it that when c3p0 tries to connect to your production database, sometimes those calls to Driver.connect() hang?",discarded,
"In the post : Disabling hibernate validation annotations dynamically at runtime, there are some ways mentioned to create your custom validator by extending the existing one and using Validator.validateValue.",discarded,
Also see some related questions: How to set up datasource with Spring for HikariCP? and How do I configure HikariCP in my Spring Boot app in my application.properties files?,discarded,
"the first one is c3p0 connection pooling, its almost the same solution as chkal sugested.",discarded,
"If you have commons-dbcp2 jar instead of commons-dbcp, change the bean of your datasource class from",discarded,
I solved my problem using the c3p0 connection pool,discarded,
"If you're using Spring boot 1.4 or newer with the default tomcat-jdbc connection pool, the correct answer is:",discarded,
Hibernate c3p0 connection pool not timing out idle connections,discarded,
Use the SignatureValidator.validate method to validate the signature.,discarded,
"Playframework by default uses HikariCP, so below configuration applies to HikariCP",discarded,
"Following code snippet connects to a PostgreSQL database (using pgjdbc and HikariCP) with an in-memory JAAS configuration, that is, no Configuration files are required:",discarded,
If that doesn't work try configuring c3p0 and using the config I mentioned.,discarded,
"I was using c3p0 in my application, configuring idleConnectionTestPeriod and preferredTestQuery resolved my issue",discarded,
Example: To exclude com.mchange:c3p0:0.9.2.1 following should be exclude block,discarded,
"On your main, before c3p0 initialization add below code fragment:",discarded,
c3p0 responds to this by marking the Connection for destruction rather than check-in when the application is done.,discarded,
"7.Extremely simple, due to the very simplified implementation, the line count and source file count are very low, compare with c3p0 that has over 200 source files(last time we checked), Tomcat jdbc has a core of 8 files, the connection pool itself is about half that.",discarded,
"First you could import commons-dbcp2.jar,then you could create a org.apache.commons.dbcp.BasicDataSource,eg,",discarded,
"Then, if a full cycle of attempts to acquire Connections from the database fails (again, which should be more than one time, or your application will be very fragile), your c3p0 DataSource will simply break, and further attempts to check out a Connection will fail immediately.",discarded,
I configured pooling in Spark Java with HikariCP for MariaDB.,discarded,
"So, if you get a connection from HikariCP and use it for 2 hours, it is going to be well past its lifetime.",discarded,
"Isn't it possible in Tomcat to put some library (JAR), like c3p0 or Spring, in some common 'lib' folder (the docs says $CATALINA_HOME/lib)?",discarded,
The method HikariConfig.getDataSource() does not do what you think it does.,discarded,
"This property allows you to directly set the instance of the DataSource to be wrapped by the pool, rather than having HikariCP construct it via reflection.",discarded,
"You can find c3p0 here.http://www.mchange.com/projects/c3p0/ and find mysql-connecter at https://www.mysql.com/products/connector/.After you get the two jar,you just need copy them under the lib folder.Then use the class and method the provide.",discarded,
Don't use the DriverManagerDataSource use a proper connection pool like HikariCP.,discarded,
You can see c3p0 implementation in : NewPooledConnection.,discarded,
use a database connection pooling (for example HikariCP) and send queries to the database using multiple threads,discarded,
c3p0 PooledDataSources log their config at INFO on pool initialization.,discarded,
"The connection you get from the connection pool is - usually - a wrapper (proxy) around the physical connection, this is also the approach used by c3p0.",discarded,
You should instead find out which version of tomcat-jdbc you're meant to be using and use the absolute version instead.,discarded,
Make sure this is working correctly with your existing connection pool BEFORE switching to HikariCP.,discarded,
By default HikariCP closes and renews connections every 30 minutes (maxLifetime default).,discarded,
"If your database has a shorter idle timeout than that, then you need to adjust the setting in HikariCP to match.",discarded,
"Depending on the datasource tool (c3p0,hikari etc) that you use, you can monitor your pool through jmx (jsconsole,visual vm).",discarded,
"If you can't resolve this, you may be able to ickily work around the problem with a c3p0 setting, maxAdministrativeTaskTime.",discarded,
"You shouldn't be trying to test your connection pool, as that should probably be a library someone else wrote (dbcp or c3p0).",discarded,
"Please configure Connection testing, so that timed-out Connections are automatically expired by c3p0.",discarded,
Now all you have to do is to pass your handerInstance along with the PoolProperties while creating tomcat-jdbc DataSource.,discarded,
This answer is for Apache tomcat-jdbc DataSource provider.,discarded,
"Note: If you're using tomcat-jdbc, you have to define it explicitly like,",discarded,
"Either use the functionality provided by your application / server (or Tomcat), or use a dedicated connection pool library (eg HikariCP, DBCP, etc).",discarded,
"Otherwise, if HikariCP is available we will use it.",discarded,
Method BasicDataSource#setConnectionProperties(String) overrides all properties that been added to the DataSource previously,discarded,
"You need to use method BasicDataSource#addConnectionProperty(String, String) to add single property:",discarded,
Create a file c3p0.properties setting the parameters accordingly.,discarded,
see the example at Stackoverflow: How do I configure HikariCP in my Spring Boot app in my application.properties files?,discarded,
"That is, your application is constructing c3p0 DataSources, each of which has its own complement of Threads, then it is losing or dereferencing or replacing them without first close()ing them.",discarded,
Can i use HikariCP on Google App Engine,discarded,
"Configure c3p0 propertise To configure c3p0, puts the c3p0 configuration details in “persistence.xml“, like following:",discarded,
"Get hibernate-c3p0.jar To integrate c3p0 with Hibernate, you need hibernate-c3p0.jar, get it from JBoss repository.",discarded,
Does not directly answer your question but since I love portability in webapps my war will contain the connector jar and a connection pool (e.g the super duper c3p0).,discarded,
"First you have to properly configure c3p0, which in case of using hibernate must happen in c3p0.properties file.",discarded,
In your c3p0.properties put these properties to retry to reconnect indefinitely every 3 seconds when database is down:,discarded,
What is needed is that one closes the datasource once it won't be used any more invoking the method com.​mchange.​v2.​c3p0.​impl.​AbstractPoolBackedDataSource#close().,discarded,
"Perhaps, InterruptedException is normal because some of c3p0 threads are waiting for connection and when you call close() these threads are interrupted.",discarded,
"Though, according to your setup (100 clients, 1000 server connections), such necessity to wait for resource is not that obvious. If you really interested, most reliable solution would be looking to c3p0 logs, perhaps, adding some more logs and recompiling...",discarded,
Which requires a SessionFactory which in turn requires a DataSource (here c3p0):,discarded,
You might be able to find out why Hibernate bundles c3p0 for its default connection pool implementation?,discarded,
"You should always use a connection pooling mechanism, be it the one provided by your container, be it a mechanism bundled in your application (c3p0, for instance).",discarded,
Here is a sample configuration (from our application) on how to configure c3p0 in the datasource:,discarded,
I managed to isolate the problem to the c3p0 JDBC MySQL URL.,discarded,
Do you not want to see any c3p0 logging?,discarded,
"Damn those wheel-reinvented custom logging implementations, like the one used by c3p0...",discarded,
"If you got c3p0 configured properly, you will get a pooled connection (not a fresh one).",discarded,
"I would expect the pool to relinquish open connections after a time-out anyway, so I suggest you just don't worry about it :) If you need to forcibly close the connections, you'll need to keep a reference to the connection pool itself and use any facilities supplied by c3p0 directly.",discarded,
Check for abandoned connections and log them (in your c3p0 configurations).,discarded,
I solved by using @Transactional(rollbackFor = RuntimeException.class) and switching from a BasicDataSource to a ComboPooled that's present in c3p0 library.,discarded,
"I would suggest giving the log4j binding a try, and configuring c3p0 to use that.",discarded,
This is mainly for performance reasons i.e. hibernate uses c3p0 connection pool library for that purpose and there is also some other library called dbcp (database connection pool) from Apache which does similar stuff.,discarded,
Using connection pooling (c3p0) made it go away.,discarded,
"I resolved my issue by reverting back to the c3p0 driver, with the following config:",discarded,
"All configuration parameters should be in the hibernate.c3p0 namespace, not c3p0.*.",discarded,
Try using c3p0 and see if the problem is reproduced.,discarded,
"For example, you might like to use c3p0.",discarded,
"And in 2nd case, yes, you have to package either DBCP or c3p0 plus the JDBC driver together with you application.",discarded,
"I've already noticed the IllegalMonitorStateException under Oracle JDK 1.6.0_27 for c3p0 thread, but I thought that was a c3p0 problem.",discarded,
"So if it is assistance with setting up the connection pooler (c3p0) then maybe you should start by posting the details of how you configured it ? The version you are using, also an example of the JDBC connection string in use and also the MySQL driver jar you are using.",discarded,
"You should keep the SQL driver, pooled connection handle (via c3p0) with autoCommit=false (this should be the default).",discarded,
As I know c3p0 limits time before unused connection being expired.,discarded,
Also monitor connection pool usage by setting c3p0 loggers to debug level.,discarded,
"Now when the second bundle tries to load classes from the c3p0 jar, its class-loader may find (from parent delegation) that the classes are already loaded !!",discarded,
There are two bundles which uses the c3p0 jar for database pooling and one of them exports the c3p0 packages.,discarded,
"Just use database which supports connection pooling (any modern RDBMS supports this) and use out-of-the-box solution, such as DataSource or c3p0.",discarded,
At that time c3p0 was the one that could rebuild its connections after oracle restart.,discarded,
What I was missing from c3p0 is useful logging for executed statements with information about how long they took.,discarded,
"When we were making our choice a couple years ago, it was just between c3p0 and dbcp.",discarded,
At work we have used BoneCP (as the replacement for c3p0) and as far as I know haven't had any issues (I did not do the upgrade myself).,discarded,
We use c3p0 with our Postgres database.,discarded,
"For example, if you're using BoneCP, turn on logStatementsEnabled and set your com.jolbox.bonecp logger to log at the debug level.",discarded,
"You probably need to configure c3p0 to test the connection, like explained here: http://www.mchange.com/projects/c3p0/index.html#configuring_connection_testing",discarded,
The driver has to be accessible from the same classloader as tomcat-jdbc.jar,discarded,
Neither of these get this issue once we configured c3p0 connection pool timeouts and test period (see article: http://www.codefin.net/2007/05/hibernate-and-mysql-connection-timeouts.html).,discarded,
It was because I set c3p0 max_statements to 50.,discarded,
"I notice if I put that number as high as the number of threads I'm using, the number of connections stays really low (using the handy jmx bean of c3p0 to inspect the active connections).",discarded,
I switched to c3p0 instead of DBCP.,discarded,
It should be located in one of those jars.,discarded,
The exception says that the class com.jolbox.bonecp.BoneCPDataSource was not found.,discarded,
If you use a well known (such as c3p0) you do not get in touch with that issues because you are coding against the DataSource interface.,discarded,
If you provide the dependency in your own bundle you must export the c3p0 packages or add them as a private package.,discarded,
Of course you need to add the maven dependency for c3p0 in your pom.,discarded,
I was getting the same error in my IBM Websphere with c3p0 jar files.,discarded,