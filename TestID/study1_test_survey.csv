id,identifier,repository,method_path,method_name,quality (evaluator1),good_attributes (evaluator1),bad_attributes (evaluator1),new_name_proposal (evaluator1),notes (evaluator1),quality (evaluator2),good_attributes (evaluator2),bad_attributes (evaluator2),new_name_proposal (evaluator2),notes (evaluator2)
57,qi1,Jesque,src/test/java/net/greghaines/jesque/meta/TestQueueInfo.java,testCompareToEqualsHashCode(),poor,,It is too short|It is not meaningful|It is syntactically similar to another identifier,firstQueueInfo,,acceptable,It is meaningful,It is too short|It is syntactically similar to another identifier,info1| queueInfo1,it is hard to map qi to the queue info
58,qi2,Jesque,src/test/java/net/greghaines/jesque/meta/TestQueueInfo.java,testCompareToEqualsHashCode(),poor,,It is too short|It is not meaningful|It is syntactically similar to another identifier,secondQueueInfo,,acceptable,It is meaningful,It is too short|It is syntactically similar to another identifier,info2|queueInfo1,it is hard to map qi to the queue info
62,keys,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,,,good,,,,
63,keyNames,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,,,good,,,,
64,values,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,,,poor,,,,
65,i,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),poor,,It is too short|It is not meaningful|It is semantically inconsistent|It is too general,index,,poor,,,,
66,key,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,good,,,,
67,keyInfos,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,,,good,,,,
68,i,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),poor,,It is too short|It is not meaningful|It is too general,index,,poor,,,,
69,keyInfo,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is properly capitalized|It is consistent with tested code,,,,good,,,,
70,size,Jesque,src/test/java/net/greghaines/jesque/meta/dao/impl/TestKeysDAORedisImpl.java,testGetKeyInfos(),good,It is meaningful|It is concise|It is semantically consistent,,,,poor,,,,
277,jedis,Jesque,src/test/java/net/greghaines/jesque/utils/TestJedisUtils.java,testIsDelayedQueue_Success(),good,It is concise|It is semantically consistent,,,,good,,,,
396,status,Jesque,src/test/java/net/greghaines/jesque/TestWorkerStatus.java,testConstructor_NoArg(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,good,It is concise|It is syntactically distinct from other identifiers,,,
407,client,Jesque,src/test/java/net/greghaines/jesque/IntegrationTest.java,acquireLockSuccess(),good,It is meaningful|It is concise,,,,good,,,,
428,jobFactory,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImpl.java,verifyNoExceptionsForAllNextQueueStrategies(),acceptable,It is meaningful|It is concise|It follows project-specific naming conventions,It is syntactically similar to another identifier,jobQueue,Not sure what relation factory has to the method.,good,It is concise|It is properly capitalized|It expresses a pattern,,,"Since it is the only factory, the name is appropriate"
429,nextQueueStrategy,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImpl.java,verifyNoExceptionsForAllNextQueueStrategies(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized,,,This works well.,poor,,It is too long|It is not meaningful|It is inconsistent with the tested code,element,"It is hard to understand the relationship between WorkerImpl and NextQueueStrategy, so naming the variable nextQueueStrategy offer not further relevant information. Also, the strategy keyword is totally confusing"
430,worker,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImpl.java,verifyNoExceptionsForAllNextQueueStrategies(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers,It is too short,factoryWorker,If worker is a specific type or there are different references to worker in other pieces of code this could be more descriptive,good,It is concise|It is semantically consistent,,,"Since this is the only worker, the name makes sense"
431,queues,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImplFactory.java,testCall(),poor,,It is not meaningful|It is too general,,,acceptable,It is concise|It is semantically consistent,It is too general|It does not represent its type,queueNames,"It is not clear if the list of strings that queues has conform a queue, or if each one of the elements in the list is the name of a queue. I will go for the second option"
432,jobTypes,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImplFactory.java,testCall(),good,It is meaningful,,,,good,It is concise|It is semantically consistent|It is properly capitalized,,,
433,jobFactory,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImplFactory.java,testCall(),acceptable,It is concise,,,,good,It is concise|It is semantically consistent|It is properly capitalized|It expresses a pattern,,,"The only issue is that there are two factories, so both identifiers by themselves do not make their differences clear enough. I guess more knowledge about the source code is needed to understand the difference"
434,factory,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImplFactory.java,testCall(),poor,,It is not meaningful,,,good,It is concise|It expresses a pattern,,,"Since this is the last factory, it makes sense to call it just factory. The only issue is that there are two factories, so both identifiers by themselves do not make their differences clear enough. I guess more knowledge about the source code is needed to understand the difference"
435,worker,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerImplFactory.java,testCall(),poor,,It is not meaningful|It is too general,,,good,It is concise|It is semantically consistent|It is consistent with tested code,,,
479,listener,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerPool.java,testRemoveListener_Specific(),good,It is meaningful|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,It is too general,workerListener,,good,It is consistent with tested code,,,
480,event,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerPool.java,testRemoveListener_Specific(),good,It is meaningful|It is concise|It is consistent with tested code,It is semantically inconsistent,workerEvent | event1,,acceptable,,,executeEvent,
481,event2,Jesque,src/test/java/net/greghaines/jesque/worker/TestWorkerPool.java,testRemoveListener_Specific(),good,It is meaningful|It is concise|It is consistent with tested code,It is too general,workerEvent2,,acceptable,,,failureEvent,
572,friend,Jongo,src/test/java/org/jongo/SaveTest.java,canUpdateWithACustomTypeId(),good,It is meaningful|It is concise|It is consistent with tested code,,,,poor,It is meaningful|It is concise,It is too short|It is too general,,
573,result,Jongo,src/test/java/org/jongo/SaveTest.java,canUpdateWithACustomTypeId(),acceptable,It is meaningful|It is consistent with tested code,It is too general,foundFriend,,poor,It is concise,It is too short|It is too general,,
775,relationId,Jongo,src/test/java/org/jongo/ReflectiveObjectIdUpdaterTest.java,shouldNotChangeOtherObjectIdField(),poor,,It is semantically inconsistent,,"Inconsistency between class name (ObjectId) and field name (relationId)
",good,It is meaningful|It is concise|It is semantically consistent,,,
776,friend,Jongo,src/test/java/org/jongo/ReflectiveObjectIdUpdaterTest.java,shouldNotChangeOtherObjectIdField(),good,,,,,acceptable,It is consistent with tested code,,,
856,nb,Jongo,src/test/java/org/jongo/marshall/ParameterQueryBindingTest.java,canUseParameterWith$in(),poor,,It is not meaningful,,,poor,,It is too short|It is not meaningful|It is semantically inconsistent|It is too general,,I get no knowledge about the context of nb or why it was chosen. 
885,strings,Jongo,src/test/java/org/jongo/marshall/DocumentMarshallingTest.java,canHandleMapWithPrimitiveType(),poor,,It is inconsistent with the tested code|It is too general|It does not represent its type,,,poor,,It does not represent its type,dateMap,
886,type,Jongo,src/test/java/org/jongo/marshall/DocumentMarshallingTest.java,canHandleMapWithPrimitiveType(),acceptable,It is concise,It is too general,,,acceptable,It is meaningful,,,"it's meaningful, but only to a certain degree"
887,result,Jongo,src/test/java/org/jongo/marshall/DocumentMarshallingTest.java,canHandleMapWithPrimitiveType(),good,It is meaningful|It is concise|It is consistent with tested code,,,,acceptable,It is concise|It is syntactically distinct from other identifiers,It is too general,resultType,It's kind of vague. I'd prefer resultType or something to show what the expected result is.
1067,results,Jongo,src/test/java/org/jongo/DistinctTest.java,canDistinctAndMapWhenNoResults(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,,,good,It is meaningful|It is concise,,,
1101,friend,Jongo,src/test/java/org/jongo/UpdateTest.java,canPartiallyUdpateWithAPreexistingDocument(),good,,,,,good,It is meaningful|It is concise|It is consistent with tested code,,,
1102,preexistingDocument,Jongo,src/test/java/org/jongo/UpdateTest.java,canPartiallyUdpateWithAPreexistingDocument(),poor,,It is semantically inconsistent,preexistingFriend,,good,It is meaningful|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,preexistingFriend,
1103,johnny,Jongo,src/test/java/org/jongo/UpdateTest.java,canPartiallyUdpateWithAPreexistingDocument(),acceptable,,,,,acceptable,It is meaningful|It is consistent with tested code,It is too general,foundFriend|foundFriendJohny,
1135,mapping,Jongo,src/main/java/org/jongo/marshall/jackson/JacksonMapper.java,build(),good,It is meaningful|It is concise,,,,good,It is meaningful|It is concise,,,
1136,jacksonEngine,Jongo,src/main/java/org/jongo/marshall/jackson/JacksonMapper.java,build(),good,It is meaningful|It is properly capitalized,,,,good,It is meaningful,,,
1148,result,Jongo,src/main/java/org/jongo/FindOne.java,map(ResultHandler),good,,,,,good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,
1164,a,la4j,src/test/java/org/la4j/inversion/AbstractInverterTest.java,"performTest(double[][], LinearAlgebra.InverterFactory)",poor,,It is too short|It is not meaningful,,,good,It is meaningful|It is concise|It follows project-specific naming conventions,It is too general,,This follows the math naming convention for matricies but I'm not sure others would follow.
1165,inverter,la4j,src/test/java/org/la4j/inversion/AbstractInverterTest.java,"performTest(double[][], LinearAlgebra.InverterFactory)",good,It is meaningful|It is concise,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,,,
1166,b,la4j,src/test/java/org/la4j/inversion/AbstractInverterTest.java,"performTest(double[][], LinearAlgebra.InverterFactory)",poor,,It is too short|It is not meaningful,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,It is too general,,"Same as ""a"" following the naming convention for matricies."
1167,c,la4j,src/test/java/org/la4j/inversion/AbstractInverterTest.java,"performTest(double[][], LinearAlgebra.InverterFactory)",poor,,It is too short|It is not meaningful,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,It is too general,,"Same as ""a"" following the naming convention for matricies."
1168,e,la4j,src/test/java/org/la4j/inversion/AbstractInverterTest.java,"performTest(double[][], LinearAlgebra.InverterFactory)",poor,,It is too short|It is not meaningful,,,poor,It is semantically consistent,It is not meaningful|It does not follow project-specific naming conventions|It is too general,identityMatrix,I'm not sure I've seen matrix e as a symbol for the identity matrix so I think this is poorly labeled.
1276,a,la4j,src/test/java/org/la4j/vector/VectorTest.java,testSetAll_5(),poor,,It is too short|It is not meaningful,,,poor,,It is too short|It is not meaningful|It does not follow project-specific naming conventions,vector,
1277,d,la4j,src/test/java/org/la4j/vector/VectorTest.java,testSetAll_5(),poor,,It is too short|It is not meaningful,,,poor,,It is too short|It is not meaningful|It does not follow project-specific naming conventions,element,
1293,a,la4j,src/test/java/org/la4j/vector/VectorTest.java,testSelect_5(),acceptable,It is meaningful,It is too short|It is too general,mediumLengthVector,,poor,,It is too short|It is not meaningful,,
1294,b,la4j,src/test/java/org/la4j/vector/VectorTest.java,testSelect_5(),acceptable,It is meaningful,It is too short|It is too general,shortVector|sameValueVector,,poor,,It is too short|It is not meaningful,,
1295,c,la4j,src/test/java/org/la4j/vector/VectorTest.java,testSelect_5(),acceptable,It is meaningful,It is too short|It is too general,longVector,,poor,,It is too short|It is not meaningful,,
1326,b,la4j,src/test/java/org/la4j/vector/VectorTest.java,testMultiply_3(),poor,,It is syntactically similar to another identifier,,"Loop variable in conflict with the body variables: b vs a,c,d",poor,,It is not meaningful,,
1327,a,la4j,src/test/java/org/la4j/vector/VectorTest.java,testMultiply_3(),acceptable,,It is too short,,,poor,,It is not meaningful,,
1328,c,la4j,src/test/java/org/la4j/vector/VectorTest.java,testMultiply_3(),acceptable,,It is too short,,,poor,,It is not meaningful,,
1329,d,la4j,src/test/java/org/la4j/vector/VectorTest.java,testMultiply_3(),acceptable,,It is too short,,,poor,It is meaningful,,,
1607,a,la4j,src/test/java/org/la4j/matrix/MatrixTest.java,testRowAccess_2x4(),poor,,It is too short|It is not meaningful,,,poor,,It is too short,,
1608,b,la4j,src/test/java/org/la4j/matrix/MatrixTest.java,testRowAccess_2x4(),poor,,It is too short|It is not meaningful,,,poor,,It is too short,,
1778,a,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testIsZeroAt_5x3(),poor,,It is too short|It is not meaningful,,,poor,,It is too short|It is not meaningful|It does not represent its type|It is too hard to follow code with variables that are too concise.,,
1786,a,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testNonZeroIterator_issue253(),poor,,It is too short|It is not meaningful|It is syntactically similar to another identifier|It is too general,matrix|sparseMatrix|sparse_matrix,I would not use the in one place the same name of the local variable and the function name,poor,,It is too short|It is not meaningful,,
1787,it,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testNonZeroIterator_issue253(),poor,,It is too short|It is not meaningful|It is too general,iterator|matrixIterator|matrix_iterator ,lowers code readability,good,It expresses a pattern,,,
1788,x,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testNonZeroIterator_issue253(),poor,,It is too short|It is not meaningful|It is too general,element|matrixElement|matrix_element,,good,,,,
1789,i,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testNonZeroIterator_issue253(),good,It is meaningful|It is concise,,,'i' is the standard name for the matrix rows,good,,,,
1790,j,la4j,src/test/java/org/la4j/matrix/sparse/SparseMatrixTest.java,testNonZeroIterator_issue253(),good,It is meaningful|It is concise,,,'j' is the standard name for the matrix columns,good,,,,
1863,a,la4j,src/test/java/org/la4j/decomposition/AbstractDecompositorTest.java,"performTest(double[][], double[][][])",poor,It is syntactically distinct from other identifiers,It is not meaningful|It does not follow project-specific naming conventions|It is too general,inputMatrix,Doesn't say anything by itself,poor,,It is too short|It is not meaningful,,
1864,decompositor,la4j,src/test/java/org/la4j/decomposition/AbstractDecompositorTest.java,"performTest(double[][], double[][][])",good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,,,good in general,good,It is consistent with tested code,,,
1865,decomposition,la4j,src/test/java/org/la4j/decomposition/AbstractDecompositorTest.java,"performTest(double[][], double[][][])",good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers,,,good in general,good,It is consistent with tested code,,,
1866,i,la4j,src/test/java/org/la4j/decomposition/AbstractDecompositorTest.java,"performTest(double[][], double[][][])",good,It is concise|It is semantically consistent,It is not meaningful|It is too general,,"While it is not meaningful by itself, one can understand what is its role in the code (index in a for loop with respect to the decomposition), hence it does not need another name",good,,,,
1901,value,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It follows project-specific naming conventions,,,,poor,,It is too general,,
1902,parser,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,good,,,,
1903,groups,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,poor,,It is too general,,
1904,group,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,poor,,It is too general,,
1905,entry,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,poor,,It is too general,,
1906,loc,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),acceptable,It is meaningful,It is syntactically similar to another identifier|It is too general,,,poor,,It is too short,,
1907,conjunctionLocations,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,,,good,,,,
1908,location,Natty,src/test/java/com/joestelmach/natty/DateTest.java,main(String[]),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,It is syntactically similar to another identifier,,,poor,,It does not follow project-specific naming conventions,,
1922,reference,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testLocations(),acceptable,It is concise,It is not meaningful|It is too general|It does not represent its type,referenceDate,,poor,,It is not meaningful|It is too general|It does not represent its type,,
1923,parser,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testLocations(),good,It is meaningful|It is concise,,,,good,It is meaningful|It follows project-specific naming conventions,,,
1924,groups,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testLocations(),acceptable,It is concise,It does not represent its type,dateGroups,,good,It is meaningful|It is concise,,,
1925,group,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testLocations(),acceptable,It is concise,It does not represent its type,dateGroup,,good,It is meaningful,,,
1926,reference,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),acceptable,It is syntactically distinct from other identifiers,It is too general,date|referenceDate,,poor,It is concise,It is not meaningful|It is inconsistent with the tested code,removeMe,"reference and calendarSource are not used in the test code. Their location (at the top of the code followed by a comment) suggests that they will play a central role in the test, but at the end they are meaningless. "
1927,parser,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,,,acceptable,It is concise|It is semantically consistent,It does not represent its type,dateParser,The parser is designed for something related to dates. Its name should somehow reflect that
1928,groups,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),good,It is meaningful|It is consistent with tested code,It is too general,dateGroups,,good,It is semantically consistent|It is consistent with tested code|It expresses a pattern,,,"Groups makes sense just after you read ""parser"" and realize that all the code may be related with some sort of regex matching. Without previous knowledge of regex matching, the identifier is hard to understand"
1929,group,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),good,It is meaningful|It is consistent with tested code,It is too general,dateGroup,,good,It is semantically consistent|It is consistent with tested code|It expresses a pattern,,,"Group makes sense just after you read ""parser"" and realize that all the code may be related with some sort of regex matching. Without previous knowledge of regex matching, the identifier is hard to understand"
1930,suffix,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,acceptable,It is concise|It is consistent with tested code,It is too general,firstSuffix,"Using the reference date (i.e., the string), it is hard to understand what a suffix is (particularly how it is determined/extracted). Suffix does not properly tells that a the suffix is the next and only the next term after the candidate date"
1931,prefix,Natty,src/test/java/com/joestelmach/natty/SearchTest.java,testPrefixSuffix(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,acceptable,It is concise|It is consistent with tested code,It is too general,firstPrefix,"Using the reference date (i.e., the string), it is hard to understand what a prefix is (particularly how it is determined/extracted). Prefix does not properly tells that a the prefix is the previous and only the previous term before the candidate date"
1933,reader,Natty,src/test/java/com/joestelmach/natty/CPANTest.java,sanityCheck(),good,It is meaningful|It is concise,,,,good,It is concise|It is semantically consistent,,,It is the only reader. Totally fine as reader
1934,value,Natty,src/test/java/com/joestelmach/natty/CPANTest.java,sanityCheck(),poor,It is concise,It is too general,currentLine,,poor,,It is semantically inconsistent|It does not represent its type,line,That identifier reads a line from the file. Its name should suggest that
1935,parser,Natty,src/test/java/com/joestelmach/natty/CPANTest.java,sanityCheck(),good,It is meaningful|It is concise,,,,acceptable,It is concise,It is too general,dateParser,"Since the parser is designed for dates, its name should suggest that, given that its type does not mention dates either"
1936,groups,Natty,src/test/java/com/joestelmach/natty/CPANTest.java,sanityCheck(),acceptable,It is meaningful,It is too general,dateGroups,,acceptable,It is concise|It is semantically consistent,It is too general,,"Again, groups makes sense when the user has previous knowledge about regex matching"
1937,reference,Natty,src/test/java/com/joestelmach/natty/RecurrenceTest.java,testRelative(),poor,,It is not meaningful,referenceDate,,good,It is meaningful,It is too general,dateFormat,
1938,group,Natty,src/test/java/com/joestelmach/natty/RecurrenceTest.java,testRelative(),poor,,It is not meaningful,groupedDates,,good,It is meaningful,It is too general,dateGroup,
1939,dateGroup,Natty,src/test/java/com/joestelmach/natty/AbstractTest.java,"parseCollection(Date, String)",acceptable,It is concise,It is not meaningful|It encodes type information in the name,,"Its a List<DateGroup> called dateGroup. It's not really clear if/how the ""grouping"" is done",poor,It is properly capitalized,It is semantically inconsistent,dateGroups,"Since it is a list, it would probably be better to use an identifier in plural."
1940,dates,Natty,src/test/java/com/joestelmach/natty/AbstractTest.java,"parseSingleDate(String, Date)",good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized,,,,good,It is meaningful|It is concise|It is consistent with tested code,,,
1950,newDate,Natty,src/test/java/com/joestelmach/natty/ThreadSafetyTest.java,run(),acceptable,It is meaningful|It is concise,It does not represent its type,dateString,"The identifier has ""Date"" in it but it doesn't actually represent a Date. I think the use of ""String"" in the name is justified in this case to differentiate the string date from the actual date.",good,It is meaningful|It is concise|It is properly capitalized,,,
1951,parsed,Natty,src/test/java/com/joestelmach/natty/ThreadSafetyTest.java,run(),poor,,It is not meaningful,parsedDate,Anything could be parsed. It needs to be more specific.,acceptable,It is concise,It is not meaningful|It does not represent its type,parsedDate,
2073,tableInfo,ORMLite Core,src/test/java/com/j256/ormlite/stmt/StatementExecutorTest.java,testCallBatchTasksAutoCommitTrueSynchronized(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized,,,,good,It is meaningful|It is properly capitalized,,,
2074,connectionSource,ORMLite Core,src/test/java/com/j256/ormlite/stmt/StatementExecutorTest.java,testCallBatchTasksAutoCommitTrueSynchronized(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized,,,,good,It is meaningful,,,
2075,connection,ORMLite Core,src/test/java/com/j256/ormlite/stmt/StatementExecutorTest.java,testCallBatchTasksAutoCommitTrueSynchronized(),good,It is meaningful|It is concise|It is semantically consistent,,,,good,It is meaningful|It is concise,,,
2076,statementExec,ORMLite Core,src/test/java/com/j256/ormlite/stmt/StatementExecutorTest.java,testCallBatchTasksAutoCommitTrueSynchronized(),good,It is meaningful|It is concise|It is properly capitalized,,statementExecutor,,good,It is meaningful,,,
2077,called,ORMLite Core,src/test/java/com/j256/ormlite/stmt/StatementExecutorTest.java,testCallBatchTasksAutoCommitTrueSynchronized(),acceptable,It is consistent with tested code,It is too short|It does not follow project-specific naming conventions|It is too general,isCalled,,good,It is concise,,,
2545,tableInfo,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is properly capitalized|It is consistent with tested code,,,
2546,where,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),not sure,,It is not meaningful|It is semantically inconsistent,,,poor,,It is not meaningful|It is too general,,
2547,foreignDao,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),good,It is meaningful|It is concise|It is semantically consistent,,,,good,It is consistent with tested code|It expresses a pattern,,,
2548,qb,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),acceptable,,It is too short|It is syntactically similar to another identifier|It is improperly capitalized,queryBuilder,,acceptable,It is concise,It is too short|It is not meaningful,queryBuilder,
2549,whereSb,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),not sure,It is meaningful,,,,good,It is consistent with tested code|It expresses a pattern,,referenceSb,
2550,sb,ORMLite Core,src/test/java/com/j256/ormlite/stmt/WhereTest.java,testNotExistsSubQuery(),acceptable,,It is too short|It is syntactically similar to another identifier|It is improperly capitalized,stringBuilder,,good,It is concise|It expresses a pattern,,,"There is another StringBuilder in the code (whereSb), so the shorter 'sb' implies that this is the final, tested query string. (Although this could be explicit.)"
4136,config1,ORMLite Core,src/test/java/com/j256/ormlite/dao/DaoManagerTest.java,testClassLoopWithLoadedConfig(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,It is syntactically similar to another identifier,,,poor,,It is syntactically similar to another identifier,loopOneConfig,
4137,config2,ORMLite Core,src/test/java/com/j256/ormlite/dao/DaoManagerTest.java,testClassLoopWithLoadedConfig(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,It is syntactically similar to another identifier,,,poor,,It is syntactically similar to another identifier,loopTwoConfig,
4138,configs,ORMLite Core,src/test/java/com/j256/ormlite/dao/DaoManagerTest.java,testClassLoopWithLoadedConfig(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,poor,,It is syntactically similar to another identifier,allConfigs,
4221,dao,ORMLite Core,src/test/java/com/j256/ormlite/field/types/BigDecimalNumericTypeTest.java,testBigDecimalInvalidDbValue(),good,It is meaningful|It is concise|It is consistent with tested code,,,,acceptable,It expresses a pattern,It encodes type information in the name|It is too general,localBigDao,
4222,notDao,ORMLite Core,src/test/java/com/j256/ormlite/field/types/BigDecimalNumericTypeTest.java,testBigDecimalInvalidDbValue(),good,It is meaningful|It is concise|It is properly capitalized|It is consistent with tested code,,,,poor,It expresses a pattern,It does not represent its type,notBigDao,
4223,notFoo,ORMLite Core,src/test/java/com/j256/ormlite/field/types/BigDecimalNumericTypeTest.java,testBigDecimalInvalidDbValue(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized,It is too general,notValidForm,,poor,It is properly capitalized,It is not meaningful|It does not represent its type,notBig,
4361,clazz,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),acceptable,It is meaningful,,,,acceptable,,,,
4362,dao,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),acceptable,It is concise,,,,acceptable,,,,
4363,foo,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),poor,,It is too short|It does not follow project-specific naming conventions,,,poor,,,,
4364,results,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),good,It is meaningful,,,,good,,,,
4365,iterator,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),acceptable,It is concise,,,,good,,,,
4366,result,ORMLite Core,src/test/java/com/j256/ormlite/field/types/EnumToStringTypeTest.java,testEnumToStringValue(),acceptable,It is concise,,,,poor,,It is syntactically similar to another identifier,,
4535,clazz,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateLongTypeTest.java,testDateLongNull(),good,It is meaningful|It is semantically consistent,It uses misspelled words,myClass|testClass,,poor,,,,
4536,dao,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateLongTypeTest.java,testDateLongNull(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,,,good,It expresses a pattern,,,
4537,foo,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateLongTypeTest.java,testDateLongNull(),acceptable,It is meaningful,It does not follow project-specific naming conventions,date|exampleDate,,poor,,,,
4582,clazz,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateTypeTest.java,testDateNull(),poor,,It uses misspelled words|It is too general,localDateClass,,poor,It is concise,It is too short|It is semantically inconsistent|It uses misspelled words,targetClass,
4583,dao,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateTypeTest.java,testDateNull(),acceptable,It is meaningful,It is too short|It is too general,localDateDao,,acceptable,It is concise|It is semantically consistent,It does not represent its type,classDao,
4584,foo,ORMLite Core,src/test/java/com/j256/ormlite/field/types/DateTypeTest.java,testDateNull(),poor,,It is too short|It is not meaningful|It is semantically inconsistent|It is too general,localDate,,poor,,It is too short|It is not meaningful|It is semantically inconsistent|It is inconsistent with the tested code|It does not follow project-specific naming conventions|It does not represent its type,testDate,
4794,tableName,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,Good identifier
4795,fieldConfig,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,dbFieldConfig,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It follows project-specific naming conventions,,,good one
4796,indexName,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good one too
4797,uniqueIndex,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good one too
4798,format,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,It does not follow project-specific naming conventions|It is too general,stringFormat,,acceptable,It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code|It follows project-specific naming conventions,It is not meaningful,,Don't know what this id means
4799,throwIfNull,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),acceptable,It is meaningful|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,isThrowIfNull,it is easier to understand if boolean variable starts with 'is',good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good
4800,maxLevel,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,acceptable,It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized,It is too general,maxEagerLevel,A bit generic
4801,maxRefresh,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,acceptable,It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized,It is too general,maxAutoRefreshLevel,Can be general
4802,foreignCollection,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),acceptable,It is meaningful|It is concise|It is properly capitalized|It is consistent with tested code,,,it is easier to understand if boolean variable starts with 'is',good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good one
4803,foreignAutoRefresh,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),acceptable,It is meaningful|It is properly capitalized|It is consistent with tested code,,,it is easier to understand if boolean variable starts with 'is',good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good one
4804,columnName,ORMLite Core,src/test/java/com/j256/ormlite/field/DatabaseFieldConfigTest.java,testFooSetGet(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,good one
5102,mutNum,Commons Lang,src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java,testGetSet(),acceptable,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,,,,poor,,It is not meaningful,,
5512,result,Commons Lang,src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,testAddSeconds(),acceptable,It is consistent with tested code,It is too general,,,poor,It is concise,It is not meaningful,modifiedDate,
5628,result,Commons Lang,src/test/java/org/apache/commons/lang3/RandomUtilsTest.java,testNextDouble(),acceptable,It is semantically consistent,It is too general,,,poor,,It is not meaningful|It is too general,randomDouble,result if definitely a result because is the results of a call of a method. It does not bring any additional information. The identifier works because the test is very short
5763,string,Commons Lang,src/test/java/org/apache/commons/lang3/ValidateTest.java,testNotBlankNullStringShouldThrow(),acceptable,,,nullString,,good,It is consistent with tested code,,,"Normally, I would say that it is too general, but here, the test case is about a string as an input, so it makes sense."
6295,class1,Commons Lang,src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java,testIntArray(),poor,,It is not meaningful|It is syntactically similar to another identifier,,,acceptable,It is semantically consistent,It is not meaningful,,
6296,class2,Commons Lang,src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java,testIntArray(),poor,,It is not meaningful|It is syntactically similar to another identifier,,,acceptable,It is semantically consistent,It is not meaningful,,
6297,list,Commons Lang,src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java,testIntArray(),poor,,It is not meaningful,diffResultList,,acceptable,It is consistent with tested code,It is too general,,
6298,diff,Commons Lang,src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java,testIntArray(),acceptable,It is meaningful,It is too general,diffInFirstPosition,,acceptable,It is semantically consistent,It is too short,,
6333,o1,Commons Lang,src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java,testObjectBuild(),poor,,It is not meaningful,testObject1,,poor,,It is too short|It is not meaningful|It is syntactically similar to another identifier|It uses a useless sequence number,firstObject,
6334,o2,Commons Lang,src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java,testObjectBuild(),poor,,It is not meaningful,testObject2,,poor,,It is too short|It is not meaningful|It is syntactically similar to another identifier|It uses a useless sequence number,secondObject,
6493,obj,Commons Lang,src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,testObjectArray(),acceptable,It is syntactically distinct from other identifiers|It is consistent with tested code,,objects,"obj is misleading, because one object is expected",poor,,It is not meaningful|It is too general,,
6683,array1,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,"Given the purpose of the method under test, maybe this identifier is ok.  I wouldn't know how to rename it better.",good,It is concise|It is semantically consistent,,,"All the arrays have no special purpose, so a generic name makes sense. "
6684,array2,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,Same comments from array1.,good,It is concise|It is semantically consistent,,,"All the arrays have no special purpose, so a generic name makes sense. "
6685,array3,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,Same comments from array1.,good,It is concise|It is semantically consistent,,,"All the arrays have no special purpose, so a generic name makes sense. "
6686,obj1,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,Same comments from array1.,poor,,It is not meaningful|It is inconsistent with the tested code|It does not represent its type,array1,"The obj identifiers are extremely redundant and makes the understanding of the actual tests difficult. I would say it is completely legal to say Object array2 = new char[]{5,6}, which would make the asserts way easier to understand. "
6687,obj2,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,Same comments from array1.,poor,,It is not meaningful|It is inconsistent with the tested code|It does not represent its type,array2,"The obj identifiers are extremely redundant and makes the understanding of the actual tests difficult. I would say it is completely legal to say Object array1 = new char[]{5,6}, which would make the asserts way easier to understand. "
6688,obj3,Commons Lang,src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java,testCharArrayHiddenByObject(),acceptable,It is concise|It is semantically consistent,It is not meaningful|It is too general,,Same comments from array1.,poor,,It is not meaningful|It is inconsistent with the tested code|It does not represent its type,array3,"The obj identifiers are extremely redundant and makes the understanding of the actual tests difficult. I would say it is completely legal to say Object array3 = new char[]{5,6,7}, which would make the asserts way easier to understand. "
6907,reader,Gson,src/test/java/com/google/gson/stream/JsonReaderTest.java,testNegativeZero(),good,,,,,acceptable,,,jsonReader,
7094,address,Gson,src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java,testInetAddressSerializationAndDeserialization(),good,It is meaningful|It is concise|It is consistent with tested code,,,,acceptable,,,inetAddress,
7095,jsonAddress,Gson,src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java,testInetAddressSerializationAndDeserialization(),good,It is meaningful|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,,,,
7096,value,Gson,src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java,testInetAddressSerializationAndDeserialization(),good,It is meaningful,,,,acceptable,,,addressValue,
7167,target,Gson,src/test/java/com/google/gson/functional/ObjectTest.java,testNullFieldsSerialization(),poor,It is concise,It is not meaningful|It is semantically inconsistent|It is too general|It does not represent its type,sut,"In testing code everything called ""target"" makes some sense, so that identifier seems to be more like a wildcard. Particularly, this target seems to be equivalent to out (Object Under Test) or sut (System Under Test), which clearly refer to some object that will be tested.",poor,,It is not meaningful,,
7281,type,Gson,src/test/java/com/google/gson/functional/EnumTest.java,testCollectionOfEnumsDeserialization(),acceptable,It is meaningful|It is concise,It is too general,tokenType,,poor,,It is too short|It is too general,,
7282,json,Gson,src/test/java/com/google/gson/functional/EnumTest.java,testCollectionOfEnumsDeserialization(),acceptable,It is meaningful|It is concise|It is consistent with tested code,It is too general,jsonEnumRepresentation,,poor,,It is too short|It is too general,,
7283,target,Gson,src/test/java/com/google/gson/functional/EnumTest.java,testCollectionOfEnumsDeserialization(),acceptable,It is meaningful|It is concise|It is consistent with tested code,,deserializedEnum,,poor,,It is too short|It is too general,,
7386,target,Gson,src/test/java/com/google/gson/functional/CollectionTest.java,testTopLevelCollectionOfIntegersSerialization(),good,It is concise|It is semantically consistent|It is properly capitalized,It is too general,,,poor,,It is not meaningful|It is too general,,
7387,targetType,Gson,src/test/java/com/google/gson/functional/CollectionTest.java,testTopLevelCollectionOfIntegersSerialization(),good,It is meaningful|It is concise|It is semantically consistent,,,,acceptable,It is syntactically distinct from other identifiers,,,
7388,json,Gson,src/test/java/com/google/gson/functional/CollectionTest.java,testTopLevelCollectionOfIntegersSerialization(),poor,It is concise,It is too short|It is not meaningful,jsonRepresentation,,good,It is meaningful|It is concise|It follows project-specific naming conventions,,,
7932,gson,Gson,src/test/java/com/google/gson/functional/PrimitiveTest.java,testDoubleInfinitySerialization(),acceptable,It is meaningful|It is concise|It is semantically consistent,It is syntactically similar to another identifier,,gson object of type Gson could get confusing.,not sure,It is concise,It is too general,,
7933,infinity,Gson,src/test/java/com/google/gson/functional/PrimitiveTest.java,testDoubleInfinitySerialization(),poor,It is meaningful|It is concise,It encodes type information in the name|It is too general,infinityNum,Being a common word representing a numerical value I think it should be avoided and more descriptive.,acceptable,It is meaningful,It is too general,,
8067,typeOfMap,Gson,src/test/java/com/google/gson/functional/MapTest.java,testConcurrentSkipListMap(),good,It is meaningful|It is properly capitalized,,,mapType good as well,poor,,,type,
8068,map,Gson,src/test/java/com/google/gson/functional/MapTest.java,testConcurrentSkipListMap(),good,It is meaningful|It is concise,,,,acceptable,,,,
8069,json,Gson,src/test/java/com/google/gson/functional/MapTest.java,testConcurrentSkipListMap(),acceptable,It is concise|It is consistent with tested code,It is semantically inconsistent,jsonMapRepresentation,"It is semantically inconsistent because any json string can be named ""json""",acceptable,,,jsonMap,
8155,src,Gson,src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,testTypesWithMultipleParametersSerialization(),good,It is meaningful|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,source,,acceptable,It follows project-specific naming conventions,It is too short|It is not meaningful|It is too general,source,
8156,typeOfSrc,Gson,src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,testTypesWithMultipleParametersSerialization(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code,,typeOfSource,,acceptable,It is consistent with tested code,It is not meaningful,,
8157,json,Gson,src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,testTypesWithMultipleParametersSerialization(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,actualJson|actual,,good,It is meaningful|It is concise|It is semantically consistent,,,
8158,expected,Gson,src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,testTypesWithMultipleParametersSerialization(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,expectedJson,,acceptable,,It is not meaningful,expectedJson,
8544,w,Jackson Core,src/test/java/com/fasterxml/jackson/core/PointerFromContextTest.java,testViaGenerator(),poor,,It is too short|It is semantically inconsistent|It does not follow project-specific naming conventions|It is too general,writer|stringWriter,,poor,It expresses a pattern,It is too short|It is not meaningful,,
8545,g,Jackson Core,src/test/java/com/fasterxml/jackson/core/PointerFromContextTest.java,testViaGenerator(),poor,,It is too short|It is semantically inconsistent|It is too general,generator|jsonGenerator,,poor,It expresses a pattern,It is too short|It is not meaningful,,
8708,LENS,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),acceptable,It is meaningful,It is too short,,,acceptable,,,lengths,"I would personally not choose this identifier name because the identifier 'lengths' is only three additional characters that explicitly tell you what is going on. Some cursory investigation easily shows you the intent of the variable, but that isn't really the mark of a good identifier. Identifiers that are abbreviated words that happen to be another word like ""lens"" (e.g., telescope lens) are not ideal because they invoke (even subconsciously) a bunch of irrelevant ideas that detract the reader from the purpose of the code."
8709,VARIANTS,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),acceptable,It is concise,,,,good,It is meaningful|It is concise,,,
8710,jsonFactory,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),good,It is meaningful|It is semantically consistent,,,,good,It is meaningful|It is semantically consistent,,,
8711,bytes,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is not meaningful|It is too general,outputStream,,acceptable,,It is too general,,
8712,chars,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is syntactically similar to another identifier,writer,,poor,,It is too general|It does not represent its type,,
8713,len,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),acceptable,,,,,good,It is meaningful|It is concise,,,"""len"" is a good identifier in that it is concise and meaningful in and of itself but also illustrates that lens is a list of len values and not something more abstract"
8714,input,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),acceptable,,,,,good,It is meaningful|It is concise,,,
8715,i,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is too short,,,acceptable,It is concise,,,"Short loop iteration variable, it's not meaningful, but it is pretty standard."
8716,variant,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),good,,,,,good,It is meaningful|It is concise|It is semantically consistent,,,
8717,g,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is too short,,,poor,It is concise,It is too short|It is not meaningful|It is syntactically similar to another identifier,jsonGenerator,
8718,p,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is too short,,,poor,It is concise,It is too short|It is not meaningful|It is syntactically similar to another identifier,jsonParser,
8719,data,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It is semantically inconsistent,,,acceptable,It is concise|It is semantically consistent,It is too general,parsedData,
8720,ioException,Jackson Core,src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java,_testBase64Text(int),poor,,It encodes type information in the name,,,good,It is meaningful|It is concise|It is syntactically distinct from other identifiers,,,
9075,gen,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,"_testFailOnWritingFieldNameInRoot(JsonFactory, boolean)",acceptable,It is meaningful,It is too short,generator|jsonGenerator,it is not clear,acceptable,It is consistent with tested code,It is too general,jsonGen,
9076,bout,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,"_testFailOnWritingFieldNameInRoot(JsonFactory, boolean)",acceptable,It is meaningful,It is improperly capitalized|It is inconsistent with the tested code,out|output|outputStream,it is not clear,acceptable,It is consistent with tested code|It expresses a pattern,It is too short|It is too general,,
9077,json,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,"_testFailOnWritingFieldNameInRoot(JsonFactory, boolean)",good,It is meaningful|It is semantically consistent|It is consistent with tested code,It is too general,jsonResult,,acceptable,It is consistent with tested code,It is too general,,
9189,sw,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,testOutputContext(),acceptable,It is semantically consistent,It is too short|It is not meaningful|It is too general,,,poor,,It is too short|It is not meaningful|It is improperly capitalized,stringWriter,
9190,gen,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,testOutputContext(),poor,,It is too general,,,poor,,It is too short|It is not meaningful,jsonGenerator,
9191,ctxt,Jackson Core,src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java,testOutputContext(),acceptable,It is semantically consistent,It is too short|It is too general,,,poor,,It is too short|It is not meaningful,context,
9314,p,Jackson Core,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testIndexMatchWithPath2(),poor,,It is not meaningful,filteringParserDelegate,,poor,,It is too short|It is not meaningful|It is too general,filteringParserDelegate|parser|parserDelegate,
9315,JSON,Jackson Core,src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testIndexMatchWithPath2(),poor,,It is not meaningful|It is improperly capitalized,jsonString,,acceptable,It is meaningful|It is semantically consistent,It is too general,,
9355,w,Jackson Core,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,testIndexMatchWithPath2(),acceptable,It is meaningful,It is too short|It is too general,writer,,poor,,It is not meaningful|It is too hard to follow code with variables that are too concise.,writer,It is a writer. It should be called writer
9356,gen,Jackson Core,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,testIndexMatchWithPath2(),acceptable,It is meaningful|It is semantically consistent|It is consistent with tested code,It is too short,generator,,poor,,It is too short|It is too hard to follow code with variables that are too concise.,generator,Is is the generator. It should be called generator
9357,JSON,Jackson Core,src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java,testIndexMatchWithPath2(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,It is improperly capitalized,json,usually local variables start with lower case,poor,,It is not meaningful|It is too general,testJson,"capitalized json has its own meaning, so it should not be used as identifier. An identifier that suggests testing data may be more appropriate"
9386,jf,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),poor,,It is not meaningful,,,poor,It is meaningful,It is too short|It is improperly capitalized|It is too general,jsonFactory,
9387,DOC,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),poor,,It is improperly capitalized,,,poor,It is meaningful,It is too short|It is improperly capitalized,document|text|string,
9388,jp,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),poor,,It is not meaningful,,,poor,It is meaningful,It is too short|It is improperly capitalized,parser|jsonParser,
9389,sw,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),acceptable,It is semantically consistent,,,,poor,It is meaningful,It is too short|It is improperly capitalized|It is too general,writer|stringWriter,
9390,gen,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),poor,,It is not meaningful,,,acceptable,It is meaningful,It is too short|It is too general,generator|jsonGenerator,
9391,t,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java,testCopyRootTokens(),poor,,It is too short|It is not meaningful,,,poor,,It is too short|It is syntactically similar to another identifier|It is too general,token|jsonToken,
9494,sw,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),poor,It is concise,It is too short|It is not meaningful,,,acceptable,It is concise,It is too hard to follow code with variables that are too concise.,stringWriter,
9495,gen,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),poor,It is concise,It is too short|It is not meaningful,,,poor,It is concise,It is too short|It is not meaningful,jsonGenerator,
9496,dec,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),poor,It is concise,It is too short|It is not meaningful,,,poor,It is concise,It is too short|It is not meaningful,bigDecimal,
9497,TEXT,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),poor,It is meaningful,It is too short|It is improperly capitalized|It is too general,,,good,It is concise|It follows project-specific naming conventions,It is too general,,
9498,docStr,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),good,It is meaningful|It is concise|It is properly capitalized,,,,poor,It is concise,It is too short|It is not meaningful,writtenJson,
9499,jp,Jackson Core,src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java,testConvenienceMethods(),poor,,It is too short|It is not meaningful,,,poor,It is concise,It is too short|It is not meaningful,jsonParser,
9624,from,Plexus-Utils,src/test/java/org/codehaus/plexus/util/FileUtilsTest.java,testCopyDirectoryStructureWithAEmptyDirectoryStructure(),acceptable,,It is not meaningful,fromFile,,good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,
9625,to,Plexus-Utils,src/test/java/org/codehaus/plexus/util/FileUtilsTest.java,testCopyDirectoryStructureWithAEmptyDirectoryStructure(),acceptable,,It is not meaningful,toFile,,good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,
9734,commandline,Plexus-Utils,src/test/java/org/codehaus/plexus/util/cli/shell/BourneShellTest.java,testBourneShellQuotingCharacters(),acceptable,It is meaningful,It is improperly capitalized,,,acceptable,It is meaningful,It is improperly capitalized,,
9735,lines,Plexus-Utils,src/test/java/org/codehaus/plexus/util/cli/shell/BourneShellTest.java,testBourneShellQuotingCharacters(),acceptable,It is meaningful,It is too general,,,poor,,It is too general,,
9737,cmd,Plexus-Utils,src/test/java/org/codehaus/plexus/util/cli/CommandlineTest.java,testCommandlineWithoutCommandInConstructor(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,commandLine,,good,,,,
9785,actual,Plexus-Utils,src/test/java/org/codehaus/plexus/util/cli/CommandLineUtilsTest.java,"assertCmdLineArgs(String[], String)",acceptable,It is meaningful,It is too general,actualArguments,,poor,,It is not meaningful,commands,
9796,list,Plexus-Utils,src/test/java/org/codehaus/plexus/util/introspection/ReflectionValueExtractorTest.java,testIndexedMissingDot(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,,,,poor,,It is not meaningful,,It is the name of a collection but does not reflect 'the collection of what?'
9811,xmlContent,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlStreamReaderTest.java,"checkXmlContent(String, String, byte[])",good,It is meaningful|It is concise,,,,good,It is meaningful|It is concise,,,
9812,in,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlStreamReaderTest.java,"checkXmlContent(String, String, byte[])",poor,,It is too short|It is not meaningful,,,poor,,It is too short|It is not meaningful,inputStream,
9813,reader,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlStreamReaderTest.java,"checkXmlContent(String, String, byte[])",acceptable,It is meaningful,It is too general,,,good,It is meaningful|It is concise|It is semantically consistent,,,
9814,result,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlStreamReaderTest.java,"checkXmlContent(String, String, byte[])",good,It is meaningful,,,,good,It is meaningful|It is concise|It is semantically consistent,,,
9859,testDocument,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlUtilTest.java,testPrettyFormatReaderWriter(),good,It is meaningful|It is properly capitalized,,,,good,It is meaningful|It is concise,,,
9860,reader,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlUtilTest.java,testPrettyFormatReaderWriter(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,good,It is syntactically distinct from other identifiers,,,
9861,writer,Plexus-Utils,src/test/java/org/codehaus/plexus/util/xml/XmlUtilTest.java,testPrettyFormatReaderWriter(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,,good,It is syntactically distinct from other identifiers,,,
10014,fin,Plexus-Utils,src/test/java/org/codehaus/plexus/util/IOUtilTest.java,testInputStreamToString(),acceptable,It is semantically consistent,It is too general,,,poor,It is meaningful,It is too short|It is improperly capitalized|It is too general,in|input|fileInputStreal,
10015,out,Plexus-Utils,src/test/java/org/codehaus/plexus/util/IOUtilTest.java,testInputStreamToString(),not sure,,,,,good,It is meaningful,It is too short,output,
10039,httpClientConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HttpClientConfigTest.java,cookiePolicyIsSetToIgnoreCookiesByDefault(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is semantically consistent|It is properly capitalized|It is consistent with tested code,,,
10040,httpClientConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HttpClientConfigTest.java,setParamsRespectsOtherConfigurationSettings(),acceptable,It is meaningful|It is properly capitalized|It is consistent with tested code,It is too long,config,"There is only one variable in the test, and it is of type HttpClientConfig , so no need to call it httpClientConfig ",good,It is meaningful|It follows project-specific naming conventions,,,
10041,httpClientConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HttpClientConfigTest.java,setParamsCorrectlyUpdatesPreviousSetting(),good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is syntactically distinct from other identifiers,,,
10048,headerConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,shouldOverwriteHeaderWithName_returns_true_when_applicable(),good,It is meaningful,,,,good,,,,
10049,config,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,shouldOverwriteHeaderWithName_returns_true_when_applicable(),poor,,It is too general,,,acceptable,,,newConfig,
10050,headerConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,shouldOverwriteHeaderWithName_returns_false_when_applicable(),good,It is meaningful|It is properly capitalized,It is semantically inconsistent|It is syntactically similar to another identifier,,,good,It is meaningful|It is concise|It is semantically consistent|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,
10051,config,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,shouldOverwriteHeaderWithName_returns_false_when_applicable(),poor,It is meaningful,It is semantically inconsistent|It is syntactically similar to another identifier,modifiedHeaderConfig,,good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,,,
10057,headerConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,accept_header_is_overwritable_by_default(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code|It follows project-specific naming conventions,,,,good,It is meaningful,,,
10058,headerConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,accept_header_is_mergeable_if_configured_accordingly(),good,It is meaningful|It is semantically consistent,,,,poor,,It encodes type information in the name|It is too general,baseConfig,"The identifier makes sense if it is the only one with that particular type. If there is a second identifier with the same type, then headerConfig makes no sense. "
10059,config,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,accept_header_is_mergeable_if_configured_accordingly(),poor,,It is too general,,,poor,,It is not meaningful,mergedConfig,"From the type, is clear that a config is some sort of Config, so no need to confirm that. It is most interesting if the identifier reflects the output of headerConfig.mergeHeadersWithName() "
10062,headerConfig,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,mergeHeadersWithName_works_as_expected(),good,It is meaningful|It is concise|It is semantically consistent|It follows project-specific naming conventions,,,,good,It is meaningful|It is concise|It is semantically consistent,,,Clear and acceptable choice for a variable representing a header configuration.
10063,config,REST Assured,rest-assured/src/test/java/com/jayway/restassured/config/HeaderConfigTest.java,mergeHeadersWithName_works_as_expected(),good,It is meaningful|It is concise|It is semantically consistent,,,,good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It follows project-specific naming conventions,,,Makes logic sense for this to be an object of type HeaderConfig.
100001,queueInfo0,Jesque,# automatically generated by EvoSuite,test19(),poor,It is properly capitalized,It is not meaningful|It is syntactically similar to another identifier|It uses a useless sequence number,,,poor,,,firtstQueueInfo,
100002,queueInfo1,Jesque,# automatically generated by EvoSuite,test19(),poor,It is properly capitalized,It is not meaningful|It is syntactically similar to another identifier|It uses a useless sequence number,,,poor,,,secondQueueInfo,
100003,long0,Jesque,# automatically generated by EvoSuite,test19(),poor,,It is not meaningful|It uses a useless sequence number|It is too general,,this variable is not even necessary here,poor,,,queueSize,
100004,boolean0,Jesque,# automatically generated by EvoSuite,test19(),poor,,It is not meaningful|It is too general,,,poor,,,isEqual,
100005,keyInfo0,Jesque,# automatically generated by EvoSuite,test11(),good,It is meaningful|It is concise|It is properly capitalized,It uses a useless sequence number,keyInfo,,poor,It is meaningful,It uses a useless sequence number,,
100006,linkedList0,Jesque,# automatically generated by EvoSuite,test11(),good,It is meaningful|It is properly capitalized|It is consistent with tested code,It uses a useless sequence number,linkedList,,poor,,It uses a useless sequence number|It does not represent its type,,
100007,list0,Jesque,# automatically generated by EvoSuite,test11(),good,It is meaningful|It is consistent with tested code,It uses a useless sequence number,list,,poor,,It uses a useless sequence number|It does not represent its type,,
100008,marshallingException0,Jongo,# automatically generated by EvoSuite,test0(),acceptable,It is meaningful|It is concise|It is properly capitalized,It is syntactically similar to another identifier|It uses a useless sequence number,actual|actualMarshallingException,it is hard to map '0' to actual and '1' to expected,good,,,,
100009,marshallingException1,Jongo,# automatically generated by EvoSuite,test0(),acceptable,It is meaningful|It is concise|It is semantically consistent,It is syntactically similar to another identifier|It uses a useless sequence number,expected|expectedMarshallingException,it is hard to map '0' to actual and '1' to expected,good,,,,"This test case is too simple, however, using the sequence number looks reasonable here."
100010,string0,Jongo,# automatically generated by EvoSuite,test0(),poor,It is concise,It is not meaningful|It is too general,,This gives very little context information and is overall a useless identifier.,poor,,It is not meaningful|It uses a useless sequence number,,
100011,sparseMatrix0,la4j,# automatically generated by EvoSuite,test039(),good,It is meaningful|It is concise|It follows project-specific naming conventions,,,,acceptable,,It uses a useless sequence number,,
100012,denseVector0,la4j,# automatically generated by EvoSuite,test039(),good,It is meaningful|It is concise|It follows project-specific naming conventions,,,,acceptable,,It uses a useless sequence number,,
100013,denseVector0,la4j,# automatically generated by EvoSuite,test032(),acceptable,It is meaningful|It is properly capitalized,It uses a useless sequence number,,,good,It is meaningful|It follows project-specific naming conventions,,,
100014,mockRandom0,la4j,# automatically generated by EvoSuite,test032(),acceptable,It is meaningful|It is properly capitalized,It uses a useless sequence number,,,good,It is meaningful|It follows project-specific naming conventions,,,
100015,vector0,la4j,# automatically generated by EvoSuite,test032(),acceptable,It is meaningful,It uses a useless sequence number|It is too general,,,poor,,It is not meaningful|It is syntactically similar to another identifier,,
100016,intArray0,la4j,# automatically generated by EvoSuite,test032(),poor,It is properly capitalized,It encodes type information in the name|It uses a useless sequence number|It is too general,,,good,It is meaningful|It is concise,,,
100017,parseLocation0,Natty,# automatically generated by EvoSuite,test05(),poor,,It is not meaningful|It encodes type information in the name|It is too general,,Other than it's an instance of ParseLocation it gives no more information.,poor,,It uses a useless sequence number,,
100018,int0,Natty,# automatically generated by EvoSuite,test05(),poor,It is concise,It is not meaningful|It is too general,,,poor,,It is not meaningful|It uses a useless sequence number,,
100019,calendarSource0,Natty,# automatically generated by EvoSuite,test0(),poor,,It uses a useless sequence number, calendarSource,,acceptable,It is meaningful|It is concise|It is properly capitalized,It uses a useless sequence number,calendarSource,
100020,runtimeExceptionDao0,ORMLite Core,# automatically generated by EvoSuite,test34(),poor,It is meaningful|It is semantically consistent|It follows project-specific naming conventions,It is syntactically similar to another identifier|It encodes type information in the name,,Too similar to its type.,acceptable,It is meaningful|It is concise|It is properly capitalized,It uses a useless sequence number,runtimeExceptionDao,
100021,fileDescriptor0,ORMLite Core,# automatically generated by EvoSuite,test0(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code,It uses a useless sequence number,fileDescriptor,,poor,It is meaningful,It uses a useless sequence number,,
100022,mockFileInputStream0,ORMLite Core,# automatically generated by EvoSuite,test0(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is properly capitalized|It is consistent with tested code,It uses a useless sequence number,mockFileInputStream,,poor,It is meaningful,It uses a useless sequence number,,
100023,locale0,Commons Lang,# automatically generated by EvoSuite,test122(),acceptable,,,,,poor,,It uses a useless sequence number|It is too general,japLocale,"Since the test focuses on Japanese locale, the identifier should suggest that. "
100024,stringArray0,Commons Lang,# automatically generated by EvoSuite,test122(),acceptable,It is properly capitalized,,,,poor,,It is semantically inconsistent|It uses a useless sequence number|It is too general|It does not represent its type,parsePatterns,The documentation of DateUtils states that the stringArray0 stores parsePatterns. It is clear that stringArray0 is not convenient. 
100025,date0,Commons Lang,# automatically generated by EvoSuite,test122(),acceptable,,,,,poor,,It is semantically inconsistent|It is syntactically similar to another identifier|It uses a useless sequence number|It is too general,before,One has to read three lines of code to understand the role of date0. That role could be easily explained with other meaningful identifier
100026,date1,Commons Lang,# automatically generated by EvoSuite,test122(),acceptable,,,,,poor,,It is semantically inconsistent|It is syntactically similar to another identifier|It uses a useless sequence number|It is too general,after,One has to read three lines of code to understand the role of date1. That role could be easily explained with other meaningful identifier
100027,charBuffer0,Commons Lang,# automatically generated by EvoSuite,test043(),poor,,It uses a useless sequence number,charBuffer,,acceptable,It is concise,It uses a useless sequence number,charBuffer,
100028,string0,Commons Lang,# automatically generated by EvoSuite,test043(),poor,,It uses a useless sequence number,string,"Moreover, the identifier is useless (i.e., never used in the method's body)",acceptable,It is concise,It uses a useless sequence number,,
100029,fileSystemHandling0,Commons Lang,# automatically generated by EvoSuite,test043(),poor,,It uses a useless sequence number,fileSystemHandling,,acceptable,It is meaningful|It is concise|It is properly capitalized,It uses a useless sequence number,fileSystemHandling,
100030,stringReader0,Gson,# automatically generated by EvoSuite,test36(),poor,,It uses a useless sequence number,stringReader,,acceptable,It is meaningful,It uses a useless sequence number,stringReader,
100031,jsonReader0,Gson,# automatically generated by EvoSuite,test36(),poor,,It uses a useless sequence number,jsonReader,,acceptable,It is meaningful,It uses a useless sequence number,jsonReader,
100032,gson0,Gson,# automatically generated by EvoSuite,test02(),good,It is meaningful|It is concise|It is semantically consistent|It is syntactically distinct from other identifiers|It is consistent with tested code,It uses a useless sequence number,gson,"when I see the number, I expect that it has the meaning",acceptable,It is concise,It uses a useless sequence number,gson,
100033,class0,Gson,# automatically generated by EvoSuite,test02(),good,It is meaningful|It is concise|It is semantically consistent|It is consistent with tested code,It uses a useless sequence number,myClass|testClass,"when I see the number, I expect that it has the meaning. Since 'class' can't be used, I would rather use 'myClass' then class ",acceptable,,It uses a useless sequence number,class,
100034,jsonFactory0,Jackson Core,# automatically generated by EvoSuite,test001(),acceptable,,,,,acceptable,It is meaningful,,jsonFactory,"It isn't clear to me why it is named 'jsonFactory0' rather than just 'jsonFactory'. It seems like the identifier is trying to infer irrelevant information about the business logic being tested. When reading/writing/comprehending code, I rather have identifiers that are straightforward and follow business logic myself."
100035,jsonParser_Feature0,Jackson Core,# automatically generated by EvoSuite,test001(),acceptable,,,,,acceptable,It is meaningful,It misuses underscores,jsonParserFeature,The underscore to me just adds an irrelevant character. The underscore isn't needed to describe the identifier's purpose. Same with the '0' at the end. 
100036,jbyteArray0,Jackson Core,# automatically generated by EvoSuite,test001(),acceptable,,,,,acceptable,It is meaningful,,jbyteArray,"Like the other identifiers in this same test code, I don't think the '0' adds any value. Further, I think it actually detracts a reader's attention from the code as they try to infer the meaning of that 0. Better to let the identifier and the logic stand alone. In my opinion the identifier should describe the entity, not the entity's state."
100037,jsonParser0,Jackson Core,# automatically generated by EvoSuite,test001(),acceptable,,,,,acceptable,It is meaningful,,jsonParser,"Like the other identifiers in this same test code, I don't think the '0' adds any value. Further, I think it actually detracts a reader's attention from the code as they try to infer the meaning of that 0. Better to let the identifier and the logic stand alone. In my opinion the identifier should describe the entity, not the entity's state."
100038,bufferRecycler0,Jackson Core,# automatically generated by EvoSuite,test31(),acceptable,It is concise|It is semantically consistent|It is properly capitalized,It uses a useless sequence number,bufferRecycler,,poor,,,bufferRecycler,
100039,iOContext0,Jackson Core,# automatically generated by EvoSuite,test31(),acceptable,It is concise|It is semantically consistent,It is improperly capitalized|It uses a useless sequence number,ioContext,,poor,,,ioContext,
100040,pipedOutputStream0,Jackson Core,# automatically generated by EvoSuite,test31(),acceptable,It is concise|It is semantically consistent,It uses a useless sequence number,pipedOutputStream,,poor,,,pipedOutputStream,
100041,uTF8JsonGenerator0,Jackson Core,# automatically generated by EvoSuite,test31(),acceptable,It is concise|It is semantically consistent,It is improperly capitalized|It uses a useless sequence number,utf8JsonGenerator,,poor,,,utf8JsonGenerator,
100042,mockPrintWriter0,Plexus-Utils,# automatically generated by EvoSuite,test66(),acceptable,,It uses a useless sequence number,,,poor,,,mockPrintWritter,
100043,file0,Plexus-Utils,# automatically generated by EvoSuite,test116(),acceptable,It is meaningful,It uses a useless sequence number,nonExistingFile,,poor,,It is not meaningful|It is too general,,
100044,headerConfig0,REST Assured,# automatically generated by EvoSuite,test4(),poor,,It uses a useless sequence number,headerConfig,,acceptable,It is meaningful|It is properly capitalized|It is consistent with tested code,It uses a useless sequence number,headerConfig,
100045,headerConfig0,REST Assured,# automatically generated by EvoSuite,test1(),poor,It is concise,It is too general,,I feel like there are better ways to label different header configurations than tacking on an integer to the back of it.,poor,It is meaningful|It is semantically consistent,It uses a useless sequence number,,
100046,stringArray0,REST Assured,# automatically generated by EvoSuite,test1(),poor,It is concise,It is not meaningful|It is too general,,,poor,,It uses a useless sequence number,,